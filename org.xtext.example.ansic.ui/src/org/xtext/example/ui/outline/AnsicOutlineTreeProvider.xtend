/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.xtext.example.ansic.translation_unit
import org.xtext.example.ansic.external_declaration
import org.xtext.example.ansic.declaration_specifiers	
import org.xtext.example.ansic.alignment_specifier
import org.xtext.example.ansic.type_qualifier
import org.xtext.example.ansic.type_specifier
import org.xtext.example.ansic.enum_specifier
import org.xtext.example.ansic.enumerator_list
import org.xtext.example.ansic.enumerator_list_linha
import org.xtext.example.ansic.enumerator

import org.xtext.example.ansic.atomic_type_specifier

import org.xtext.example.ansic.struct_or_union_specifier


import org.xtext.example.ansic.struct_or_union_specifier_complement
import org.xtext.example.ansic.struct_declaration_list
import org.xtext.example.ansic.struct_declaration_list_linha
import org.xtext.example.ansic.struct_declaration
import org.xtext.example.ansic.struct_declarator_list
import org.xtext.example.ansic.struct_declarator_list_linha
import org.xtext.example.ansic.struct_declarator
import org.xtext.example.ansic.specifier_qualifier_list
import org.xtext.example.ansic.declaration
import org.xtext.example.ansic.function_definition

import org.xtext.example.ansic.declaration_list	
import org.xtext.example.ansic.declaration_list_linha
import org.xtext.example.ansic.declarator
import org.xtext.example.ansic.pointer
import org.xtext.example.ansic.type_qualifier_list
import org.xtext.example.ansic.type_qualifier_list_linha
import org.xtext.example.ansic.direct_declarator
import org.xtext.example.ansic.direct_declarator_linha
import org.xtext.example.ansic.direct_declarator_complemento
import org.xtext.example.ansic.parameter_type_list
import org.xtext.example.ansic.parameter_lista
import org.xtext.example.ansic.parameter_list_linha
import org.xtext.example.ansic.parameter_declaration
import org.xtext.example.ansic.abstract_declarator
import org.xtext.example.ansic.direct_abstract_declarator

import org.xtext.example.ansic.initializer
import org.xtext.example.ansic.direct_abstract_declarator_linha
import org.xtext.example.ansic.direct_abstract_declarator_complement
import org.xtext.example.ansic.identifier_list	
import org.xtext.example.ansic.identifier_list_linha
import org.xtext.example.ansic.translation_unit_linha
import org.xtext.example.ansic.primary_expression
import org.xtext.example.ansic.enumeration_constant


import org.xtext.example.ansic.generic_selection
import org.xtext.example.ansic.generic_assoc_list
import org.xtext.example.ansic.generic_assoc_list_linha
import org.xtext.example.ansic.generic_association
import org.xtext.example.ansic.postfix_expression
import org.xtext.example.ansic.postfix_expression_linha
import org.xtext.example.ansic.initializer_list
import org.xtext.example.ansic.initializer_list_linha


import org.xtext.example.ansic.initializer_list_complement
import org.xtext.example.ansic.designation
import org.xtext.example.ansic.designator_list
import org.xtext.example.ansic.designator_list_linha

import org.xtext.example.ansic.designator
import org.xtext.example.ansic.static_assert_declaration


import org.xtext.example.ansic.postfix_expression_complement
import org.xtext.example.ansic.argument_expression_list
import org.xtext.example.ansic.argument_expression_list_linha
import org.xtext.example.ansic.unary_expression
import org.xtext.example.ansic.cast_expression
import org.xtext.example.ansic.multiplicative_expression_linha	

import org.xtext.example.ansic.multiplicative_expression_complement
import org.xtext.example.ansic.additive_expression
import org.xtext.example.ansic.additive_expression_linha
import org.xtext.example.ansic.additive_expression_complement
import org.xtext.example.ansic.shift_expression
import org.xtext.example.ansic.shift_expression_linha
import org.xtext.example.ansic.shift_expression_complement
import org.xtext.example.ansic.relational_expression
import org.xtext.example.ansic.relational_expression_linha
import org.xtext.example.ansic.relational_expression_complement
import org.xtext.example.ansic.equality_expression
import org.xtext.example.ansic.equality_expression_linha
import org.xtext.example.ansic.equality_expression_complement
import org.xtext.example.ansic.statement

import org.xtext.example.ansic.jump_statement


import org.xtext.example.ansic.iteration_statement
import org.xtext.example.ansic.selection_statement


import org.xtext.example.ansic.labeled_statement
import org.xtext.example.ansic.compound_statement
import org.xtext.example.ansic.block_item_list
import org.xtext.example.ansic.block_item_list_linha
import org.xtext.example.ansic.block_item
import org.xtext.example.ansic.expression_statement

import org.xtext.example.ansic.and_expression
import org.xtext.example.ansic.and_expression_linha
import org.xtext.example.ansic.exclusive_or_expression
import org.xtext.example.ansic.exclusive_or_expression_linha
import org.xtext.example.ansic.inclusive_or_expression
import org.xtext.example.ansic.inclusive_or_expression_linha
import org.xtext.example.ansic.logical_and_expression
import org.xtext.example.ansic.logical_and_expression_linha
import org.xtext.example.ansic.logical_or_expression	
import org.xtext.example.ansic.logical_or_expression_linha
import org.xtext.example.ansic.conditional_expression
import org.xtext.example.ansic.conditional_expression_linha
import org.xtext.example.ansic.assignment_expression

import org.xtext.example.ansic.type_name	

import org.xtext.example.ansic.expression
import org.xtext.example.ansic.expression_linha
import org.xtext.example.ansic.constant_expression

import org.xtext.example.ansic.init_declarator_list
import org.xtext.example.ansic.init_declarator_list_linha
import org.xtext.example.ansic.init_declarator
import org.xtext.example.ansic.string_ufcg

import org.xtext.example.ansic.constant
/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class AnsicOutlineTreeProvider extends DefaultOutlineTreeProvider {
	def _text(translation_unit entity) {
  return "translation_unit";
}
def _text(external_declaration entity) {
  return "external_declaration";
}
def _text(declaration_specifiers entity) {
  return "declaration_specifiers";
}	

def _text(alignment_specifier entity) {
  return "alignment_specifier";
}
def _text(type_qualifier entity) {
  return "type_qualifier";
}
def _text(type_specifier entity) {
  return "type_specifier";
}
def _text(enum_specifier entity) {
  return "enum_specifier";
}
def _text(enumerator_list entity) {
  return "enumerator_list";
}
def _text(enumerator_list_linha entity) {
  return "enumerator_list_linha";
}
def _text(enumerator entity) {
  return "enumerator";
}

def _text(atomic_type_specifier entity) {
  return "atomic_type_specifier";
}

def _text(struct_or_union_specifier entity) {
  return "struct_or_union_specifier";
}

def _text(struct_or_union_specifier_complement entity) {
  return "struct_or_union_specifier_complement";
}
def _text(struct_declaration_list entity) {
  return "struct_declaration_list";
}
def _text(struct_declaration_list_linha entity) {
  return "struct_declaration_list_linha";
}
def _text(struct_declaration entity) {
  return "struct_declaration";
}
def _text(struct_declarator_list entity) {
  return "struct_declarator_list";
}def _text(struct_declarator_list_linha entity) {
  return "struct_declarator_list_linha";
}def _text(struct_declarator entity) {
  return "struct_declarator";
}
def _text(specifier_qualifier_list entity) {
  return "specifier_qualifier_list";
}

def _text(declaration entity) {
  return "declaration";
}
def _text(function_definition entity) {
  return "function_definition";
}

def _text(declaration_list entity) {
  return "declaration_list";
}	
def _text(declaration_list_linha entity) {
  return "declaration_list_linha";
}
def _text(declarator entity) {
  return "declarator";
}
def _text(pointer entity) {
  return "pointer";
}
def _text(type_qualifier_list entity) {
  return "type_qualifier_list";
}
def _text(type_qualifier_list_linha entity) {
  return "type_qualifier_list_linha";
}
def _text(direct_declarator entity) {
  return "direct_declarator";
}
def _text(direct_declarator_linha entity) {
  return "direct_declarator_linha";
}
def _text(direct_declarator_complemento entity) {
  return "direct_declarator_complemento";
}
def _text(parameter_type_list entity) {
  return "parameter_type_list";
}
def _text(parameter_lista entity) {
  return "parameter_lista";
}
def _text(parameter_list_linha entity) {
  return "parameter_list_linha";
}
def _text(parameter_declaration entity) {
  return "parameter_declaration";
}
def _text(abstract_declarator entity) {
  return "abstract_declarator";
}
def _text(direct_abstract_declarator entity) {
  return "direct_abstract_declarator";
}

def _text(initializer entity) {
  return "initializer";
}
def _text(direct_abstract_declarator_linha entity) {
  return "direct_abstract_declarator_linha";
}
def _text(direct_abstract_declarator_complement entity) {
  return "direct_abstract_declarator_complement";
}
def _text(identifier_list entity) {
  return "identifier_list";
}	
def _text(identifier_list_linha entity) {
  return "identifier_list_linha";
}
def _text(translation_unit_linha entity) {
  return "translation_unit_linha";
}
def _text(primary_expression entity) {
  return "primary_expression";
}
def _text(enumeration_constant entity) {
  return "enumeration_constant";
}


def _text(generic_selection entity) {
  return "generic_selection";
}
def _text(generic_assoc_list entity) {
  return "generic_assoc_list";
}
def _text(generic_assoc_list_linha entity) {
  return "generic_assoc_list_linha";
}
def _text(generic_association entity) {
  return "generic_association";
}
def _text(postfix_expression entity) {
  return "postfix_expression";
}
def _text(postfix_expression_linha entity) {
  return "postfix_expression_linha";
}
def _text(initializer_list entity) {
  return "initializer_list";
}
def _text(initializer_list_linha entity) {
  return "initializer_list_linha";
}


def _text(initializer_list_complement entity) {
  return "initializer_list_complement";
}
def _text(designation entity) {
  return "designation";
}
def _text(designator_list entity) {
  return "designator_list";
}
def _text(designator_list_linha entity) {
  return "designator_list_linha";
}

def _text(designator entity) {
  return "designator";
}
def _text(static_assert_declaration entity) {
  return "static_assert_declaration";
}


def _text(postfix_expression_complement entity) {
  return "postfix_expression_complement";
}
def _text(argument_expression_list entity) {
  return "argument_expression_list";
}
def _text(argument_expression_list_linha entity) {
  return "argument_expression_list_linha";
}
def _text(unary_expression entity) {
  return "unary_expression";
}
def _text(cast_expression entity) {
  return "cast_expression";
}
	
def _text(additive_expression entity) {
  return "additive_expression";
}
def _text(additive_expression_linha entity) {
  return "additive_expression_linha";
}
def _text(additive_expression_complement entity) {
  return "additive_expression_complement";
}
def _text(shift_expression entity) {
  return "shift_expression";
}
def _text(shift_expression_linha entity) {
  return "shift_expression_linha";
}
def _text(shift_expression_complement entity) {
  return "shift_expression_complement";
}
def _text(relational_expression entity) {
  return "relational_expression";
}
def _text(relational_expression_linha entity) {
  return "relational_expression_linha";
}
def _text(relational_expression_complement entity) {
  return "relational_expression_complement";
}
def _text(equality_expression entity) {
  return "equality_expression";
}
def _text(equality_expression_linha entity) {
  return "equality_expression_linha";
}
def _text(equality_expression_complement entity) {
  return "equality_expression_complement";
}
def _text(statement entity) {
  return "statement";
}

def _text(jump_statement entity) {
  return "jump_statement";
}


def _text(iteration_statement entity) {
  return "iteration_statement";
}
def _text(selection_statement entity) {
  return "selection_statement";
}


def _text(labeled_statement entity) {
  return "labeled_statement";
}
def _text(compound_statement entity) {
  return "compound_statement";
}
def _text(block_item_list entity) {
  return "block_item_list";
}
def _text(block_item_list_linha entity) {
  return "block_item_list_linha";
}
def _text(block_item entity) {
  return "block_item";
}
def _text(expression_statement entity) {
  return "expression_statement";
}

def _text(and_expression entity) {
  return "and_expression";
}
def _text(and_expression_linha entity) {
  return "and_expression_linha";
}
def _text(exclusive_or_expression entity) {
  return "exclusive_or_expression";
}
def _text(exclusive_or_expression_linha entity) {
  return "exclusive_or_expression_linha";
}
def _text(inclusive_or_expression entity) {
  return "inclusive_or_expression";
}
def _text(inclusive_or_expression_linha entity) {
  return "inclusive_or_expression_linha";
}
def _text(logical_and_expression entity) {
  return "logical_and_expression";
}
def _text(logical_and_expression_linha entity) {
  return "logical_and_expression_linha";
}
def _text(logical_or_expression entity) {
  return "logical_or_expression";
}	
def _text(logical_or_expression_linha entity) {
  return "logical_or_expression_linha";
}
def _text(conditional_expression entity) {
  return "conditional_expression";
}
def _text(conditional_expression_linha entity) {
  return "conditional_expression_linha";
}
def _text(assignment_expression entity) {
  return "assignment_expression";
}

def _text(type_name entity) {
  return "type_name";
}	

def _text(expression entity) {
  return "expression";
}
def _text(expression_linha entity) {
  return "expression_linha";
}
def _text(constant_expression entity) {
  return "constant_expression";
}

def _text(init_declarator_list entity) {
  return "init_declarator_list";
}
def _text(init_declarator_list_linha entity) {
  return "init_declarator_list_linha";
}
def _text(init_declarator entity) {
  return "init_declarator";
}
def _text(string_ufcg entity) {
  return "string_ufcg";
}

def _text(constant entity) {
  return "constant";
}
}
