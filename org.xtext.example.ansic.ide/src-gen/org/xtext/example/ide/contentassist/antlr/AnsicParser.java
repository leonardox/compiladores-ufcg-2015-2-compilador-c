/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.ide.contentassist.antlr.internal.InternalAnsicParser;
import org.xtext.example.services.AnsicGrammarAccess;

public class AnsicParser extends AbstractContentAssistParser {

	@Inject
	private AnsicGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAnsicParser createParser() {
		InternalAnsicParser result = new InternalAnsicParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimary_expressionAccess().getAlternatives(), "rule__Primary_expression__Alternatives");
					put(grammarAccess.getPostfix_expressionLAccess().getAlternatives(), "rule__Postfix_expressionL__Alternatives");
					put(grammarAccess.getUnary_expressionAccess().getAlternatives(), "rule__Unary_expression__Alternatives");
					put(grammarAccess.getUnary_operatorAccess().getAlternatives(), "rule__Unary_operator__Alternatives");
					put(grammarAccess.getCast_expressionAccess().getAlternatives(), "rule__Cast_expression__Alternatives");
					put(grammarAccess.getMultiplicative_expressionIAccess().getAlternatives(), "rule__Multiplicative_expressionI__Alternatives");
					put(grammarAccess.getAdditive_expressionAccess().getAlternatives_1_0(), "rule__Additive_expression__Alternatives_1_0");
					put(grammarAccess.getShift_expressionAccess().getAlternatives_1_0(), "rule__Shift_expression__Alternatives_1_0");
					put(grammarAccess.getRelational_expressionAccess().getAlternatives_1_0(), "rule__Relational_expression__Alternatives_1_0");
					put(grammarAccess.getEquality_expressionAccess().getAlternatives_1_0(), "rule__Equality_expression__Alternatives_1_0");
					put(grammarAccess.getAssignment_expressionAccess().getAlternatives(), "rule__Assignment_expression__Alternatives");
					put(grammarAccess.getAssignment_operatorAccess().getAlternatives(), "rule__Assignment_operator__Alternatives");
					put(grammarAccess.getDeclaration_specifiersAccess().getAlternatives(), "rule__Declaration_specifiers__Alternatives");
					put(grammarAccess.getStorage_class_specifierAccess().getAlternatives(), "rule__Storage_class_specifier__Alternatives");
					put(grammarAccess.getType_specifierAccess().getAlternatives(), "rule__Type_specifier__Alternatives");
					put(grammarAccess.getStruct_or_union_specifierAccess().getAlternatives(), "rule__Struct_or_union_specifier__Alternatives");
					put(grammarAccess.getStruct_or_unionAccess().getAlternatives(), "rule__Struct_or_union__Alternatives");
					put(grammarAccess.getSpecifier_qualifier_listAccess().getAlternatives(), "rule__Specifier_qualifier_list__Alternatives");
					put(grammarAccess.getStruct_declaratorAccess().getAlternatives(), "rule__Struct_declarator__Alternatives");
					put(grammarAccess.getEnum_specifierAccess().getAlternatives(), "rule__Enum_specifier__Alternatives");
					put(grammarAccess.getEnumeratorAccess().getAlternatives(), "rule__Enumerator__Alternatives");
					put(grammarAccess.getType_qualifierAccess().getAlternatives(), "rule__Type_qualifier__Alternatives");
					put(grammarAccess.getDeclaratorAccess().getAlternatives(), "rule__Declarator__Alternatives");
					put(grammarAccess.getDirect_declaratorAccess().getAlternatives(), "rule__Direct_declarator__Alternatives");
					put(grammarAccess.getDirect_declaratorIAccess().getAlternatives(), "rule__Direct_declaratorI__Alternatives");
					put(grammarAccess.getPointerAccess().getAlternatives(), "rule__Pointer__Alternatives");
					put(grammarAccess.getParameter_declarationAccess().getAlternatives(), "rule__Parameter_declaration__Alternatives");
					put(grammarAccess.getAbstract_declaratorAccess().getAlternatives(), "rule__Abstract_declarator__Alternatives");
					put(grammarAccess.getDirect_abstract_declaratorAccess().getAlternatives(), "rule__Direct_abstract_declarator__Alternatives");
					put(grammarAccess.getDirect_abstract_declaratorIAccess().getAlternatives(), "rule__Direct_abstract_declaratorI__Alternatives");
					put(grammarAccess.getInitializerAccess().getAlternatives(), "rule__Initializer__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getLabeled_statementAccess().getAlternatives(), "rule__Labeled_statement__Alternatives");
					put(grammarAccess.getCompound_statementAccess().getAlternatives(), "rule__Compound_statement__Alternatives");
					put(grammarAccess.getExpression_statementAccess().getAlternatives(), "rule__Expression_statement__Alternatives");
					put(grammarAccess.getSelection_statementAccess().getAlternatives(), "rule__Selection_statement__Alternatives");
					put(grammarAccess.getIteration_statementAccess().getAlternatives(), "rule__Iteration_statement__Alternatives");
					put(grammarAccess.getJump_statementAccess().getAlternatives(), "rule__Jump_statement__Alternatives");
					put(grammarAccess.getExternal_declarationAccess().getAlternatives(), "rule__External_declaration__Alternatives");
					put(grammarAccess.getFunction_definitionAccess().getAlternatives(), "rule__Function_definition__Alternatives");
					put(grammarAccess.getFSAccess().getAlternatives(), "rule__FS__Alternatives");
					put(grammarAccess.getISAccess().getAlternatives(), "rule__IS__Alternatives");
					put(grammarAccess.getCONSTANTAccess().getAlternatives(), "rule__CONSTANT__Alternatives");
					put(grammarAccess.getPrimary_expressionAccess().getGroup_3(), "rule__Primary_expression__Group_3__0");
					put(grammarAccess.getPostfix_expressionLAccess().getGroup_0(), "rule__Postfix_expressionL__Group_0__0");
					put(grammarAccess.getPostfix_expressionLAccess().getGroup_1(), "rule__Postfix_expressionL__Group_1__0");
					put(grammarAccess.getPostfix_expressionLAccess().getGroup_2(), "rule__Postfix_expressionL__Group_2__0");
					put(grammarAccess.getPostfix_expressionLAccess().getGroup_3(), "rule__Postfix_expressionL__Group_3__0");
					put(grammarAccess.getPostfix_expressionLAccess().getGroup_4(), "rule__Postfix_expressionL__Group_4__0");
					put(grammarAccess.getPostfix_expressionLAccess().getGroup_5(), "rule__Postfix_expressionL__Group_5__0");
					put(grammarAccess.getPostfix_expressionLAccess().getGroup_6(), "rule__Postfix_expressionL__Group_6__0");
					put(grammarAccess.getPostfix_expressionAccess().getGroup(), "rule__Postfix_expression__Group__0");
					put(grammarAccess.getArgument_expression_listIAccess().getGroup(), "rule__Argument_expression_listI__Group__0");
					put(grammarAccess.getArgument_expression_listAccess().getGroup(), "rule__Argument_expression_list__Group__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_1(), "rule__Unary_expression__Group_1__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_2(), "rule__Unary_expression__Group_2__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_3(), "rule__Unary_expression__Group_3__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_4(), "rule__Unary_expression__Group_4__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_5(), "rule__Unary_expression__Group_5__0");
					put(grammarAccess.getCast_expressionAccess().getGroup_1(), "rule__Cast_expression__Group_1__0");
					put(grammarAccess.getMultiplicative_expressionIAccess().getGroup_0(), "rule__Multiplicative_expressionI__Group_0__0");
					put(grammarAccess.getMultiplicative_expressionIAccess().getGroup_1(), "rule__Multiplicative_expressionI__Group_1__0");
					put(grammarAccess.getMultiplicative_expressionIAccess().getGroup_2(), "rule__Multiplicative_expressionI__Group_2__0");
					put(grammarAccess.getMultiplicative_expressionAccess().getGroup(), "rule__Multiplicative_expression__Group__0");
					put(grammarAccess.getAdditive_expressionAccess().getGroup(), "rule__Additive_expression__Group__0");
					put(grammarAccess.getAdditive_expressionAccess().getGroup_1(), "rule__Additive_expression__Group_1__0");
					put(grammarAccess.getShift_expressionAccess().getGroup(), "rule__Shift_expression__Group__0");
					put(grammarAccess.getShift_expressionAccess().getGroup_1(), "rule__Shift_expression__Group_1__0");
					put(grammarAccess.getRelational_expressionAccess().getGroup(), "rule__Relational_expression__Group__0");
					put(grammarAccess.getRelational_expressionAccess().getGroup_1(), "rule__Relational_expression__Group_1__0");
					put(grammarAccess.getEquality_expressionAccess().getGroup(), "rule__Equality_expression__Group__0");
					put(grammarAccess.getEquality_expressionAccess().getGroup_1(), "rule__Equality_expression__Group_1__0");
					put(grammarAccess.getAnd_expressionAccess().getGroup(), "rule__And_expression__Group__0");
					put(grammarAccess.getAnd_expressionAccess().getGroup_1(), "rule__And_expression__Group_1__0");
					put(grammarAccess.getExclusive_or_expressionAccess().getGroup(), "rule__Exclusive_or_expression__Group__0");
					put(grammarAccess.getExclusive_or_expressionAccess().getGroup_1(), "rule__Exclusive_or_expression__Group_1__0");
					put(grammarAccess.getInclusive_or_expressionAccess().getGroup(), "rule__Inclusive_or_expression__Group__0");
					put(grammarAccess.getInclusive_or_expressionAccess().getGroup_1(), "rule__Inclusive_or_expression__Group_1__0");
					put(grammarAccess.getLogical_and_expressionAccess().getGroup(), "rule__Logical_and_expression__Group__0");
					put(grammarAccess.getLogical_and_expressionAccess().getGroup_1(), "rule__Logical_and_expression__Group_1__0");
					put(grammarAccess.getLogical_or_expressionAccess().getGroup(), "rule__Logical_or_expression__Group__0");
					put(grammarAccess.getLogical_or_expressionAccess().getGroup_1(), "rule__Logical_or_expression__Group_1__0");
					put(grammarAccess.getConditional_expressionAccess().getGroup(), "rule__Conditional_expression__Group__0");
					put(grammarAccess.getConditional_expressionAccess().getGroup_1(), "rule__Conditional_expression__Group_1__0");
					put(grammarAccess.getAssignment_expressionAccess().getGroup_1(), "rule__Assignment_expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getDeclaration_specifiersAccess().getGroup_0(), "rule__Declaration_specifiers__Group_0__0");
					put(grammarAccess.getDeclaration_specifiersAccess().getGroup_1(), "rule__Declaration_specifiers__Group_1__0");
					put(grammarAccess.getDeclaration_specifiersAccess().getGroup_2(), "rule__Declaration_specifiers__Group_2__0");
					put(grammarAccess.getInit_declarator_listAccess().getGroup(), "rule__Init_declarator_list__Group__0");
					put(grammarAccess.getInit_declarator_listAccess().getGroup_1(), "rule__Init_declarator_list__Group_1__0");
					put(grammarAccess.getInit_declaratorAccess().getGroup(), "rule__Init_declarator__Group__0");
					put(grammarAccess.getInit_declaratorAccess().getGroup_1(), "rule__Init_declarator__Group_1__0");
					put(grammarAccess.getStruct_or_union_specifierAccess().getGroup_0(), "rule__Struct_or_union_specifier__Group_0__0");
					put(grammarAccess.getStruct_or_union_specifierAccess().getGroup_1(), "rule__Struct_or_union_specifier__Group_1__0");
					put(grammarAccess.getStruct_or_union_specifierAccess().getGroup_2(), "rule__Struct_or_union_specifier__Group_2__0");
					put(grammarAccess.getStruct_declarationAccess().getGroup(), "rule__Struct_declaration__Group__0");
					put(grammarAccess.getSpecifier_qualifier_listAccess().getGroup_0(), "rule__Specifier_qualifier_list__Group_0__0");
					put(grammarAccess.getSpecifier_qualifier_listAccess().getGroup_2(), "rule__Specifier_qualifier_list__Group_2__0");
					put(grammarAccess.getStruct_declarator_listAccess().getGroup(), "rule__Struct_declarator_list__Group__0");
					put(grammarAccess.getStruct_declarator_listAccess().getGroup_1(), "rule__Struct_declarator_list__Group_1__0");
					put(grammarAccess.getStruct_declaratorAccess().getGroup_1(), "rule__Struct_declarator__Group_1__0");
					put(grammarAccess.getStruct_declaratorAccess().getGroup_2(), "rule__Struct_declarator__Group_2__0");
					put(grammarAccess.getEnum_specifierAccess().getGroup_0(), "rule__Enum_specifier__Group_0__0");
					put(grammarAccess.getEnum_specifierAccess().getGroup_1(), "rule__Enum_specifier__Group_1__0");
					put(grammarAccess.getEnum_specifierAccess().getGroup_2(), "rule__Enum_specifier__Group_2__0");
					put(grammarAccess.getEnumerator_listAccess().getGroup(), "rule__Enumerator_list__Group__0");
					put(grammarAccess.getEnumerator_listAccess().getGroup_1(), "rule__Enumerator_list__Group_1__0");
					put(grammarAccess.getEnumeratorAccess().getGroup_1(), "rule__Enumerator__Group_1__0");
					put(grammarAccess.getDeclaratorAccess().getGroup_0(), "rule__Declarator__Group_0__0");
					put(grammarAccess.getDirect_declaratorAccess().getGroup_0(), "rule__Direct_declarator__Group_0__0");
					put(grammarAccess.getDirect_declaratorAccess().getGroup_1(), "rule__Direct_declarator__Group_1__0");
					put(grammarAccess.getDirect_declaratorIAccess().getGroup_0(), "rule__Direct_declaratorI__Group_0__0");
					put(grammarAccess.getDirect_declaratorIAccess().getGroup_1(), "rule__Direct_declaratorI__Group_1__0");
					put(grammarAccess.getDirect_declaratorIAccess().getGroup_2(), "rule__Direct_declaratorI__Group_2__0");
					put(grammarAccess.getDirect_declaratorIAccess().getGroup_3(), "rule__Direct_declaratorI__Group_3__0");
					put(grammarAccess.getDirect_declaratorIAccess().getGroup_4(), "rule__Direct_declaratorI__Group_4__0");
					put(grammarAccess.getPointerAccess().getGroup_1(), "rule__Pointer__Group_1__0");
					put(grammarAccess.getPointerAccess().getGroup_2(), "rule__Pointer__Group_2__0");
					put(grammarAccess.getPointerAccess().getGroup_3(), "rule__Pointer__Group_3__0");
					put(grammarAccess.getParameter_type_listAccess().getGroup(), "rule__Parameter_type_list__Group__0");
					put(grammarAccess.getParameter_type_listAccess().getGroup_1(), "rule__Parameter_type_list__Group_1__0");
					put(grammarAccess.getParameter_listAccess().getGroup(), "rule__Parameter_list__Group__0");
					put(grammarAccess.getParameter_listAccess().getGroup_1(), "rule__Parameter_list__Group_1__0");
					put(grammarAccess.getParameter_declarationAccess().getGroup_0(), "rule__Parameter_declaration__Group_0__0");
					put(grammarAccess.getParameter_declarationAccess().getGroup_1(), "rule__Parameter_declaration__Group_1__0");
					put(grammarAccess.getIdentifier_listAccess().getGroup(), "rule__Identifier_list__Group__0");
					put(grammarAccess.getIdentifier_listAccess().getGroup_1(), "rule__Identifier_list__Group_1__0");
					put(grammarAccess.getType_nameAccess().getGroup(), "rule__Type_name__Group__0");
					put(grammarAccess.getAbstract_declaratorAccess().getGroup_1(), "rule__Abstract_declarator__Group_1__0");
					put(grammarAccess.getDirect_abstract_declaratorAccess().getGroup_0(), "rule__Direct_abstract_declarator__Group_0__0");
					put(grammarAccess.getDirect_abstract_declaratorAccess().getGroup_1(), "rule__Direct_abstract_declarator__Group_1__0");
					put(grammarAccess.getDirect_abstract_declaratorAccess().getGroup_2(), "rule__Direct_abstract_declarator__Group_2__0");
					put(grammarAccess.getDirect_abstract_declaratorAccess().getGroup_3(), "rule__Direct_abstract_declarator__Group_3__0");
					put(grammarAccess.getDirect_abstract_declaratorAccess().getGroup_4(), "rule__Direct_abstract_declarator__Group_4__0");
					put(grammarAccess.getDirect_abstract_declaratorIAccess().getGroup_0(), "rule__Direct_abstract_declaratorI__Group_0__0");
					put(grammarAccess.getDirect_abstract_declaratorIAccess().getGroup_1(), "rule__Direct_abstract_declaratorI__Group_1__0");
					put(grammarAccess.getDirect_abstract_declaratorIAccess().getGroup_2(), "rule__Direct_abstract_declaratorI__Group_2__0");
					put(grammarAccess.getDirect_abstract_declaratorIAccess().getGroup_3(), "rule__Direct_abstract_declaratorI__Group_3__0");
					put(grammarAccess.getInitializerAccess().getGroup_1(), "rule__Initializer__Group_1__0");
					put(grammarAccess.getInitializerAccess().getGroup_2(), "rule__Initializer__Group_2__0");
					put(grammarAccess.getInitializer_listAccess().getGroup(), "rule__Initializer_list__Group__0");
					put(grammarAccess.getInitializer_listAccess().getGroup_1(), "rule__Initializer_list__Group_1__0");
					put(grammarAccess.getLabeled_statementAccess().getGroup_0(), "rule__Labeled_statement__Group_0__0");
					put(grammarAccess.getLabeled_statementAccess().getGroup_1(), "rule__Labeled_statement__Group_1__0");
					put(grammarAccess.getLabeled_statementAccess().getGroup_2(), "rule__Labeled_statement__Group_2__0");
					put(grammarAccess.getCompound_statementAccess().getGroup_0(), "rule__Compound_statement__Group_0__0");
					put(grammarAccess.getCompound_statementAccess().getGroup_1(), "rule__Compound_statement__Group_1__0");
					put(grammarAccess.getCompound_statementAccess().getGroup_2(), "rule__Compound_statement__Group_2__0");
					put(grammarAccess.getCompound_statementAccess().getGroup_3(), "rule__Compound_statement__Group_3__0");
					put(grammarAccess.getExpression_statementAccess().getGroup_1(), "rule__Expression_statement__Group_1__0");
					put(grammarAccess.getSelection_statementAccess().getGroup_0(), "rule__Selection_statement__Group_0__0");
					put(grammarAccess.getSelection_statementAccess().getGroup_1(), "rule__Selection_statement__Group_1__0");
					put(grammarAccess.getSelection_statementAccess().getGroup_2(), "rule__Selection_statement__Group_2__0");
					put(grammarAccess.getIteration_statementAccess().getGroup_0(), "rule__Iteration_statement__Group_0__0");
					put(grammarAccess.getIteration_statementAccess().getGroup_1(), "rule__Iteration_statement__Group_1__0");
					put(grammarAccess.getIteration_statementAccess().getGroup_2(), "rule__Iteration_statement__Group_2__0");
					put(grammarAccess.getIteration_statementAccess().getGroup_3(), "rule__Iteration_statement__Group_3__0");
					put(grammarAccess.getJump_statementAccess().getGroup_0(), "rule__Jump_statement__Group_0__0");
					put(grammarAccess.getJump_statementAccess().getGroup_1(), "rule__Jump_statement__Group_1__0");
					put(grammarAccess.getJump_statementAccess().getGroup_2(), "rule__Jump_statement__Group_2__0");
					put(grammarAccess.getJump_statementAccess().getGroup_3(), "rule__Jump_statement__Group_3__0");
					put(grammarAccess.getJump_statementAccess().getGroup_4(), "rule__Jump_statement__Group_4__0");
					put(grammarAccess.getFunction_definitionAccess().getGroup_0(), "rule__Function_definition__Group_0__0");
					put(grammarAccess.getFunction_definitionAccess().getGroup_1(), "rule__Function_definition__Group_1__0");
					put(grammarAccess.getFunction_definitionAccess().getGroup_2(), "rule__Function_definition__Group_2__0");
					put(grammarAccess.getFunction_definitionAccess().getGroup_3(), "rule__Function_definition__Group_3__0");
					put(grammarAccess.getCONSTANTAccess().getGroup_0(), "rule__CONSTANT__Group_0__0");
					put(grammarAccess.getCONSTANTAccess().getGroup_1(), "rule__CONSTANT__Group_1__0");
					put(grammarAccess.getCONSTANTAccess().getGroup_2(), "rule__CONSTANT__Group_2__0");
					put(grammarAccess.getDomainModelAccess().getGeetingsAssignment(), "rule__DomainModel__GeetingsAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalAnsicParser typedParser = (InternalAnsicParser) parser;
			typedParser.entryRuleDomainModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AnsicGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AnsicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
