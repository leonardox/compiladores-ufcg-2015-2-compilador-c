/*
 * generated by Xtext 2.9.1
 */
grammar InternalAnsic;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.services.AnsicGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private AnsicGrammarAccess grammarAccess;

    public InternalAnsicParser(TokenStream input, AnsicGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";
   	}

   	@Override
   	protected AnsicGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	iv_ruleDomainModel=ruleDomainModel
	{ $current=$iv_ruleDomainModel.current; }
	EOF;

// Rule DomainModel
ruleDomainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainModelAccess().getGeetingsTranslation_unitParserRuleCall_0());
			}
			lv_geetings_0_0=ruletranslation_unit
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainModelRule());
				}
				add(
					$current,
					"geetings",
					lv_geetings_0_0,
					"org.xtext.example.Ansic.translation_unit");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprimary_expression
entryRuleprimary_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimary_expressionRule()); }
	iv_ruleprimary_expression=ruleprimary_expression
	{ $current=$iv_ruleprimary_expression.current.getText(); }
	EOF;

// Rule primary_expression
ruleprimary_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimary_expressionAccess().getIDENTIFIERParserRuleCall_0());
		}
		this_IDENTIFIER_0=ruleIDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimary_expressionAccess().getCONSTANTParserRuleCall_1());
		}
		this_CONSTANT_1=ruleCONSTANT
		{
			$current.merge(this_CONSTANT_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimary_expressionAccess().getSTRING_LITERALParserRuleCall_2());
		}
		this_STRING_LITERAL_2=ruleSTRING_LITERAL
		{
			$current.merge(this_STRING_LITERAL_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimary_expressionAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimary_expressionAccess().getExpressionParserRuleCall_3_1());
			}
			this_expression_4=ruleexpression
			{
				$current.merge(this_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimary_expressionAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRulepostfix_expressionL
entryRulepostfix_expressionL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPostfix_expressionLRule()); }
	iv_rulepostfix_expressionL=rulepostfix_expressionL
	{ $current=$iv_rulepostfix_expressionL.current.getText(); }
	EOF;

// Rule postfix_expressionL
rulepostfix_expressionL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPostfix_expressionLAccess().getLeftSquareBracketKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getExpressionParserRuleCall_0_1());
			}
			this_expression_1=ruleexpression
			{
				$current.merge(this_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPostfix_expressionLAccess().getRightSquareBracketKeyword_0_2());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getPostfix_expressionLParserRuleCall_0_3());
			}
			this_postfix_expressionL_3=rulepostfix_expressionL
			{
				$current.merge(this_postfix_expressionL_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPostfix_expressionLAccess().getLeftParenthesisKeyword_1_0());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPostfix_expressionLAccess().getRightParenthesisKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getPostfix_expressionLParserRuleCall_1_2());
			}
			this_postfix_expressionL_6=rulepostfix_expressionL
			{
				$current.merge(this_postfix_expressionL_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPostfix_expressionLAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getArgument_expression_listParserRuleCall_2_1());
			}
			this_argument_expression_list_8=ruleargument_expression_list
			{
				$current.merge(this_argument_expression_list_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPostfix_expressionLAccess().getRightParenthesisKeyword_2_2());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getPostfix_expressionLParserRuleCall_2_3());
			}
			this_postfix_expressionL_10=rulepostfix_expressionL
			{
				$current.merge(this_postfix_expressionL_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPostfix_expressionLAccess().getFullStopKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getIDENTIFIERParserRuleCall_3_1());
			}
			this_IDENTIFIER_12=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_12);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getPostfix_expressionLParserRuleCall_3_2());
			}
			this_postfix_expressionL_13=rulepostfix_expressionL
			{
				$current.merge(this_postfix_expressionL_13);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_PTR_OP_14=RULE_PTR_OP
			{
				$current.merge(this_PTR_OP_14);
			}
			{
				newLeafNode(this_PTR_OP_14, grammarAccess.getPostfix_expressionLAccess().getPTR_OPTerminalRuleCall_4_0());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getIDENTIFIERParserRuleCall_4_1());
			}
			this_IDENTIFIER_15=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_15);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getPostfix_expressionLParserRuleCall_4_2());
			}
			this_postfix_expressionL_16=rulepostfix_expressionL
			{
				$current.merge(this_postfix_expressionL_16);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_INC_OP_17=RULE_INC_OP
			{
				$current.merge(this_INC_OP_17);
			}
			{
				newLeafNode(this_INC_OP_17, grammarAccess.getPostfix_expressionLAccess().getINC_OPTerminalRuleCall_5_0());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getPostfix_expressionLParserRuleCall_5_1());
			}
			this_postfix_expressionL_18=rulepostfix_expressionL
			{
				$current.merge(this_postfix_expressionL_18);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_DEC_OP_19=RULE_DEC_OP
			{
				$current.merge(this_DEC_OP_19);
			}
			{
				newLeafNode(this_DEC_OP_19, grammarAccess.getPostfix_expressionLAccess().getDEC_OPTerminalRuleCall_6_0());
			}
			{
				newCompositeNode(grammarAccess.getPostfix_expressionLAccess().getPostfix_expressionLParserRuleCall_6_1());
			}
			this_postfix_expressionL_20=rulepostfix_expressionL
			{
				$current.merge(this_postfix_expressionL_20);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRulepostfix_expression
entryRulepostfix_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPostfix_expressionRule()); }
	iv_rulepostfix_expression=rulepostfix_expression
	{ $current=$iv_rulepostfix_expression.current.getText(); }
	EOF;

// Rule postfix_expression
rulepostfix_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostfix_expressionAccess().getPrimary_expressionParserRuleCall_0());
		}
		this_primary_expression_0=ruleprimary_expression
		{
			$current.merge(this_primary_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getPostfix_expressionAccess().getPostfix_expressionLParserRuleCall_1());
		}
		this_postfix_expressionL_1=rulepostfix_expressionL
		{
			$current.merge(this_postfix_expressionL_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleargument_expression_listI
entryRuleargument_expression_listI returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArgument_expression_listIRule()); }
	iv_ruleargument_expression_listI=ruleargument_expression_listI
	{ $current=$iv_ruleargument_expression_listI.current.getText(); }
	EOF;

// Rule argument_expression_listI
ruleargument_expression_listI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgument_expression_listIAccess().getCommaKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getArgument_expression_listIAccess().getAssignment_expressionParserRuleCall_1());
		}
		this_assignment_expression_1=ruleassignment_expression
		{
			$current.merge(this_assignment_expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getArgument_expression_listIAccess().getArgument_expression_listIParserRuleCall_2());
		}
		this_argument_expression_listI_2=ruleargument_expression_listI
		{
			$current.merge(this_argument_expression_listI_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleargument_expression_list
entryRuleargument_expression_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArgument_expression_listRule()); }
	iv_ruleargument_expression_list=ruleargument_expression_list
	{ $current=$iv_ruleargument_expression_list.current.getText(); }
	EOF;

// Rule argument_expression_list
ruleargument_expression_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArgument_expression_listAccess().getAssignment_expressionParserRuleCall_0());
		}
		this_assignment_expression_0=ruleassignment_expression
		{
			$current.merge(this_assignment_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getArgument_expression_listAccess().getArgument_expression_listIParserRuleCall_1());
		}
		this_argument_expression_listI_1=ruleargument_expression_listI
		{
			$current.merge(this_argument_expression_listI_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleunary_expression
entryRuleunary_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnary_expressionRule()); }
	iv_ruleunary_expression=ruleunary_expression
	{ $current=$iv_ruleunary_expression.current.getText(); }
	EOF;

// Rule unary_expression
ruleunary_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnary_expressionAccess().getPostfix_expressionParserRuleCall_0());
		}
		this_postfix_expression_0=rulepostfix_expression
		{
			$current.merge(this_postfix_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			this_INC_OP_1=RULE_INC_OP
			{
				$current.merge(this_INC_OP_1);
			}
			{
				newLeafNode(this_INC_OP_1, grammarAccess.getUnary_expressionAccess().getINC_OPTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_expressionParserRuleCall_1_1());
			}
			this_unary_expression_2=ruleunary_expression
			{
				$current.merge(this_unary_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_DEC_OP_3=RULE_DEC_OP
			{
				$current.merge(this_DEC_OP_3);
			}
			{
				newLeafNode(this_DEC_OP_3, grammarAccess.getUnary_expressionAccess().getDEC_OPTerminalRuleCall_2_0());
			}
			{
				newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_expressionParserRuleCall_2_1());
			}
			this_unary_expression_4=ruleunary_expression
			{
				$current.merge(this_unary_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_operatorParserRuleCall_3_0());
			}
			this_unary_operator_5=ruleunary_operator
			{
				$current.merge(this_unary_operator_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getUnary_expressionAccess().getCast_expressionParserRuleCall_3_1());
			}
			this_cast_expression_6=rulecast_expression
			{
				$current.merge(this_cast_expression_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_SIZEOF_7=RULE_SIZEOF
			{
				$current.merge(this_SIZEOF_7);
			}
			{
				newLeafNode(this_SIZEOF_7, grammarAccess.getUnary_expressionAccess().getSIZEOFTerminalRuleCall_4_0());
			}
			{
				newCompositeNode(grammarAccess.getUnary_expressionAccess().getUnary_expressionParserRuleCall_4_1());
			}
			this_unary_expression_8=ruleunary_expression
			{
				$current.merge(this_unary_expression_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_SIZEOF_9=RULE_SIZEOF
			{
				$current.merge(this_SIZEOF_9);
			}
			{
				newLeafNode(this_SIZEOF_9, grammarAccess.getUnary_expressionAccess().getSIZEOFTerminalRuleCall_5_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getUnary_expressionAccess().getLeftParenthesisKeyword_5_1());
			}
			{
				newCompositeNode(grammarAccess.getUnary_expressionAccess().getType_nameParserRuleCall_5_2());
			}
			this_type_name_11=ruletype_name
			{
				$current.merge(this_type_name_11);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getUnary_expressionAccess().getRightParenthesisKeyword_5_3());
			}
		)
	)
;

// Entry rule entryRuleunary_operator
entryRuleunary_operator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnary_operatorRule()); }
	iv_ruleunary_operator=ruleunary_operator
	{ $current=$iv_ruleunary_operator.current.getText(); }
	EOF;

// Rule unary_operator
ruleunary_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getAmpersandKeyword_0());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getAsteriskKeyword_1());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getPlusSignKeyword_2());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getHyphenMinusKeyword_3());
		}
		    |
		kw='~'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getTildeKeyword_4());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnary_operatorAccess().getExclamationMarkKeyword_5());
		}
	)
;

// Entry rule entryRulecast_expression
entryRulecast_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCast_expressionRule()); }
	iv_rulecast_expression=rulecast_expression
	{ $current=$iv_rulecast_expression.current.getText(); }
	EOF;

// Rule cast_expression
rulecast_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCast_expressionAccess().getUnary_expressionParserRuleCall_0());
		}
		this_unary_expression_0=ruleunary_expression
		{
			$current.merge(this_unary_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCast_expressionAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getCast_expressionAccess().getType_nameParserRuleCall_1_1());
			}
			this_type_name_2=ruletype_name
			{
				$current.merge(this_type_name_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCast_expressionAccess().getRightParenthesisKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getCast_expressionAccess().getCast_expressionParserRuleCall_1_3());
			}
			this_cast_expression_4=rulecast_expression
			{
				$current.merge(this_cast_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulemultiplicative_expressionI
entryRulemultiplicative_expressionI returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicative_expressionIRule()); }
	iv_rulemultiplicative_expressionI=rulemultiplicative_expressionI
	{ $current=$iv_rulemultiplicative_expressionI.current.getText(); }
	EOF;

// Rule multiplicative_expressionI
rulemultiplicative_expressionI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMultiplicative_expressionIAccess().getAsteriskKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getMultiplicative_expressionIAccess().getCast_expressionParserRuleCall_0_1());
			}
			this_cast_expression_1=rulecast_expression
			{
				$current.merge(this_cast_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getMultiplicative_expressionIAccess().getMultiplicative_expressionIParserRuleCall_0_2());
			}
			this_multiplicative_expressionI_2=rulemultiplicative_expressionI
			{
				$current.merge(this_multiplicative_expressionI_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMultiplicative_expressionIAccess().getSolidusKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getMultiplicative_expressionIAccess().getCast_expressionParserRuleCall_1_1());
			}
			this_cast_expression_4=rulecast_expression
			{
				$current.merge(this_cast_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getMultiplicative_expressionIAccess().getMultiplicative_expressionIParserRuleCall_1_2());
			}
			this_multiplicative_expressionI_5=rulemultiplicative_expressionI
			{
				$current.merge(this_multiplicative_expressionI_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='%'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMultiplicative_expressionIAccess().getPercentSignKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getMultiplicative_expressionIAccess().getCast_expressionParserRuleCall_2_1());
			}
			this_cast_expression_7=rulecast_expression
			{
				$current.merge(this_cast_expression_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getMultiplicative_expressionIAccess().getMultiplicative_expressionIParserRuleCall_2_2());
			}
			this_multiplicative_expressionI_8=rulemultiplicative_expressionI
			{
				$current.merge(this_multiplicative_expressionI_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRulemultiplicative_expression
entryRulemultiplicative_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicative_expressionRule()); }
	iv_rulemultiplicative_expression=rulemultiplicative_expression
	{ $current=$iv_rulemultiplicative_expression.current.getText(); }
	EOF;

// Rule multiplicative_expression
rulemultiplicative_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicative_expressionAccess().getCast_expressionParserRuleCall_0());
		}
		this_cast_expression_0=rulecast_expression
		{
			$current.merge(this_cast_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getMultiplicative_expressionAccess().getMultiplicative_expressionIParserRuleCall_1());
		}
		this_multiplicative_expressionI_1=rulemultiplicative_expressionI
		{
			$current.merge(this_multiplicative_expressionI_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleadditive_expression
entryRuleadditive_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdditive_expressionRule()); }
	iv_ruleadditive_expression=ruleadditive_expression
	{ $current=$iv_ruleadditive_expression.current.getText(); }
	EOF;

// Rule additive_expression
ruleadditive_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditive_expressionAccess().getMultiplicative_expressionParserRuleCall_0());
		}
		this_multiplicative_expression_0=rulemultiplicative_expression
		{
			$current.merge(this_multiplicative_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				kw='+'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getAdditive_expressionAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getAdditive_expressionAccess().getHyphenMinusKeyword_1_0_1());
				}
			)
			{
				newCompositeNode(grammarAccess.getAdditive_expressionAccess().getMultiplicative_expressionParserRuleCall_1_1());
			}
			this_multiplicative_expression_3=rulemultiplicative_expression
			{
				$current.merge(this_multiplicative_expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleshift_expression
entryRuleshift_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getShift_expressionRule()); }
	iv_ruleshift_expression=ruleshift_expression
	{ $current=$iv_ruleshift_expression.current.getText(); }
	EOF;

// Rule shift_expression
ruleshift_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShift_expressionAccess().getAdditive_expressionParserRuleCall_0());
		}
		this_additive_expression_0=ruleadditive_expression
		{
			$current.merge(this_additive_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				this_LEFT_OP_1=RULE_LEFT_OP
				{
					$current.merge(this_LEFT_OP_1);
				}
				{
					newLeafNode(this_LEFT_OP_1, grammarAccess.getShift_expressionAccess().getLEFT_OPTerminalRuleCall_1_0_0());
				}
				    |
				this_RIGHT_OP_2=RULE_RIGHT_OP
				{
					$current.merge(this_RIGHT_OP_2);
				}
				{
					newLeafNode(this_RIGHT_OP_2, grammarAccess.getShift_expressionAccess().getRIGHT_OPTerminalRuleCall_1_0_1());
				}
			)
			{
				newCompositeNode(grammarAccess.getShift_expressionAccess().getAdditive_expressionParserRuleCall_1_1());
			}
			this_additive_expression_3=ruleadditive_expression
			{
				$current.merge(this_additive_expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulerelational_expression
entryRulerelational_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelational_expressionRule()); }
	iv_rulerelational_expression=rulerelational_expression
	{ $current=$iv_rulerelational_expression.current.getText(); }
	EOF;

// Rule relational_expression
rulerelational_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelational_expressionAccess().getShift_expressionParserRuleCall_0());
		}
		this_shift_expression_0=ruleshift_expression
		{
			$current.merge(this_shift_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				kw='<'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRelational_expressionAccess().getLessThanSignKeyword_1_0_0());
				}
				    |
				kw='>'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRelational_expressionAccess().getGreaterThanSignKeyword_1_0_1());
				}
				    |
				this_LE_OP_3=RULE_LE_OP
				{
					$current.merge(this_LE_OP_3);
				}
				{
					newLeafNode(this_LE_OP_3, grammarAccess.getRelational_expressionAccess().getLE_OPTerminalRuleCall_1_0_2());
				}
				    |
				this_GE_OP_4=RULE_GE_OP
				{
					$current.merge(this_GE_OP_4);
				}
				{
					newLeafNode(this_GE_OP_4, grammarAccess.getRelational_expressionAccess().getGE_OPTerminalRuleCall_1_0_3());
				}
			)
			{
				newCompositeNode(grammarAccess.getRelational_expressionAccess().getShift_expressionParserRuleCall_1_1());
			}
			this_shift_expression_5=ruleshift_expression
			{
				$current.merge(this_shift_expression_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleequality_expression
entryRuleequality_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEquality_expressionRule()); }
	iv_ruleequality_expression=ruleequality_expression
	{ $current=$iv_ruleequality_expression.current.getText(); }
	EOF;

// Rule equality_expression
ruleequality_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEquality_expressionAccess().getRelational_expressionParserRuleCall_0());
		}
		this_relational_expression_0=rulerelational_expression
		{
			$current.merge(this_relational_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				this_EQ_OP_1=RULE_EQ_OP
				{
					$current.merge(this_EQ_OP_1);
				}
				{
					newLeafNode(this_EQ_OP_1, grammarAccess.getEquality_expressionAccess().getEQ_OPTerminalRuleCall_1_0_0());
				}
				    |
				this_NE_OP_2=RULE_NE_OP
				{
					$current.merge(this_NE_OP_2);
				}
				{
					newLeafNode(this_NE_OP_2, grammarAccess.getEquality_expressionAccess().getNE_OPTerminalRuleCall_1_0_1());
				}
			)
			{
				newCompositeNode(grammarAccess.getEquality_expressionAccess().getRelational_expressionParserRuleCall_1_1());
			}
			this_relational_expression_3=rulerelational_expression
			{
				$current.merge(this_relational_expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleand_expression
entryRuleand_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnd_expressionRule()); }
	iv_ruleand_expression=ruleand_expression
	{ $current=$iv_ruleand_expression.current.getText(); }
	EOF;

// Rule and_expression
ruleand_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAnd_expressionAccess().getEquality_expressionParserRuleCall_0());
		}
		this_equality_expression_0=ruleequality_expression
		{
			$current.merge(this_equality_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='&'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAnd_expressionAccess().getAmpersandKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getAnd_expressionAccess().getEquality_expressionParserRuleCall_1_1());
			}
			this_equality_expression_2=ruleequality_expression
			{
				$current.merge(this_equality_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleexclusive_or_expression
entryRuleexclusive_or_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExclusive_or_expressionRule()); }
	iv_ruleexclusive_or_expression=ruleexclusive_or_expression
	{ $current=$iv_ruleexclusive_or_expression.current.getText(); }
	EOF;

// Rule exclusive_or_expression
ruleexclusive_or_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExclusive_or_expressionAccess().getAnd_expressionParserRuleCall_0());
		}
		this_and_expression_0=ruleand_expression
		{
			$current.merge(this_and_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='^'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExclusive_or_expressionAccess().getCircumflexAccentKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExclusive_or_expressionAccess().getAnd_expressionParserRuleCall_1_1());
			}
			this_and_expression_2=ruleand_expression
			{
				$current.merge(this_and_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleinclusive_or_expression
entryRuleinclusive_or_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInclusive_or_expressionRule()); }
	iv_ruleinclusive_or_expression=ruleinclusive_or_expression
	{ $current=$iv_ruleinclusive_or_expression.current.getText(); }
	EOF;

// Rule inclusive_or_expression
ruleinclusive_or_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInclusive_or_expressionAccess().getExclusive_or_expressionParserRuleCall_0());
		}
		this_exclusive_or_expression_0=ruleexclusive_or_expression
		{
			$current.merge(this_exclusive_or_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='|'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInclusive_or_expressionAccess().getVerticalLineKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getInclusive_or_expressionAccess().getExclusive_or_expressionParserRuleCall_1_1());
			}
			this_exclusive_or_expression_2=ruleexclusive_or_expression
			{
				$current.merge(this_exclusive_or_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulelogical_and_expression
entryRulelogical_and_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogical_and_expressionRule()); }
	iv_rulelogical_and_expression=rulelogical_and_expression
	{ $current=$iv_rulelogical_and_expression.current.getText(); }
	EOF;

// Rule logical_and_expression
rulelogical_and_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogical_and_expressionAccess().getInclusive_or_expressionParserRuleCall_0());
		}
		this_inclusive_or_expression_0=ruleinclusive_or_expression
		{
			$current.merge(this_inclusive_or_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			this_AND_OP_1=RULE_AND_OP
			{
				$current.merge(this_AND_OP_1);
			}
			{
				newLeafNode(this_AND_OP_1, grammarAccess.getLogical_and_expressionAccess().getAND_OPTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getLogical_and_expressionAccess().getInclusive_or_expressionParserRuleCall_1_1());
			}
			this_inclusive_or_expression_2=ruleinclusive_or_expression
			{
				$current.merge(this_inclusive_or_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulelogical_or_expression
entryRulelogical_or_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogical_or_expressionRule()); }
	iv_rulelogical_or_expression=rulelogical_or_expression
	{ $current=$iv_rulelogical_or_expression.current.getText(); }
	EOF;

// Rule logical_or_expression
rulelogical_or_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogical_or_expressionAccess().getLogical_and_expressionParserRuleCall_0());
		}
		this_logical_and_expression_0=rulelogical_and_expression
		{
			$current.merge(this_logical_and_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			this_OR_OP_1=RULE_OR_OP
			{
				$current.merge(this_OR_OP_1);
			}
			{
				newLeafNode(this_OR_OP_1, grammarAccess.getLogical_or_expressionAccess().getOR_OPTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getLogical_or_expressionAccess().getLogical_and_expressionParserRuleCall_1_1());
			}
			this_logical_and_expression_2=rulelogical_and_expression
			{
				$current.merge(this_logical_and_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleconditional_expression
entryRuleconditional_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditional_expressionRule()); }
	iv_ruleconditional_expression=ruleconditional_expression
	{ $current=$iv_ruleconditional_expression.current.getText(); }
	EOF;

// Rule conditional_expression
ruleconditional_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditional_expressionAccess().getLogical_or_expressionParserRuleCall_0());
		}
		this_logical_or_expression_0=rulelogical_or_expression
		{
			$current.merge(this_logical_or_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='?'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditional_expressionAccess().getQuestionMarkKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getConditional_expressionAccess().getExpressionParserRuleCall_1_1());
			}
			this_expression_2=ruleexpression
			{
				$current.merge(this_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditional_expressionAccess().getColonKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getConditional_expressionAccess().getConditional_expressionParserRuleCall_1_3());
			}
			this_conditional_expression_4=ruleconditional_expression
			{
				$current.merge(this_conditional_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleassignment_expression
entryRuleassignment_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssignment_expressionRule()); }
	iv_ruleassignment_expression=ruleassignment_expression
	{ $current=$iv_ruleassignment_expression.current.getText(); }
	EOF;

// Rule assignment_expression
ruleassignment_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignment_expressionAccess().getConditional_expressionParserRuleCall_0());
		}
		this_conditional_expression_0=ruleconditional_expression
		{
			$current.merge(this_conditional_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getAssignment_expressionAccess().getUnary_expressionParserRuleCall_1_0());
			}
			this_unary_expression_1=ruleunary_expression
			{
				$current.merge(this_unary_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAssignment_expressionAccess().getAssignment_operatorParserRuleCall_1_1());
			}
			this_assignment_operator_2=ruleassignment_operator
			{
				$current.merge(this_assignment_operator_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAssignment_expressionAccess().getAssignment_expressionParserRuleCall_1_2());
			}
			this_assignment_expression_3=ruleassignment_expression
			{
				$current.merge(this_assignment_expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current.getText(); }
	EOF;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAssignment_expressionParserRuleCall_0());
		}
		this_assignment_expression_0=ruleassignment_expression
		{
			$current.merge(this_assignment_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getAssignment_expressionParserRuleCall_1_1());
			}
			this_assignment_expression_2=ruleassignment_expression
			{
				$current.merge(this_assignment_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleassignment_operator
entryRuleassignment_operator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssignment_operatorRule()); }
	iv_ruleassignment_operator=ruleassignment_operator
	{ $current=$iv_ruleassignment_operator.current.getText(); }
	EOF;

// Rule assignment_operator
ruleassignment_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAssignment_operatorAccess().getEqualsSignKeyword_0());
		}
		    |
		this_MUL_ASSIGN_1=RULE_MUL_ASSIGN
		{
			$current.merge(this_MUL_ASSIGN_1);
		}
		{
			newLeafNode(this_MUL_ASSIGN_1, grammarAccess.getAssignment_operatorAccess().getMUL_ASSIGNTerminalRuleCall_1());
		}
		    |
		this_DIV_ASSIGN_2=RULE_DIV_ASSIGN
		{
			$current.merge(this_DIV_ASSIGN_2);
		}
		{
			newLeafNode(this_DIV_ASSIGN_2, grammarAccess.getAssignment_operatorAccess().getDIV_ASSIGNTerminalRuleCall_2());
		}
		    |
		this_MOD_ASSIGN_3=RULE_MOD_ASSIGN
		{
			$current.merge(this_MOD_ASSIGN_3);
		}
		{
			newLeafNode(this_MOD_ASSIGN_3, grammarAccess.getAssignment_operatorAccess().getMOD_ASSIGNTerminalRuleCall_3());
		}
		    |
		this_ADD_ASSIGN_4=RULE_ADD_ASSIGN
		{
			$current.merge(this_ADD_ASSIGN_4);
		}
		{
			newLeafNode(this_ADD_ASSIGN_4, grammarAccess.getAssignment_operatorAccess().getADD_ASSIGNTerminalRuleCall_4());
		}
		    |
		this_SUB_ASSIGN_5=RULE_SUB_ASSIGN
		{
			$current.merge(this_SUB_ASSIGN_5);
		}
		{
			newLeafNode(this_SUB_ASSIGN_5, grammarAccess.getAssignment_operatorAccess().getSUB_ASSIGNTerminalRuleCall_5());
		}
		    |
		this_LEFT_ASSIGN_6=RULE_LEFT_ASSIGN
		{
			$current.merge(this_LEFT_ASSIGN_6);
		}
		{
			newLeafNode(this_LEFT_ASSIGN_6, grammarAccess.getAssignment_operatorAccess().getLEFT_ASSIGNTerminalRuleCall_6());
		}
		    |
		this_RIGHT_ASSIGN_7=RULE_RIGHT_ASSIGN
		{
			$current.merge(this_RIGHT_ASSIGN_7);
		}
		{
			newLeafNode(this_RIGHT_ASSIGN_7, grammarAccess.getAssignment_operatorAccess().getRIGHT_ASSIGNTerminalRuleCall_7());
		}
		    |
		this_AND_ASSIGN_8=RULE_AND_ASSIGN
		{
			$current.merge(this_AND_ASSIGN_8);
		}
		{
			newLeafNode(this_AND_ASSIGN_8, grammarAccess.getAssignment_operatorAccess().getAND_ASSIGNTerminalRuleCall_8());
		}
		    |
		this_XOR_ASSIGN_9=RULE_XOR_ASSIGN
		{
			$current.merge(this_XOR_ASSIGN_9);
		}
		{
			newLeafNode(this_XOR_ASSIGN_9, grammarAccess.getAssignment_operatorAccess().getXOR_ASSIGNTerminalRuleCall_9());
		}
		    |
		this_OR_ASSIGN_10=RULE_OR_ASSIGN
		{
			$current.merge(this_OR_ASSIGN_10);
		}
		{
			newLeafNode(this_OR_ASSIGN_10, grammarAccess.getAssignment_operatorAccess().getOR_ASSIGNTerminalRuleCall_10());
		}
	)
;

// Entry rule entryRuleconstant_expression
entryRuleconstant_expression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstant_expressionRule()); }
	iv_ruleconstant_expression=ruleconstant_expression
	{ $current=$iv_ruleconstant_expression.current.getText(); }
	EOF;

// Rule constant_expression
ruleconstant_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstant_expressionAccess().getConditional_expressionParserRuleCall());
	}
	this_conditional_expression_0=ruleconditional_expression
	{
		$current.merge(this_conditional_expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuledeclaration
entryRuledeclaration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruledeclaration=ruledeclaration
	{ $current=$iv_ruledeclaration.current.getText(); }
	EOF;

// Rule declaration
ruledeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getDeclaration_specifiersParserRuleCall_0());
		}
		this_declaration_specifiers_0=ruledeclaration_specifiers
		{
			$current.merge(this_declaration_specifiers_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getDeclarationAccess().getInit_declarator_listParserRuleCall_1());
			}
			this_init_declarator_list_1=ruleinit_declarator_list
			{
				$current.merge(this_init_declarator_list_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDeclarationAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuledeclaration_specifiers
entryRuledeclaration_specifiers returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeclaration_specifiersRule()); }
	iv_ruledeclaration_specifiers=ruledeclaration_specifiers
	{ $current=$iv_ruledeclaration_specifiers.current.getText(); }
	EOF;

// Rule declaration_specifiers
ruledeclaration_specifiers returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDeclaration_specifiersAccess().getStorage_class_specifierParserRuleCall_0_0());
			}
			this_storage_class_specifier_0=rulestorage_class_specifier
			{
				$current.merge(this_storage_class_specifier_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getDeclaration_specifiersAccess().getDeclaration_specifiersParserRuleCall_0_1());
				}
				this_declaration_specifiers_1=ruledeclaration_specifiers
				{
					$current.merge(this_declaration_specifiers_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getDeclaration_specifiersAccess().getType_specifierParserRuleCall_1_0());
			}
			this_type_specifier_2=ruletype_specifier
			{
				$current.merge(this_type_specifier_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getDeclaration_specifiersAccess().getDeclaration_specifiersParserRuleCall_1_1());
				}
				this_declaration_specifiers_3=ruledeclaration_specifiers
				{
					$current.merge(this_declaration_specifiers_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getDeclaration_specifiersAccess().getType_qualifierParserRuleCall_2_0());
			}
			this_type_qualifier_4=ruletype_qualifier
			{
				$current.merge(this_type_qualifier_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getDeclaration_specifiersAccess().getDeclaration_specifiersParserRuleCall_2_1());
				}
				this_declaration_specifiers_5=ruledeclaration_specifiers
				{
					$current.merge(this_declaration_specifiers_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuleinit_declarator_list
entryRuleinit_declarator_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInit_declarator_listRule()); }
	iv_ruleinit_declarator_list=ruleinit_declarator_list
	{ $current=$iv_ruleinit_declarator_list.current.getText(); }
	EOF;

// Rule init_declarator_list
ruleinit_declarator_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInit_declarator_listAccess().getInit_declaratorParserRuleCall_0());
		}
		this_init_declarator_0=ruleinit_declarator
		{
			$current.merge(this_init_declarator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInit_declarator_listAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getInit_declarator_listAccess().getInit_declaratorParserRuleCall_1_1());
			}
			this_init_declarator_2=ruleinit_declarator
			{
				$current.merge(this_init_declarator_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleinit_declarator
entryRuleinit_declarator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInit_declaratorRule()); }
	iv_ruleinit_declarator=ruleinit_declarator
	{ $current=$iv_ruleinit_declarator.current.getText(); }
	EOF;

// Rule init_declarator
ruleinit_declarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInit_declaratorAccess().getDeclaratorParserRuleCall_0());
		}
		this_declarator_0=ruledeclarator
		{
			$current.merge(this_declarator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInit_declaratorAccess().getEqualsSignKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getInit_declaratorAccess().getInitializerParserRuleCall_1_1());
			}
			this_initializer_2=ruleinitializer
			{
				$current.merge(this_initializer_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulestorage_class_specifier
entryRulestorage_class_specifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStorage_class_specifierRule()); }
	iv_rulestorage_class_specifier=rulestorage_class_specifier
	{ $current=$iv_rulestorage_class_specifier.current.getText(); }
	EOF;

// Rule storage_class_specifier
rulestorage_class_specifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TYPEDEF_0=RULE_TYPEDEF
		{
			$current.merge(this_TYPEDEF_0);
		}
		{
			newLeafNode(this_TYPEDEF_0, grammarAccess.getStorage_class_specifierAccess().getTYPEDEFTerminalRuleCall_0());
		}
		    |
		this_EXTERN_1=RULE_EXTERN
		{
			$current.merge(this_EXTERN_1);
		}
		{
			newLeafNode(this_EXTERN_1, grammarAccess.getStorage_class_specifierAccess().getEXTERNTerminalRuleCall_1());
		}
		    |
		this_STATIC_2=RULE_STATIC
		{
			$current.merge(this_STATIC_2);
		}
		{
			newLeafNode(this_STATIC_2, grammarAccess.getStorage_class_specifierAccess().getSTATICTerminalRuleCall_2());
		}
		    |
		this_AUTO_3=RULE_AUTO
		{
			$current.merge(this_AUTO_3);
		}
		{
			newLeafNode(this_AUTO_3, grammarAccess.getStorage_class_specifierAccess().getAUTOTerminalRuleCall_3());
		}
		    |
		this_REGISTER_4=RULE_REGISTER
		{
			$current.merge(this_REGISTER_4);
		}
		{
			newLeafNode(this_REGISTER_4, grammarAccess.getStorage_class_specifierAccess().getREGISTERTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuletype_specifier
entryRuletype_specifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_specifierRule()); }
	iv_ruletype_specifier=ruletype_specifier
	{ $current=$iv_ruletype_specifier.current.getText(); }
	EOF;

// Rule type_specifier
ruletype_specifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VOID_0=RULE_VOID
		{
			$current.merge(this_VOID_0);
		}
		{
			newLeafNode(this_VOID_0, grammarAccess.getType_specifierAccess().getVOIDTerminalRuleCall_0());
		}
		    |
		kw='charz'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_specifierAccess().getCharzKeyword_1());
		}
		    |
		this_SHORT_2=RULE_SHORT
		{
			$current.merge(this_SHORT_2);
		}
		{
			newLeafNode(this_SHORT_2, grammarAccess.getType_specifierAccess().getSHORTTerminalRuleCall_2());
		}
		    |
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getType_specifierAccess().getINTTerminalRuleCall_3());
		}
		    |
		this_LONG_4=RULE_LONG
		{
			$current.merge(this_LONG_4);
		}
		{
			newLeafNode(this_LONG_4, grammarAccess.getType_specifierAccess().getLONGTerminalRuleCall_4());
		}
		    |
		this_FLOAT_5=RULE_FLOAT
		{
			$current.merge(this_FLOAT_5);
		}
		{
			newLeafNode(this_FLOAT_5, grammarAccess.getType_specifierAccess().getFLOATTerminalRuleCall_5());
		}
		    |
		this_DOUBLE_6=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_6);
		}
		{
			newLeafNode(this_DOUBLE_6, grammarAccess.getType_specifierAccess().getDOUBLETerminalRuleCall_6());
		}
		    |
		this_SIGNED_7=RULE_SIGNED
		{
			$current.merge(this_SIGNED_7);
		}
		{
			newLeafNode(this_SIGNED_7, grammarAccess.getType_specifierAccess().getSIGNEDTerminalRuleCall_7());
		}
		    |
		this_UNSIGNED_8=RULE_UNSIGNED
		{
			$current.merge(this_UNSIGNED_8);
		}
		{
			newLeafNode(this_UNSIGNED_8, grammarAccess.getType_specifierAccess().getUNSIGNEDTerminalRuleCall_8());
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_specifierAccess().getStruct_or_union_specifierParserRuleCall_9());
		}
		this_struct_or_union_specifier_9=rulestruct_or_union_specifier
		{
			$current.merge(this_struct_or_union_specifier_9);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_specifierAccess().getEnum_specifierParserRuleCall_10());
		}
		this_enum_specifier_10=ruleenum_specifier
		{
			$current.merge(this_enum_specifier_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_specifierAccess().getTYPE_NAMEEParserRuleCall_11());
		}
		this_TYPE_NAMEE_11=ruleTYPE_NAMEE
		{
			$current.merge(this_TYPE_NAMEE_11);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulestruct_or_union_specifier
entryRulestruct_or_union_specifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStruct_or_union_specifierRule()); }
	iv_rulestruct_or_union_specifier=rulestruct_or_union_specifier
	{ $current=$iv_rulestruct_or_union_specifier.current.getText(); }
	EOF;

// Rule struct_or_union_specifier
rulestruct_or_union_specifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStruct_or_union_specifierAccess().getStruct_or_unionParserRuleCall_0_0());
			}
			this_struct_or_union_0=rulestruct_or_union
			{
				$current.merge(this_struct_or_union_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getStruct_or_union_specifierAccess().getIDENTIFIERParserRuleCall_0_1());
			}
			this_IDENTIFIER_1=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStruct_or_union_specifierAccess().getLeftCurlyBracketKeyword_0_2());
			}
			{
				newCompositeNode(grammarAccess.getStruct_or_union_specifierAccess().getStruct_declaration_listParserRuleCall_0_3());
			}
			this_struct_declaration_list_3=rulestruct_declaration_list
			{
				$current.merge(this_struct_declaration_list_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStruct_or_union_specifierAccess().getRightCurlyBracketKeyword_0_4());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStruct_or_union_specifierAccess().getStruct_or_unionParserRuleCall_1_0());
			}
			this_struct_or_union_5=rulestruct_or_union
			{
				$current.merge(this_struct_or_union_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStruct_or_union_specifierAccess().getLeftCurlyBracketKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getStruct_or_union_specifierAccess().getStruct_declaration_listParserRuleCall_1_2());
			}
			this_struct_declaration_list_7=rulestruct_declaration_list
			{
				$current.merge(this_struct_declaration_list_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStruct_or_union_specifierAccess().getRightCurlyBracketKeyword_1_3());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStruct_or_union_specifierAccess().getStruct_or_unionParserRuleCall_2_0());
			}
			this_struct_or_union_9=rulestruct_or_union
			{
				$current.merge(this_struct_or_union_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getStruct_or_union_specifierAccess().getIDENTIFIERParserRuleCall_2_1());
			}
			this_IDENTIFIER_10=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulestruct_or_union
entryRulestruct_or_union returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStruct_or_unionRule()); }
	iv_rulestruct_or_union=rulestruct_or_union
	{ $current=$iv_rulestruct_or_union.current.getText(); }
	EOF;

// Rule struct_or_union
rulestruct_or_union returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRUCT_0=RULE_STRUCT
		{
			$current.merge(this_STRUCT_0);
		}
		{
			newLeafNode(this_STRUCT_0, grammarAccess.getStruct_or_unionAccess().getSTRUCTTerminalRuleCall_0());
		}
		    |
		this_UNION_1=RULE_UNION
		{
			$current.merge(this_UNION_1);
		}
		{
			newLeafNode(this_UNION_1, grammarAccess.getStruct_or_unionAccess().getUNIONTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulestruct_declaration_list
entryRulestruct_declaration_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStruct_declaration_listRule()); }
	iv_rulestruct_declaration_list=rulestruct_declaration_list
	{ $current=$iv_rulestruct_declaration_list.current.getText(); }
	EOF;

// Rule struct_declaration_list
rulestruct_declaration_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStruct_declaration_listAccess().getStruct_declarationParserRuleCall());
		}
		this_struct_declaration_0=rulestruct_declaration
		{
			$current.merge(this_struct_declaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRulestruct_declaration
entryRulestruct_declaration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStruct_declarationRule()); }
	iv_rulestruct_declaration=rulestruct_declaration
	{ $current=$iv_rulestruct_declaration.current.getText(); }
	EOF;

// Rule struct_declaration
rulestruct_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStruct_declarationAccess().getSpecifier_qualifier_listParserRuleCall_0());
		}
		this_specifier_qualifier_list_0=rulespecifier_qualifier_list
		{
			$current.merge(this_specifier_qualifier_list_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getStruct_declarationAccess().getStruct_declarator_listParserRuleCall_1());
		}
		this_struct_declarator_list_1=rulestruct_declarator_list
		{
			$current.merge(this_struct_declarator_list_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStruct_declarationAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRulespecifier_qualifier_list
entryRulespecifier_qualifier_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSpecifier_qualifier_listRule()); }
	iv_rulespecifier_qualifier_list=rulespecifier_qualifier_list
	{ $current=$iv_rulespecifier_qualifier_list.current.getText(); }
	EOF;

// Rule specifier_qualifier_list
rulespecifier_qualifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSpecifier_qualifier_listAccess().getType_specifierParserRuleCall_0_0());
			}
			this_type_specifier_0=ruletype_specifier
			{
				$current.merge(this_type_specifier_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getSpecifier_qualifier_listAccess().getSpecifier_qualifier_listParserRuleCall_0_1());
			}
			this_specifier_qualifier_list_1=rulespecifier_qualifier_list
			{
				$current.merge(this_specifier_qualifier_list_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getSpecifier_qualifier_listAccess().getType_specifierParserRuleCall_1());
		}
		this_type_specifier_2=ruletype_specifier
		{
			$current.merge(this_type_specifier_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getSpecifier_qualifier_listAccess().getType_qualifierParserRuleCall_2_0());
			}
			this_type_qualifier_3=ruletype_qualifier
			{
				$current.merge(this_type_qualifier_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getSpecifier_qualifier_listAccess().getSpecifier_qualifier_listParserRuleCall_2_1());
			}
			this_specifier_qualifier_list_4=rulespecifier_qualifier_list
			{
				$current.merge(this_specifier_qualifier_list_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getSpecifier_qualifier_listAccess().getType_qualifierParserRuleCall_3());
		}
		this_type_qualifier_5=ruletype_qualifier
		{
			$current.merge(this_type_qualifier_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulestruct_declarator_list
entryRulestruct_declarator_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStruct_declarator_listRule()); }
	iv_rulestruct_declarator_list=rulestruct_declarator_list
	{ $current=$iv_rulestruct_declarator_list.current.getText(); }
	EOF;

// Rule struct_declarator_list
rulestruct_declarator_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStruct_declarator_listAccess().getStruct_declaratorParserRuleCall_0());
		}
		this_struct_declarator_0=rulestruct_declarator
		{
			$current.merge(this_struct_declarator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStruct_declarator_listAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getStruct_declarator_listAccess().getStruct_declaratorParserRuleCall_1_1());
			}
			this_struct_declarator_2=rulestruct_declarator
			{
				$current.merge(this_struct_declarator_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulestruct_declarator
entryRulestruct_declarator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStruct_declaratorRule()); }
	iv_rulestruct_declarator=rulestruct_declarator
	{ $current=$iv_rulestruct_declarator.current.getText(); }
	EOF;

// Rule struct_declarator
rulestruct_declarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStruct_declaratorAccess().getDeclaratorParserRuleCall_0());
		}
		this_declarator_0=ruledeclarator
		{
			$current.merge(this_declarator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStruct_declaratorAccess().getColonKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getStruct_declaratorAccess().getConstant_expressionParserRuleCall_1_1());
			}
			this_constant_expression_2=ruleconstant_expression
			{
				$current.merge(this_constant_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStruct_declaratorAccess().getDeclaratorParserRuleCall_2_0());
			}
			this_declarator_3=ruledeclarator
			{
				$current.merge(this_declarator_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStruct_declaratorAccess().getColonKeyword_2_1());
			}
			{
				newCompositeNode(grammarAccess.getStruct_declaratorAccess().getConstant_expressionParserRuleCall_2_2());
			}
			this_constant_expression_5=ruleconstant_expression
			{
				$current.merge(this_constant_expression_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleenum_specifier
entryRuleenum_specifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEnum_specifierRule()); }
	iv_ruleenum_specifier=ruleenum_specifier
	{ $current=$iv_ruleenum_specifier.current.getText(); }
	EOF;

// Rule enum_specifier
ruleenum_specifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ENUM_0=RULE_ENUM
			{
				$current.merge(this_ENUM_0);
			}
			{
				newLeafNode(this_ENUM_0, grammarAccess.getEnum_specifierAccess().getENUMTerminalRuleCall_0_0());
			}
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEnum_specifierAccess().getLeftCurlyBracketKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getEnum_specifierAccess().getEnumerator_listParserRuleCall_0_2());
			}
			this_enumerator_list_2=ruleenumerator_list
			{
				$current.merge(this_enumerator_list_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEnum_specifierAccess().getRightCurlyBracketKeyword_0_3());
			}
		)
		    |
		(
			this_ENUM_4=RULE_ENUM
			{
				$current.merge(this_ENUM_4);
			}
			{
				newLeafNode(this_ENUM_4, grammarAccess.getEnum_specifierAccess().getENUMTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getEnum_specifierAccess().getIDENTIFIERParserRuleCall_1_1());
			}
			this_IDENTIFIER_5=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEnum_specifierAccess().getLeftCurlyBracketKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getEnum_specifierAccess().getEnumerator_listParserRuleCall_1_3());
			}
			this_enumerator_list_7=ruleenumerator_list
			{
				$current.merge(this_enumerator_list_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEnum_specifierAccess().getRightCurlyBracketKeyword_1_4());
			}
		)
		    |
		(
			this_ENUM_9=RULE_ENUM
			{
				$current.merge(this_ENUM_9);
			}
			{
				newLeafNode(this_ENUM_9, grammarAccess.getEnum_specifierAccess().getENUMTerminalRuleCall_2_0());
			}
			{
				newCompositeNode(grammarAccess.getEnum_specifierAccess().getIDENTIFIERParserRuleCall_2_1());
			}
			this_IDENTIFIER_10=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleenumerator_list
entryRuleenumerator_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEnumerator_listRule()); }
	iv_ruleenumerator_list=ruleenumerator_list
	{ $current=$iv_ruleenumerator_list.current.getText(); }
	EOF;

// Rule enumerator_list
ruleenumerator_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEnumerator_listAccess().getEnumeratorParserRuleCall_0());
		}
		this_enumerator_0=ruleenumerator
		{
			$current.merge(this_enumerator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEnumerator_listAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getEnumerator_listAccess().getEnumeratorParserRuleCall_1_1());
			}
			this_enumerator_2=ruleenumerator
			{
				$current.merge(this_enumerator_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleenumerator
entryRuleenumerator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEnumeratorRule()); }
	iv_ruleenumerator=ruleenumerator
	{ $current=$iv_ruleenumerator.current.getText(); }
	EOF;

// Rule enumerator
ruleenumerator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEnumeratorAccess().getIDENTIFIERParserRuleCall_0());
		}
		this_IDENTIFIER_0=ruleIDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getEnumeratorAccess().getIDENTIFIERParserRuleCall_1_0());
			}
			this_IDENTIFIER_1=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEnumeratorAccess().getEqualsSignKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getEnumeratorAccess().getConstant_expressionParserRuleCall_1_2());
			}
			this_constant_expression_3=ruleconstant_expression
			{
				$current.merge(this_constant_expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuletype_qualifier
entryRuletype_qualifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_qualifierRule()); }
	iv_ruletype_qualifier=ruletype_qualifier
	{ $current=$iv_ruletype_qualifier.current.getText(); }
	EOF;

// Rule type_qualifier
ruletype_qualifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_CONST_0=RULE_CONST
		{
			$current.merge(this_CONST_0);
		}
		{
			newLeafNode(this_CONST_0, grammarAccess.getType_qualifierAccess().getCONSTTerminalRuleCall_0());
		}
		    |
		this_VOLATILE_1=RULE_VOLATILE
		{
			$current.merge(this_VOLATILE_1);
		}
		{
			newLeafNode(this_VOLATILE_1, grammarAccess.getType_qualifierAccess().getVOLATILETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuledeclarator
entryRuledeclarator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeclaratorRule()); }
	iv_ruledeclarator=ruledeclarator
	{ $current=$iv_ruledeclarator.current.getText(); }
	EOF;

// Rule declarator
ruledeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDeclaratorAccess().getPointerParserRuleCall_0_0());
			}
			this_pointer_0=rulepointer
			{
				$current.merge(this_pointer_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getDeclaratorAccess().getDirect_declaratorParserRuleCall_0_1());
			}
			this_direct_declarator_1=ruledirect_declarator
			{
				$current.merge(this_direct_declarator_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getDeclaratorAccess().getDirect_declaratorParserRuleCall_1());
		}
		this_direct_declarator_2=ruledirect_declarator
		{
			$current.merge(this_direct_declarator_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuledirect_declarator
entryRuledirect_declarator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDirect_declaratorRule()); }
	iv_ruledirect_declarator=ruledirect_declarator
	{ $current=$iv_ruledirect_declarator.current.getText(); }
	EOF;

// Rule direct_declarator
ruledirect_declarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDirect_declaratorAccess().getIDENTIFIERParserRuleCall_0_0());
			}
			this_IDENTIFIER_0=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorAccess().getDirect_declaratorIParserRuleCall_0_1());
			}
			this_direct_declaratorI_1=ruledirect_declaratorI
			{
				$current.merge(this_direct_declaratorI_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorAccess().getDeclaratorParserRuleCall_1_1());
			}
			this_declarator_3=ruledeclarator
			{
				$current.merge(this_declarator_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorAccess().getRightParenthesisKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorAccess().getDirect_declaratorIParserRuleCall_1_3());
			}
			this_direct_declaratorI_5=ruledirect_declaratorI
			{
				$current.merge(this_direct_declaratorI_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuledirect_declaratorI
entryRuledirect_declaratorI returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDirect_declaratorIRule()); }
	iv_ruledirect_declaratorI=ruledirect_declaratorI
	{ $current=$iv_ruledirect_declaratorI.current.getText(); }
	EOF;

// Rule direct_declaratorI
ruledirect_declaratorI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getLeftSquareBracketKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorIAccess().getConstant_expressionParserRuleCall_0_1());
			}
			this_constant_expression_1=ruleconstant_expression
			{
				$current.merge(this_constant_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getRightSquareBracketKeyword_0_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorIAccess().getDirect_declaratorIParserRuleCall_0_3());
			}
			this_direct_declaratorI_3=ruledirect_declaratorI
			{
				$current.merge(this_direct_declaratorI_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getLeftSquareBracketKeyword_1_0());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getRightSquareBracketKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorIAccess().getDirect_declaratorIParserRuleCall_1_2());
			}
			this_direct_declaratorI_6=ruledirect_declaratorI
			{
				$current.merge(this_direct_declaratorI_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorIAccess().getParameter_type_listParserRuleCall_2_1());
			}
			this_parameter_type_list_8=ruleparameter_type_list
			{
				$current.merge(this_parameter_type_list_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getRightParenthesisKeyword_2_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorIAccess().getDirect_declaratorIParserRuleCall_2_3());
			}
			this_direct_declaratorI_10=ruledirect_declaratorI
			{
				$current.merge(this_direct_declaratorI_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorIAccess().getIdentifier_listParserRuleCall_3_1());
			}
			this_identifier_list_12=ruleidentifier_list
			{
				$current.merge(this_identifier_list_12);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getRightParenthesisKeyword_3_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorIAccess().getDirect_declaratorIParserRuleCall_3_3());
			}
			this_direct_declaratorI_14=ruledirect_declaratorI
			{
				$current.merge(this_direct_declaratorI_14);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getLeftParenthesisKeyword_4_0());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_declaratorIAccess().getRightParenthesisKeyword_4_1());
			}
			{
				newCompositeNode(grammarAccess.getDirect_declaratorIAccess().getDirect_declaratorIParserRuleCall_4_2());
			}
			this_direct_declaratorI_17=ruledirect_declaratorI
			{
				$current.merge(this_direct_declaratorI_17);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRulepointer
entryRulepointer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPointerRule()); }
	iv_rulepointer=rulepointer
	{ $current=$iv_rulepointer.current.getText(); }
	EOF;

// Rule pointer
rulepointer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPointerAccess().getAsteriskKeyword_0());
		}
		    |
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPointerAccess().getAsteriskKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPointerAccess().getType_qualifier_listParserRuleCall_1_1());
			}
			this_type_qualifier_list_2=ruletype_qualifier_list
			{
				$current.merge(this_type_qualifier_list_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPointerAccess().getAsteriskKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getPointerAccess().getPointerParserRuleCall_2_1());
			}
			this_pointer_4=rulepointer
			{
				$current.merge(this_pointer_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPointerAccess().getAsteriskKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPointerAccess().getType_qualifier_listParserRuleCall_3_1());
			}
			this_type_qualifier_list_6=ruletype_qualifier_list
			{
				$current.merge(this_type_qualifier_list_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getPointerAccess().getPointerParserRuleCall_3_2());
			}
			this_pointer_7=rulepointer
			{
				$current.merge(this_pointer_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuletype_qualifier_list
entryRuletype_qualifier_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_qualifier_listRule()); }
	iv_ruletype_qualifier_list=ruletype_qualifier_list
	{ $current=$iv_ruletype_qualifier_list.current.getText(); }
	EOF;

// Rule type_qualifier_list
ruletype_qualifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getType_qualifier_listAccess().getType_qualifierParserRuleCall());
		}
		this_type_qualifier_0=ruletype_qualifier
		{
			$current.merge(this_type_qualifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRuleparameter_type_list
entryRuleparameter_type_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameter_type_listRule()); }
	iv_ruleparameter_type_list=ruleparameter_type_list
	{ $current=$iv_ruleparameter_type_list.current.getText(); }
	EOF;

// Rule parameter_type_list
ruleparameter_type_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameter_type_listAccess().getParameter_listParserRuleCall_0());
		}
		this_parameter_list_0=ruleparameter_list
		{
			$current.merge(this_parameter_list_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameter_type_listAccess().getCommaKeyword_1_0());
			}
			this_ELLIPSIS_2=RULE_ELLIPSIS
			{
				$current.merge(this_ELLIPSIS_2);
			}
			{
				newLeafNode(this_ELLIPSIS_2, grammarAccess.getParameter_type_listAccess().getELLIPSISTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleparameter_list
entryRuleparameter_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); }
	iv_ruleparameter_list=ruleparameter_list
	{ $current=$iv_ruleparameter_list.current.getText(); }
	EOF;

// Rule parameter_list
ruleparameter_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameter_listAccess().getParameter_declarationParserRuleCall_0());
		}
		this_parameter_declaration_0=ruleparameter_declaration
		{
			$current.merge(this_parameter_declaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameter_listAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getParameter_listAccess().getParameter_declarationParserRuleCall_1_1());
			}
			this_parameter_declaration_2=ruleparameter_declaration
			{
				$current.merge(this_parameter_declaration_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleparameter_declaration
entryRuleparameter_declaration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameter_declarationRule()); }
	iv_ruleparameter_declaration=ruleparameter_declaration
	{ $current=$iv_ruleparameter_declaration.current.getText(); }
	EOF;

// Rule parameter_declaration
ruleparameter_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameter_declarationAccess().getDeclaration_specifiersParserRuleCall_0_0());
			}
			this_declaration_specifiers_0=ruledeclaration_specifiers
			{
				$current.merge(this_declaration_specifiers_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getParameter_declarationAccess().getDeclaratorParserRuleCall_0_1());
			}
			this_declarator_1=ruledeclarator
			{
				$current.merge(this_declarator_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getParameter_declarationAccess().getDeclaration_specifiersParserRuleCall_1_0());
			}
			this_declaration_specifiers_2=ruledeclaration_specifiers
			{
				$current.merge(this_declaration_specifiers_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getParameter_declarationAccess().getAbstract_declaratorParserRuleCall_1_1());
			}
			this_abstract_declarator_3=ruleabstract_declarator
			{
				$current.merge(this_abstract_declarator_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getParameter_declarationAccess().getDeclaration_specifiersParserRuleCall_2());
		}
		this_declaration_specifiers_4=ruledeclaration_specifiers
		{
			$current.merge(this_declaration_specifiers_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); }
	iv_ruleidentifier_list=ruleidentifier_list
	{ $current=$iv_ruleidentifier_list.current.getText(); }
	EOF;

// Rule identifier_list
ruleidentifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIdentifier_listAccess().getIDENTIFIERParserRuleCall_0());
		}
		this_IDENTIFIER_0=ruleIDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getIdentifier_listAccess().getIDENTIFIERParserRuleCall_1_1());
			}
			this_IDENTIFIER_2=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuletype_name
entryRuletype_name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_nameRule()); }
	iv_ruletype_name=ruletype_name
	{ $current=$iv_ruletype_name.current.getText(); }
	EOF;

// Rule type_name
ruletype_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getType_nameAccess().getSpecifier_qualifier_listParserRuleCall_0());
		}
		this_specifier_qualifier_list_0=rulespecifier_qualifier_list
		{
			$current.merge(this_specifier_qualifier_list_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getType_nameAccess().getAbstract_declaratorParserRuleCall_1());
			}
			this_abstract_declarator_1=ruleabstract_declarator
			{
				$current.merge(this_abstract_declarator_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleabstract_declarator
entryRuleabstract_declarator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAbstract_declaratorRule()); }
	iv_ruleabstract_declarator=ruleabstract_declarator
	{ $current=$iv_ruleabstract_declarator.current.getText(); }
	EOF;

// Rule abstract_declarator
ruleabstract_declarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstract_declaratorAccess().getDirect_abstract_declaratorParserRuleCall_0());
		}
		this_direct_abstract_declarator_0=ruledirect_abstract_declarator
		{
			$current.merge(this_direct_abstract_declarator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getAbstract_declaratorAccess().getPointerParserRuleCall_1_0());
			}
			this_pointer_1=rulepointer
			{
				$current.merge(this_pointer_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getAbstract_declaratorAccess().getDirect_abstract_declaratorParserRuleCall_1_1());
				}
				this_direct_abstract_declarator_2=ruledirect_abstract_declarator
				{
					$current.merge(this_direct_abstract_declarator_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuledirect_abstract_declarator
entryRuledirect_abstract_declarator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDirect_abstract_declaratorRule()); }
	iv_ruledirect_abstract_declarator=ruledirect_abstract_declarator
	{ $current=$iv_ruledirect_abstract_declarator.current.getText(); }
	EOF;

// Rule direct_abstract_declarator
ruledirect_abstract_declarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorAccess().getAbstract_declaratorParserRuleCall_0_1());
			}
			this_abstract_declarator_1=ruleabstract_declarator
			{
				$current.merge(this_abstract_declarator_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getRightParenthesisKeyword_0_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorAccess().getDirect_abstract_declaratorIParserRuleCall_0_3());
			}
			this_direct_abstract_declaratorI_3=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getLeftSquareBracketKeyword_1_0());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getRightSquareBracketKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorAccess().getDirect_abstract_declaratorIParserRuleCall_1_2());
			}
			this_direct_abstract_declaratorI_6=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getLeftSquareBracketKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorAccess().getConstant_expressionParserRuleCall_2_1());
			}
			this_constant_expression_8=ruleconstant_expression
			{
				$current.merge(this_constant_expression_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getRightSquareBracketKeyword_2_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorAccess().getDirect_abstract_declaratorIParserRuleCall_2_3());
			}
			this_direct_abstract_declaratorI_10=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getLeftParenthesisKeyword_3_0());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getRightParenthesisKeyword_3_1());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorAccess().getDirect_abstract_declaratorIParserRuleCall_3_2());
			}
			this_direct_abstract_declaratorI_13=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_13);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getLeftParenthesisKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorAccess().getParameter_type_listParserRuleCall_4_1());
			}
			this_parameter_type_list_15=ruleparameter_type_list
			{
				$current.merge(this_parameter_type_list_15);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorAccess().getRightParenthesisKeyword_4_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorAccess().getDirect_abstract_declaratorIParserRuleCall_4_3());
			}
			this_direct_abstract_declaratorI_17=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_17);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuledirect_abstract_declaratorI
entryRuledirect_abstract_declaratorI returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDirect_abstract_declaratorIRule()); }
	iv_ruledirect_abstract_declaratorI=ruledirect_abstract_declaratorI
	{ $current=$iv_ruledirect_abstract_declaratorI.current.getText(); }
	EOF;

// Rule direct_abstract_declaratorI
ruledirect_abstract_declaratorI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorIAccess().getLeftSquareBracketKeyword_0_0());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorIAccess().getRightSquareBracketKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorIAccess().getDirect_abstract_declaratorIParserRuleCall_0_2());
			}
			this_direct_abstract_declaratorI_2=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorIAccess().getLeftSquareBracketKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorIAccess().getConstant_expressionParserRuleCall_1_1());
			}
			this_constant_expression_4=ruleconstant_expression
			{
				$current.merge(this_constant_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorIAccess().getRightSquareBracketKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorIAccess().getDirect_abstract_declaratorIParserRuleCall_1_3());
			}
			this_direct_abstract_declaratorI_6=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorIAccess().getLeftParenthesisKeyword_2_0());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorIAccess().getRightParenthesisKeyword_2_1());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorIAccess().getDirect_abstract_declaratorIParserRuleCall_2_2());
			}
			this_direct_abstract_declaratorI_9=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorIAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorIAccess().getParameter_type_listParserRuleCall_3_1());
			}
			this_parameter_type_list_11=ruleparameter_type_list
			{
				$current.merge(this_parameter_type_list_11);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDirect_abstract_declaratorIAccess().getRightParenthesisKeyword_3_2());
			}
			{
				newCompositeNode(grammarAccess.getDirect_abstract_declaratorIAccess().getDirect_abstract_declaratorIParserRuleCall_3_3());
			}
			this_direct_abstract_declaratorI_13=ruledirect_abstract_declaratorI
			{
				$current.merge(this_direct_abstract_declaratorI_13);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleinitializer
entryRuleinitializer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInitializerRule()); }
	iv_ruleinitializer=ruleinitializer
	{ $current=$iv_ruleinitializer.current.getText(); }
	EOF;

// Rule initializer
ruleinitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInitializerAccess().getAssignment_expressionParserRuleCall_0());
		}
		this_assignment_expression_0=ruleassignment_expression
		{
			$current.merge(this_assignment_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInitializerAccess().getLeftCurlyBracketKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getInitializerAccess().getInitializer_listParserRuleCall_1_1());
			}
			this_initializer_list_2=ruleinitializer_list
			{
				$current.merge(this_initializer_list_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInitializerAccess().getRightCurlyBracketKeyword_1_2());
			}
		)
		    |
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInitializerAccess().getLeftCurlyBracketKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getInitializerAccess().getInitializer_listParserRuleCall_2_1());
			}
			this_initializer_list_5=ruleinitializer_list
			{
				$current.merge(this_initializer_list_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInitializerAccess().getCommaKeyword_2_2());
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInitializerAccess().getRightCurlyBracketKeyword_2_3());
			}
		)
	)
;

// Entry rule entryRuleinitializer_list
entryRuleinitializer_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInitializer_listRule()); }
	iv_ruleinitializer_list=ruleinitializer_list
	{ $current=$iv_ruleinitializer_list.current.getText(); }
	EOF;

// Rule initializer_list
ruleinitializer_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInitializer_listAccess().getInitializerParserRuleCall_0());
		}
		this_initializer_0=ruleinitializer
		{
			$current.merge(this_initializer_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInitializer_listAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getInitializer_listAccess().getInitializerParserRuleCall_1_1());
			}
			this_initializer_2=ruleinitializer
			{
				$current.merge(this_initializer_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current.getText(); }
	EOF;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLabeled_statementParserRuleCall_0());
		}
		this_labeled_statement_0=rulelabeled_statement
		{
			$current.merge(this_labeled_statement_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCompound_statementParserRuleCall_1());
		}
		this_compound_statement_1=rulecompound_statement
		{
			$current.merge(this_compound_statement_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExpression_statementParserRuleCall_2());
		}
		this_expression_statement_2=ruleexpression_statement
		{
			$current.merge(this_expression_statement_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelection_statementParserRuleCall_3());
		}
		this_selection_statement_3=ruleselection_statement
		{
			$current.merge(this_selection_statement_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIteration_statementParserRuleCall_4());
		}
		this_iteration_statement_4=ruleiteration_statement
		{
			$current.merge(this_iteration_statement_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getJump_statementParserRuleCall_5());
		}
		this_jump_statement_5=rulejump_statement
		{
			$current.merge(this_jump_statement_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulelabeled_statement
entryRulelabeled_statement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLabeled_statementRule()); }
	iv_rulelabeled_statement=rulelabeled_statement
	{ $current=$iv_rulelabeled_statement.current.getText(); }
	EOF;

// Rule labeled_statement
rulelabeled_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLabeled_statementAccess().getIDENTIFIERParserRuleCall_0_0());
			}
			this_IDENTIFIER_0=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLabeled_statementAccess().getColonKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getLabeled_statementAccess().getStatementParserRuleCall_0_2());
			}
			this_statement_2=rulestatement
			{
				$current.merge(this_statement_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_CASE_3=RULE_CASE
			{
				$current.merge(this_CASE_3);
			}
			{
				newLeafNode(this_CASE_3, grammarAccess.getLabeled_statementAccess().getCASETerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getLabeled_statementAccess().getConstant_expressionParserRuleCall_1_1());
			}
			this_constant_expression_4=ruleconstant_expression
			{
				$current.merge(this_constant_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLabeled_statementAccess().getColonKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getLabeled_statementAccess().getStatementParserRuleCall_1_3());
			}
			this_statement_6=rulestatement
			{
				$current.merge(this_statement_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_DEFAULT_7=RULE_DEFAULT
			{
				$current.merge(this_DEFAULT_7);
			}
			{
				newLeafNode(this_DEFAULT_7, grammarAccess.getLabeled_statementAccess().getDEFAULTTerminalRuleCall_2_0());
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLabeled_statementAccess().getColonKeyword_2_1());
			}
			{
				newCompositeNode(grammarAccess.getLabeled_statementAccess().getStatementParserRuleCall_2_2());
			}
			this_statement_9=rulestatement
			{
				$current.merge(this_statement_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulecompound_statement
entryRulecompound_statement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompound_statementRule()); }
	iv_rulecompound_statement=rulecompound_statement
	{ $current=$iv_rulecompound_statement.current.getText(); }
	EOF;

// Rule compound_statement
rulecompound_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCompound_statementAccess().getLeftCurlyBracketKeyword_0_0());
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCompound_statementAccess().getRightCurlyBracketKeyword_0_1());
			}
		)
		    |
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCompound_statementAccess().getLeftCurlyBracketKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getCompound_statementAccess().getStatement_listParserRuleCall_1_1());
			}
			this_statement_list_3=rulestatement_list
			{
				$current.merge(this_statement_list_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCompound_statementAccess().getRightCurlyBracketKeyword_1_2());
			}
		)
		    |
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCompound_statementAccess().getLeftCurlyBracketKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getCompound_statementAccess().getDeclaration_listParserRuleCall_2_1());
			}
			this_declaration_list_6=ruledeclaration_list
			{
				$current.merge(this_declaration_list_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCompound_statementAccess().getRightCurlyBracketKeyword_2_2());
			}
		)
		    |
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCompound_statementAccess().getLeftCurlyBracketKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getCompound_statementAccess().getDeclaration_listParserRuleCall_3_1());
			}
			this_declaration_list_9=ruledeclaration_list
			{
				$current.merge(this_declaration_list_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getCompound_statementAccess().getStatement_listParserRuleCall_3_2());
			}
			this_statement_list_10=rulestatement_list
			{
				$current.merge(this_statement_list_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCompound_statementAccess().getRightCurlyBracketKeyword_3_3());
			}
		)
	)
;

// Entry rule entryRuledeclaration_list
entryRuledeclaration_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeclaration_listRule()); }
	iv_ruledeclaration_list=ruledeclaration_list
	{ $current=$iv_ruledeclaration_list.current.getText(); }
	EOF;

// Rule declaration_list
ruledeclaration_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclaration_listAccess().getDeclarationParserRuleCall());
		}
		this_declaration_0=ruledeclaration
		{
			$current.merge(this_declaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRulestatement_list
entryRulestatement_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatement_listRule()); }
	iv_rulestatement_list=rulestatement_list
	{ $current=$iv_rulestatement_list.current.getText(); }
	EOF;

// Rule statement_list
rulestatement_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatement_listAccess().getStatementParserRuleCall());
		}
		this_statement_0=rulestatement
		{
			$current.merge(this_statement_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRuleexpression_statement
entryRuleexpression_statement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpression_statementRule()); }
	iv_ruleexpression_statement=ruleexpression_statement
	{ $current=$iv_ruleexpression_statement.current.getText(); }
	EOF;

// Rule expression_statement
ruleexpression_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_statementAccess().getSemicolonKeyword_0());
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getExpression_statementAccess().getExpressionParserRuleCall_1_0());
			}
			this_expression_1=ruleexpression
			{
				$current.merge(this_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpression_statementAccess().getSemicolonKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleselection_statement
entryRuleselection_statement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSelection_statementRule()); }
	iv_ruleselection_statement=ruleselection_statement
	{ $current=$iv_ruleselection_statement.current.getText(); }
	EOF;

// Rule selection_statement
ruleselection_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_IF_0=RULE_IF
			{
				$current.merge(this_IF_0);
			}
			{
				newLeafNode(this_IF_0, grammarAccess.getSelection_statementAccess().getIFTerminalRuleCall_0_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSelection_statementAccess().getLeftParenthesisKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getSelection_statementAccess().getExpressionParserRuleCall_0_2());
			}
			this_expression_2=ruleexpression
			{
				$current.merge(this_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_0_3());
			}
			{
				newCompositeNode(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_0_4());
			}
			this_statement_4=rulestatement
			{
				$current.merge(this_statement_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_IF_5=RULE_IF
			{
				$current.merge(this_IF_5);
			}
			{
				newLeafNode(this_IF_5, grammarAccess.getSelection_statementAccess().getIFTerminalRuleCall_1_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSelection_statementAccess().getLeftParenthesisKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getSelection_statementAccess().getExpressionParserRuleCall_1_2());
			}
			this_expression_7=ruleexpression
			{
				$current.merge(this_expression_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_1_3());
			}
			{
				newCompositeNode(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_1_4());
			}
			this_statement_9=rulestatement
			{
				$current.merge(this_statement_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_ELSE_10=RULE_ELSE
			{
				$current.merge(this_ELSE_10);
			}
			{
				newLeafNode(this_ELSE_10, grammarAccess.getSelection_statementAccess().getELSETerminalRuleCall_1_5());
			}
			{
				newCompositeNode(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_1_6());
			}
			this_statement_11=rulestatement
			{
				$current.merge(this_statement_11);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_SWITCH_12=RULE_SWITCH
			{
				$current.merge(this_SWITCH_12);
			}
			{
				newLeafNode(this_SWITCH_12, grammarAccess.getSelection_statementAccess().getSWITCHTerminalRuleCall_2_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSelection_statementAccess().getLeftParenthesisKeyword_2_1());
			}
			{
				newCompositeNode(grammarAccess.getSelection_statementAccess().getExpressionParserRuleCall_2_2());
			}
			this_expression_14=ruleexpression
			{
				$current.merge(this_expression_14);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_2_3());
			}
			{
				newCompositeNode(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_2_4());
			}
			this_statement_16=rulestatement
			{
				$current.merge(this_statement_16);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleiteration_statement
entryRuleiteration_statement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIteration_statementRule()); }
	iv_ruleiteration_statement=ruleiteration_statement
	{ $current=$iv_ruleiteration_statement.current.getText(); }
	EOF;

// Rule iteration_statement
ruleiteration_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_WHILE_0=RULE_WHILE
			{
				$current.merge(this_WHILE_0);
			}
			{
				newLeafNode(this_WHILE_0, grammarAccess.getIteration_statementAccess().getWHILETerminalRuleCall_0_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getLeftParenthesisKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getExpressionParserRuleCall_0_2());
			}
			this_expression_2=ruleexpression
			{
				$current.merge(this_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getRightParenthesisKeyword_0_3());
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getStatementParserRuleCall_0_4());
			}
			this_statement_4=rulestatement
			{
				$current.merge(this_statement_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_DO_5=RULE_DO
			{
				$current.merge(this_DO_5);
			}
			{
				newLeafNode(this_DO_5, grammarAccess.getIteration_statementAccess().getDOTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getStatementParserRuleCall_1_1());
			}
			this_statement_6=rulestatement
			{
				$current.merge(this_statement_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_WHILE_7=RULE_WHILE
			{
				$current.merge(this_WHILE_7);
			}
			{
				newLeafNode(this_WHILE_7, grammarAccess.getIteration_statementAccess().getWHILETerminalRuleCall_1_2());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getLeftParenthesisKeyword_1_3());
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getExpressionParserRuleCall_1_4());
			}
			this_expression_9=ruleexpression
			{
				$current.merge(this_expression_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getRightParenthesisKeyword_1_5());
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getSemicolonKeyword_1_6());
			}
		)
		    |
		(
			this_FOR_12=RULE_FOR
			{
				$current.merge(this_FOR_12);
			}
			{
				newLeafNode(this_FOR_12, grammarAccess.getIteration_statementAccess().getFORTerminalRuleCall_2_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getLeftParenthesisKeyword_2_1());
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getExpression_statementParserRuleCall_2_2());
			}
			this_expression_statement_14=ruleexpression_statement
			{
				$current.merge(this_expression_statement_14);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getExpression_statementParserRuleCall_2_3());
			}
			this_expression_statement_15=ruleexpression_statement
			{
				$current.merge(this_expression_statement_15);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getRightParenthesisKeyword_2_4());
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getStatementParserRuleCall_2_5());
			}
			this_statement_17=rulestatement
			{
				$current.merge(this_statement_17);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_FOR_18=RULE_FOR
			{
				$current.merge(this_FOR_18);
			}
			{
				newLeafNode(this_FOR_18, grammarAccess.getIteration_statementAccess().getFORTerminalRuleCall_3_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getLeftParenthesisKeyword_3_1());
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getExpression_statementParserRuleCall_3_2());
			}
			this_expression_statement_20=ruleexpression_statement
			{
				$current.merge(this_expression_statement_20);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getExpression_statementParserRuleCall_3_3());
			}
			this_expression_statement_21=ruleexpression_statement
			{
				$current.merge(this_expression_statement_21);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getExpressionParserRuleCall_3_4());
			}
			this_expression_22=ruleexpression
			{
				$current.merge(this_expression_22);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIteration_statementAccess().getRightParenthesisKeyword_3_5());
			}
			{
				newCompositeNode(grammarAccess.getIteration_statementAccess().getStatementParserRuleCall_3_6());
			}
			this_statement_24=rulestatement
			{
				$current.merge(this_statement_24);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulejump_statement
entryRulejump_statement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getJump_statementRule()); }
	iv_rulejump_statement=rulejump_statement
	{ $current=$iv_rulejump_statement.current.getText(); }
	EOF;

// Rule jump_statement
rulejump_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_GOTO_0=RULE_GOTO
			{
				$current.merge(this_GOTO_0);
			}
			{
				newLeafNode(this_GOTO_0, grammarAccess.getJump_statementAccess().getGOTOTerminalRuleCall_0_0());
			}
			{
				newCompositeNode(grammarAccess.getJump_statementAccess().getIDENTIFIERParserRuleCall_0_1());
			}
			this_IDENTIFIER_1=ruleIDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getJump_statementAccess().getSemicolonKeyword_0_2());
			}
		)
		    |
		(
			this_CONTINUE_3=RULE_CONTINUE
			{
				$current.merge(this_CONTINUE_3);
			}
			{
				newLeafNode(this_CONTINUE_3, grammarAccess.getJump_statementAccess().getCONTINUETerminalRuleCall_1_0());
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getJump_statementAccess().getSemicolonKeyword_1_1());
			}
		)
		    |
		(
			this_BREAK_5=RULE_BREAK
			{
				$current.merge(this_BREAK_5);
			}
			{
				newLeafNode(this_BREAK_5, grammarAccess.getJump_statementAccess().getBREAKTerminalRuleCall_2_0());
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getJump_statementAccess().getSemicolonKeyword_2_1());
			}
		)
		    |
		(
			this_RETURNO_7=RULE_RETURNO
			{
				$current.merge(this_RETURNO_7);
			}
			{
				newLeafNode(this_RETURNO_7, grammarAccess.getJump_statementAccess().getRETURNOTerminalRuleCall_3_0());
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getJump_statementAccess().getSemicolonKeyword_3_1());
			}
		)
		    |
		(
			this_RETURNO_9=RULE_RETURNO
			{
				$current.merge(this_RETURNO_9);
			}
			{
				newLeafNode(this_RETURNO_9, grammarAccess.getJump_statementAccess().getRETURNOTerminalRuleCall_4_0());
			}
			{
				newCompositeNode(grammarAccess.getJump_statementAccess().getExpressionParserRuleCall_4_1());
			}
			this_expression_10=ruleexpression
			{
				$current.merge(this_expression_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getJump_statementAccess().getSemicolonKeyword_4_2());
			}
		)
	)
;

// Entry rule entryRuletranslation_unit
entryRuletranslation_unit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTranslation_unitRule()); }
	iv_ruletranslation_unit=ruletranslation_unit
	{ $current=$iv_ruletranslation_unit.current.getText(); }
	EOF;

// Rule translation_unit
ruletranslation_unit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTranslation_unitAccess().getExternal_declarationParserRuleCall());
		}
		this_external_declaration_0=ruleexternal_declaration
		{
			$current.merge(this_external_declaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRuleexternal_declaration
entryRuleexternal_declaration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExternal_declarationRule()); }
	iv_ruleexternal_declaration=ruleexternal_declaration
	{ $current=$iv_ruleexternal_declaration.current.getText(); }
	EOF;

// Rule external_declaration
ruleexternal_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExternal_declarationAccess().getFunction_definitionParserRuleCall_0());
		}
		this_function_definition_0=rulefunction_definition
		{
			$current.merge(this_function_definition_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExternal_declarationAccess().getDeclarationParserRuleCall_1());
		}
		this_declaration_1=ruledeclaration
		{
			$current.merge(this_declaration_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulefunction_definition
entryRulefunction_definition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunction_definitionRule()); }
	iv_rulefunction_definition=rulefunction_definition
	{ $current=$iv_rulefunction_definition.current.getText(); }
	EOF;

// Rule function_definition
rulefunction_definition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getDeclaration_specifiersParserRuleCall_0_0());
			}
			this_declaration_specifiers_0=ruledeclaration_specifiers
			{
				$current.merge(this_declaration_specifiers_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getDeclaratorParserRuleCall_0_1());
			}
			this_declarator_1=ruledeclarator
			{
				$current.merge(this_declarator_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getDeclaration_listParserRuleCall_0_2());
			}
			this_declaration_list_2=ruledeclaration_list
			{
				$current.merge(this_declaration_list_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getCompound_statementParserRuleCall_0_3());
			}
			this_compound_statement_3=rulecompound_statement
			{
				$current.merge(this_compound_statement_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getDeclaration_specifiersParserRuleCall_1_0());
			}
			this_declaration_specifiers_4=ruledeclaration_specifiers
			{
				$current.merge(this_declaration_specifiers_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getDeclaratorParserRuleCall_1_1());
			}
			this_declarator_5=ruledeclarator
			{
				$current.merge(this_declarator_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getCompound_statementParserRuleCall_1_2());
			}
			this_compound_statement_6=rulecompound_statement
			{
				$current.merge(this_compound_statement_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getDeclaratorParserRuleCall_2_0());
			}
			this_declarator_7=ruledeclarator
			{
				$current.merge(this_declarator_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getDeclaration_listParserRuleCall_2_1());
			}
			this_declaration_list_8=ruledeclaration_list
			{
				$current.merge(this_declaration_list_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getCompound_statementParserRuleCall_2_2());
			}
			this_compound_statement_9=rulecompound_statement
			{
				$current.merge(this_compound_statement_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getDeclaratorParserRuleCall_3_0());
			}
			this_declarator_10=ruledeclarator
			{
				$current.merge(this_declarator_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFunction_definitionAccess().getCompound_statementParserRuleCall_3_1());
			}
			this_compound_statement_11=rulecompound_statement
			{
				$current.merge(this_compound_statement_11);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIDENTIFIER
entryRuleIDENTIFIER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIDENTIFIERRule()); }
	iv_ruleIDENTIFIER=ruleIDENTIFIER
	{ $current=$iv_ruleIDENTIFIER.current.getText(); }
	EOF;

// Rule IDENTIFIER
ruleIDENTIFIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getIDENTIFIERAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleTYPE_NAMEE
entryRuleTYPE_NAMEE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTYPE_NAMEERule()); }
	iv_ruleTYPE_NAMEE=ruleTYPE_NAMEE
	{ $current=$iv_ruleTYPE_NAMEE.current.getText(); }
	EOF;

// Rule TYPE_NAMEE
ruleTYPE_NAMEE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getTYPE_NAMEEAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleSTRING_LITERAL
entryRuleSTRING_LITERAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSTRING_LITERALRule()); }
	iv_ruleSTRING_LITERAL=ruleSTRING_LITERAL
	{ $current=$iv_ruleSTRING_LITERAL.current.getText(); }
	EOF;

// Rule STRING_LITERAL
ruleSTRING_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getSTRING_LITERALAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleFS
entryRuleFS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFSRule()); }
	iv_ruleFS=ruleFS
	{ $current=$iv_ruleFS.current.getText(); }
	EOF;

// Rule FS
ruleFS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='f'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFSAccess().getFKeyword_0());
		}
		    |
		kw='F'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFSAccess().getFKeyword_1());
		}
		    |
		kw='l'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFSAccess().getLKeyword_2());
		}
		    |
		kw='L'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFSAccess().getLKeyword_3());
		}
	)
;

// Entry rule entryRuleIS
entryRuleIS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getISRule()); }
	iv_ruleIS=ruleIS
	{ $current=$iv_ruleIS.current.getText(); }
	EOF;

// Rule IS
ruleIS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='u'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getISAccess().getUKeyword_0());
		}
		    |
		kw='U'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getISAccess().getUKeyword_1());
		}
		    |
		kw='l'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getISAccess().getLKeyword_2());
		}
		    |
		kw='L'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getISAccess().getLKeyword_3());
		}
	)+
;

// Entry rule entryRuleCONSTANT
entryRuleCONSTANT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCONSTANTRule()); }
	iv_ruleCONSTANT=ruleCONSTANT
	{ $current=$iv_ruleCONSTANT.current.getText(); }
	EOF;

// Rule CONSTANT
ruleCONSTANT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				this_D_0=RULE_D
				{
					$current.merge(this_D_0);
				}
				{
					newLeafNode(this_D_0, grammarAccess.getCONSTANTAccess().getDTerminalRuleCall_0_0());
				}
			)+
			(
				{
					newCompositeNode(grammarAccess.getCONSTANTAccess().getISParserRuleCall_0_1());
				}
				this_IS_1=ruleIS
				{
					$current.merge(this_IS_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			(
				this_D_2=RULE_D
				{
					$current.merge(this_D_2);
				}
				{
					newLeafNode(this_D_2, grammarAccess.getCONSTANTAccess().getDTerminalRuleCall_1_0());
				}
			)*
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCONSTANTAccess().getFullStopKeyword_1_1());
			}
			(
				this_D_4=RULE_D
				{
					$current.merge(this_D_4);
				}
				{
					newLeafNode(this_D_4, grammarAccess.getCONSTANTAccess().getDTerminalRuleCall_1_2());
				}
			)+
			(
				this_E_5=RULE_E
				{
					$current.merge(this_E_5);
				}
				{
					newLeafNode(this_E_5, grammarAccess.getCONSTANTAccess().getETerminalRuleCall_1_3());
				}
			)?
			(
				{
					newCompositeNode(grammarAccess.getCONSTANTAccess().getFSParserRuleCall_1_4());
				}
				this_FS_6=ruleFS
				{
					$current.merge(this_FS_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			(
				this_D_7=RULE_D
				{
					$current.merge(this_D_7);
				}
				{
					newLeafNode(this_D_7, grammarAccess.getCONSTANTAccess().getDTerminalRuleCall_2_0());
				}
			)+
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCONSTANTAccess().getFullStopKeyword_2_1());
			}
			(
				this_E_9=RULE_E
				{
					$current.merge(this_E_9);
				}
				{
					newLeafNode(this_E_9, grammarAccess.getCONSTANTAccess().getETerminalRuleCall_2_2());
				}
			)?
			(
				{
					newCompositeNode(grammarAccess.getCONSTANTAccess().getFSParserRuleCall_2_3());
				}
				this_FS_10=ruleFS
				{
					$current.merge(this_FS_10);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

RULE_AUTO : 'auto';

RULE_BREAK : 'break';

RULE_CASE : 'case';

RULE_CHAR : 'char';

RULE_CONST : 'const';

RULE_CONTINUE : 'continue';

RULE_DEFAULT : 'default';

RULE_DO : 'do';

RULE_DOUBLE : 'double';

RULE_ELSE : 'else';

RULE_ENUM : 'enum';

RULE_EXTERN : 'extern';

RULE_FLOAT : 'float';

RULE_FOR : 'for';

RULE_GOTO : 'goto';

RULE_IF : 'if';

RULE_INTE : 'int';

RULE_LONG : 'long';

RULE_REGISTER : 'register';

RULE_RETURNO : 'return';

RULE_SHORT : 'short';

RULE_SIGNED : 'signed';

RULE_SIZEOF : 'sizeof';

RULE_STATIC : 'static';

RULE_STRUCT : 'struct';

RULE_SWITCH : 'switch';

RULE_TYPEDEF : 'typedef';

RULE_UNION : 'union';

RULE_UNSIGNED : 'unsigned';

RULE_VOID : 'void';

RULE_VOLATILE : 'volatile';

RULE_WHILE : 'while';

RULE_ELLIPSIS : '...';

RULE_RIGHT_ASSIGN : '>>=';

RULE_LEFT_ASSIGN : '<<=';

RULE_ADD_ASSIGN : '+=';

RULE_SUB_ASSIGN : '-=';

RULE_MUL_ASSIGN : '*=';

RULE_DIV_ASSIGN : '/=';

RULE_MOD_ASSIGN : '%=';

RULE_AND_ASSIGN : '&=';

RULE_XOR_ASSIGN : '^=';

RULE_OR_ASSIGN : '|=';

RULE_RIGHT_OP : '>>';

RULE_LEFT_OP : '<<';

RULE_INC_OP : '++';

RULE_DEC_OP : '--';

RULE_PTR_OP : '->';

RULE_AND_OP : '&&';

RULE_OR_OP : '||';

RULE_LE_OP : '<=';

RULE_GE_OP : '>=';

RULE_EQ_OP : '==';

RULE_NE_OP : '!=';

RULE_D : '0'..'9';

RULE_L : ('a'..'z'|'A'..'Z');

RULE_E : ('E'|'e') ('+'|'-')? RULE_D+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
