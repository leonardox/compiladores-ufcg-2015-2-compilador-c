grammar org.xtext.example.Ansic with org.eclipse.xtext.common.Terminals

generate ansic "http://www.xtext.org/example/Ansic"

DomainModel:
	geetings+=translation_unit;

primary_expression
	: IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| '(' expression ')'
	;


postfix_expressionL
	: ( '[' expression ']' postfix_expressionL )
	|   '(' ')' postfix_expressionL
	| ( '(' argument_expression_list ')' postfix_expressionL )
	|  '.' IDENTIFIER postfix_expressionL
	|  '->' IDENTIFIER postfix_expressionL
	|  '++' postfix_expressionL
	|  ('--' postfix_expressionL)?
;
		
postfix_expression
	: primary_expression postfix_expressionL
	;
		
argument_expression_listI
	: (',' assignment_expression argument_expression_listI)?
	;
	
argument_expression_list
	: assignment_expression argument_expression_listI
	;

unary_expression
	: postfix_expression
	| '++' unary_expression
	| '--' unary_expression
	| unary_operator cast_expression
	| 'sizeof' unary_expression
	| 'sizeof' '(' type_name ')'
	;
	
unary_operator
	: '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'
	;
	
cast_expression
	: unary_expression
	| '(' type_name ')' cast_expression
	;

multiplicative_expressionI
	: '*' cast_expression multiplicative_expressionI
	| '/' cast_expression multiplicative_expressionI
	| ('%' cast_expression multiplicative_expressionI)?
;

multiplicative_expression
	: cast_expression multiplicative_expressionI
	;
	
additive_expression
	: multiplicative_expression (('+'|'-') multiplicative_expression)*
	;
	
shift_expression
	: additive_expression (('<<'|'>>') additive_expression)*
	;
	
relational_expression
	: shift_expression (('<'|'>'|'<='|'>=') shift_expression)*
	;

equality_expression
	: relational_expression (('=='|'!=') relational_expression)*
	;

and_expression
	: equality_expression ('&' equality_expression)*
	;

exclusive_or_expression
	: and_expression ('^' and_expression)*
	;

inclusive_or_expression
	: exclusive_or_expression ('|' exclusive_or_expression)*
	;

logical_and_expression
	: inclusive_or_expression ('&&' inclusive_or_expression)*
	;

logical_or_expression
	: logical_and_expression ('||' logical_and_expression)*
	;
		
conditional_expression
	: logical_or_expression ('?' expression ':' conditional_expression)?
	;

assignment_expression
	: conditional_expression
	| unary_expression assignment_operator assignment_expression
	;

expression
	: assignment_expression (',' assignment_expression)*
	;

assignment_operator
	: '='
	| '*='
	| '/='
	| '%='
	| '+='
	| '-='
	| '<<='
	| '>>='
	| '&='
	| '^='
	| '|='
	;
 
 constant_expression
	: conditional_expression
	;

declaration
	: declaration_specifiers init_declarator_list? ';'
	;

declaration_specifiers
	: storage_class_specifier declaration_specifiers?
	| type_specifier declaration_specifiers?
	| type_qualifier declaration_specifiers?
	;

init_declarator_list
	: init_declarator (',' init_declarator)*
	;

init_declarator
	: declarator ('=' initializer)*
	;

storage_class_specifier
	: 'typedef'
	| 'extern'
	| 'static'
	| 'auto'
	| 'register'
	;

type_specifier
	: 'void'
	| 'char'
	| 'short'
	| 'int'
	| 'long'
	| 'float'
	| 'double'
	| 'signed'
	| 'unsigned'
	| struct_or_union_specifier
	| enum_specifier
	| ID
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER '{' struct_declaration_list '}'
	| struct_or_union '{' struct_declaration_list '}'
	| struct_or_union IDENTIFIER
	;

struct_or_union
	: 'struct'
	| 'union'
	;

struct_declaration_list
	: struct_declaration+
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list ';'
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	;

struct_declarator_list
	: struct_declarator (',' struct_declarator)*
	;

struct_declarator
	: declarator
	| ':' constant_expression
	| declarator ':' constant_expression
	;

enum_specifier
	: 'enum' '{' enumerator_list '}'
	| 'enum' IDENTIFIER '{' enumerator_list '}'
	| 'enum' IDENTIFIER
	;

enumerator_list
	: enumerator (',' enumerator)*
	;

enumerator
	: IDENTIFIER
	| IDENTIFIER '=' constant_expression
	;

type_qualifier
	: 'const'
	| 'volatile'
	;

declarator
	: pointer direct_declarator
	| direct_declarator
	;

direct_declarator
	: IDENTIFIER direct_declaratorI
	| '(' declarator ')' direct_declaratorI
	
	;

direct_declaratorI
	: '[' constant_expression ']' direct_declaratorI
	| '[' ']' direct_declaratorI
	| '(' parameter_type_list ')' direct_declaratorI
	| '(' identifier_list ')' direct_declaratorI
	| ('(' ')' direct_declaratorI)?
	;

pointer
	: '*'
	| '*' type_qualifier_list
	| '*' pointer
	| '*' type_qualifier_list pointer
	;

type_qualifier_list
	: type_qualifier+
	;


parameter_type_list
	: parameter_list (',' '...')*
	;

parameter_list
	: parameter_declaration (',' parameter_declaration)*
	;

parameter_declaration
	: declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	;

identifier_list
	: IDENTIFIER ( ',' IDENTIFIER)*
	;

type_name
	:specifier_qualifier_list abstract_declarator?
	;

abstract_declarator
	: direct_abstract_declarator
	| pointer direct_abstract_declarator?
	;

direct_abstract_declarator
	: '(' abstract_declarator ')' direct_abstract_declaratorI
	| '[' ']' direct_abstract_declaratorI
	| '[' constant_expression ']' direct_abstract_declaratorI
	| '(' ')' direct_abstract_declaratorI
	| '(' parameter_type_list ')' direct_abstract_declaratorI
	
	;

direct_abstract_declaratorI
	: '[' ']' direct_abstract_declaratorI
	| '[' constant_expression ']' direct_abstract_declaratorI
	| '(' ')' direct_abstract_declaratorI
	| '(' parameter_type_list ')' direct_abstract_declaratorI
	;
initializer
	: assignment_expression
	| '{' initializer_list '}'
	| '{' initializer_list ',' '}'
	;

initializer_list
	: initializer (',' initializer)*
	;

statement
	: labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	: IDENTIFIER ':' statement
	| 'case' constant_expression ':' statement
	| 'default' ':' statement
	;

compound_statement
	: '{' '}'
	| '{' statement_list '}'
	| '{' declaration_list '}'
	| '{' declaration_list statement_list '}'
	;

declaration_list
	: declaration+
	;

statement_list
	: statement+
	;

expression_statement
	: ';'
	| expression ';'
	;

selection_statement
	: 'if' '(' expression ')' statement
	| 'if' '(' expression ')' statement 'else' statement
	| 'switch' '(' expression ')' statement
	;

iteration_statement
	: 'while' '(' expression ')' statement
	| 'do' statement 'while' '(' expression ')' ';'
	| 'for' '(' expression_statement expression_statement ')' statement
	| 'for' '(' expression_statement expression_statement expression ')' statement
	;

jump_statement
	: 'goto' IDENTIFIER ';'
	| 'continue' ';'
	| 'break' ';'
	| 'return' ';'
	| 'return' expression ';'
	;

translation_unit
	: external_declaration+
	;

external_declaration
	: function_definition
	| declaration
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	| declarator declaration_list compound_statement
	| declarator compound_statement
	;
  
 

	//missing
//missing



IDENTIFIER :
	ID
;

TYPE_NAMEE :
	ID
;

STRING_LITERAL :
	STRING
;


terminal D : ('0'..'9');
terminal L : ('a'..'z'|'A'..'Z');
terminal E : ('E'|'e')('+'|'-')?D+;
FS : ('f'|'F'|'l'|'L');
IS : ('u'|'U'|'l'|'L')+;

//0[xX]{H}+{IS}?	
//L?'(\\.|[^\\'])+'
CONSTANT:  D+(IS)? | D*'.'D+E?FS? | D+'.'E?FS?  ;
//missing