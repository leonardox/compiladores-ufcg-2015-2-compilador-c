/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.ansic.type_specifier
import org.xtext.example.ansic.declaration
import org.xtext.example.ansic.assignment_expression
import org.xtext.example.ansic.function_definition
import org.xtext.example.ansic.selection_statement
import org.xtext.example.ansic.AnsicPackage
import java.util.List
import java.util.ArrayList
import org.xtext.example.ansic.AnsicFactory
import org.xtext.example.ansic.impl.AnsicFactoryImpl

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class AnsicValidator extends AbstractAnsicValidator {
	
    public static val INVALID_NAME = 'invalidName'
  private var variables = <String,String>newHashMap();
  public static class Function{
  		public List<String> params_types = new ArrayList<String>();
  		public String retType;
  		public String name;
  }
  private var functions = <String, Function>newHashMap();

  	@Check
	def checkGreetingStartsWithCapital(type_specifier tName) {
		println(tName.type_name_str);
		if(tName.type_name_str.equals("char")){
			error("NÃ£o pode char, cuzÃ£o!", AnsicPackage.Literals.TYPE_SPECIFIER__ATOMIC_TYPE_SPECIFIER);
		}
	}
	
	@Check
	def checkDeclarationTypes(declaration decl){
		var leftType =  decl.declaration_specifiers.get(0).type_specifier.type_name_str;
		var id = decl.init_declarator_list.get(0).init_declarator.declarator.direct_declarator.identifier;
		var rightType = decl.init_declarator_list.get(0).init_declarator.initializer.assignment_expression.conditional_expression.
							logical_or_expression.logical_and_expression.inclusive_or_expression.exclusive_or_expression.
							and_expression.equality_expression.relational_expression.shift_expression.additive_expression.
							multiplicative_expression.cast_expression.unary_expression.postfix_expression.primary_expression
		if(rightType.constant.f_constant == null && rightType.constant.enumz == null ){
			if(leftType == "char" || leftType == 'bool' || leftType == 'void'){
				println("entrou");
							error('Esse tipo não recebe valores numéricos', 
					AnsicPackage.Literals.DECLARATION__DECLARATION_SPECIFIERS);
			}
		}else if(rightType.constant.f_constant != null){
			if(leftType == "char" || leftType == 'bool' || leftType == 'void' || leftType == "int"){
				println("entrou");
							error('Esse tipo não recebe valores numéricos com ponto flutuante', 
					AnsicPackage.Literals.DECLARATION__INIT_DECLARATOR_LIST);
			}
		}
		if(rightType.string != null){
			
		}
		
		variables.put(id, leftType);
	}
	
	@Check
	def checkAtribType(assignment_expression asexp){		
		var idLeft = asexp.unary_expression.postfix_expression.primary_expression.identifier;
		if(asexp.assignment_expression != null){
			var idRight = asexp.assignment_expression.conditional_expression.
					logical_or_expression.logical_and_expression.inclusive_or_expression.exclusive_or_expression.
					and_expression.equality_expression.relational_expression.shift_expression.additive_expression.
					multiplicative_expression.cast_expression.unary_expression.postfix_expression.primary_expression.identifier;
			if(!variables.keySet.contains(idRight)){
				error('Variavel não declarada',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__ASSIGNMENT_EXPRESSION
				);
			}			
			var tr = variables.get(idRight);
			var tl = variables.get(idLeft);		
			if(tl == "int" && tr=="float"){
				error('Tipos incompativeis, De float para int',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}
			if(tl == "int" && tr=="double"){
				error('Tipos incompativeis, De double para int',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}
			if(tl == "short" && tr=="float"){
				error('Tipos incompativeis, De float para short',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}
			if(tl == "short" && tr=="double"){
				error('Tipos incompativeis, De double para short',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}
			if(tl == "long" && tr=="float"){
				error('Tipos incompativeis, De float para long',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}
			if(tl == "long" && tr=="double"){
				error('Tipos incompativeis, De double para long',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}
			if(tl == "int" && tr=="long"){
				error('Tipos incompativeis, De int para long',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}
			if(tl == "signed" && tr=="unsigned"){
				error('Tipos unsigned, De long para signed',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}
			if(tl == "unsigned" && tr=="signed"){
				error('Tipos incompativeis, De unsigned para signed',
					AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
				);
			}					
		}
		
		if(!variables.keySet.contains(idLeft)){
			error('Variavel não declarada',
				AnsicPackage.Literals.ASSIGNMENT_EXPRESSION__UNARY_EXPRESSION
			);
		}
	}
	
	@Check
	def checkFunctionDefinition(function_definition func_decl){
		//Não tem parametros
		var f = new Function();
		if(func_decl.declaration_list == null){
			f.retType = func_decl.declaration_specifiers.get(0).type_specifier.type_name_str;
			f.name = func_decl.declarator.direct_declarator.identifier.toString();
			functions.put(f.name, f);
		}else{
			f.retType = func_decl.declaration_specifiers.get(0).type_specifier.type_name_str;
			f.name = func_decl.declarator.direct_declarator.identifier.toString();
			println( "size:" + func_decl.declarator.direct_declarator.direct_declarator_linha.direct_declarator_complemento.parameter_type_list.parameter_list.get(0));
		}
			//var iterator = func_decl.declarator.direct_declarator.;		}
			
	}
	@Check
	def checkSwitch(selection_statement sel_stmt){
		var id = sel_stmt.expression.assignment_expression.assignment_expression.conditional_expression.
							logical_or_expression.logical_and_expression.inclusive_or_expression.exclusive_or_expression.
							and_expression.equality_expression.relational_expression.shift_expression.additive_expression.
							multiplicative_expression.cast_expression.unary_expression.postfix_expression.primary_expression.identifier;
		if(variables.keySet.contains(id)){
			error("Variavel não declarada", AnsicPackage.Literals.SELECTION_STATEMENT__EXPRESSION);
		}
		sel_stmt.statement.compound_statement;
	}
	
  
  //
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					AnsicPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
}
