/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AnsicGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.DomainModel");
		private final Assignment cGeetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGeetingsTranslation_unitParserRuleCall_0 = (RuleCall)cGeetingsAssignment.eContents().get(0);
		
		//DomainModel:
		//	geetings+=translation_unit;
		@Override public ParserRule getRule() { return rule; }
		
		//geetings+=translation_unit
		public Assignment getGeetingsAssignment() { return cGeetingsAssignment; }
		
		//translation_unit
		public RuleCall getGeetingsTranslation_unitParserRuleCall_0() { return cGeetingsTranslation_unitParserRuleCall_0; }
	}
	public class Primary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.primary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCONSTANTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRING_LITERALParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//primary_expression:
		//	IDENTIFIER
		//	| CONSTANT
		//	| STRING_LITERAL
		//	| '(' expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | CONSTANT | STRING_LITERAL | '(' expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//CONSTANT
		public RuleCall getCONSTANTParserRuleCall_1() { return cCONSTANTParserRuleCall_1; }
		
		//STRING_LITERAL
		public RuleCall getSTRING_LITERALParserRuleCall_2() { return cSTRING_LITERALParserRuleCall_2; }
		
		//'(' expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class Postfix_expressionLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.postfix_expressionL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cPostfix_expressionLParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cPostfix_expressionLParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cArgument_expression_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cPostfix_expressionLParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cPostfix_expressionLParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cPTR_OPTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cPostfix_expressionLParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cINC_OPTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final RuleCall cPostfix_expressionLParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cDEC_OPTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final RuleCall cPostfix_expressionLParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//postfix_expressionL:
		//	'[' expression ']' postfix_expressionL | '(' ')' postfix_expressionL
		//	| '(' argument_expression_list ')' postfix_expressionL | '.' IDENTIFIER postfix_expressionL
		//	| PTR_OP IDENTIFIER postfix_expressionL
		//	| INC_OP postfix_expressionL
		//	| (DEC_OP postfix_expressionL)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression ']' postfix_expressionL | '(' ')' postfix_expressionL | '(' argument_expression_list ')'
		//postfix_expressionL | '.' IDENTIFIER postfix_expressionL | PTR_OP IDENTIFIER postfix_expressionL | INC_OP
		//postfix_expressionL | (DEC_OP postfix_expressionL)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' expression ']' postfix_expressionL
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//postfix_expressionL
		public RuleCall getPostfix_expressionLParserRuleCall_0_3() { return cPostfix_expressionLParserRuleCall_0_3; }
		
		//'(' ')' postfix_expressionL
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
		
		//postfix_expressionL
		public RuleCall getPostfix_expressionLParserRuleCall_1_2() { return cPostfix_expressionLParserRuleCall_1_2; }
		
		//'(' argument_expression_list ')' postfix_expressionL
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//argument_expression_list
		public RuleCall getArgument_expression_listParserRuleCall_2_1() { return cArgument_expression_listParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//postfix_expressionL
		public RuleCall getPostfix_expressionLParserRuleCall_2_3() { return cPostfix_expressionLParserRuleCall_2_3; }
		
		//'.' IDENTIFIER postfix_expressionL
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_3_1() { return cIDENTIFIERParserRuleCall_3_1; }
		
		//postfix_expressionL
		public RuleCall getPostfix_expressionLParserRuleCall_3_2() { return cPostfix_expressionLParserRuleCall_3_2; }
		
		//PTR_OP IDENTIFIER postfix_expressionL
		public Group getGroup_4() { return cGroup_4; }
		
		//PTR_OP
		public RuleCall getPTR_OPTerminalRuleCall_4_0() { return cPTR_OPTerminalRuleCall_4_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_4_1() { return cIDENTIFIERParserRuleCall_4_1; }
		
		//postfix_expressionL
		public RuleCall getPostfix_expressionLParserRuleCall_4_2() { return cPostfix_expressionLParserRuleCall_4_2; }
		
		//INC_OP postfix_expressionL
		public Group getGroup_5() { return cGroup_5; }
		
		//INC_OP
		public RuleCall getINC_OPTerminalRuleCall_5_0() { return cINC_OPTerminalRuleCall_5_0; }
		
		//postfix_expressionL
		public RuleCall getPostfix_expressionLParserRuleCall_5_1() { return cPostfix_expressionLParserRuleCall_5_1; }
		
		//(DEC_OP postfix_expressionL)?
		public Group getGroup_6() { return cGroup_6; }
		
		//DEC_OP
		public RuleCall getDEC_OPTerminalRuleCall_6_0() { return cDEC_OPTerminalRuleCall_6_0; }
		
		//postfix_expressionL
		public RuleCall getPostfix_expressionLParserRuleCall_6_1() { return cPostfix_expressionLParserRuleCall_6_1; }
	}
	public class Postfix_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.postfix_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimary_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPostfix_expressionLParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//postfix_expression:
		//	primary_expression postfix_expressionL;
		@Override public ParserRule getRule() { return rule; }
		
		//primary_expression postfix_expressionL
		public Group getGroup() { return cGroup; }
		
		//primary_expression
		public RuleCall getPrimary_expressionParserRuleCall_0() { return cPrimary_expressionParserRuleCall_0; }
		
		//postfix_expressionL
		public RuleCall getPostfix_expressionLParserRuleCall_1() { return cPostfix_expressionLParserRuleCall_1; }
	}
	public class Argument_expression_listIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.argument_expression_listI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAssignment_expressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cArgument_expression_listIParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//argument_expression_listI:
		//	(',' assignment_expression argument_expression_listI)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(',' assignment_expression argument_expression_listI)?
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionParserRuleCall_1() { return cAssignment_expressionParserRuleCall_1; }
		
		//argument_expression_listI
		public RuleCall getArgument_expression_listIParserRuleCall_2() { return cArgument_expression_listIParserRuleCall_2; }
	}
	public class Argument_expression_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.argument_expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignment_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArgument_expression_listIParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//argument_expression_list:
		//	assignment_expression argument_expression_listI;
		@Override public ParserRule getRule() { return rule; }
		
		//assignment_expression argument_expression_listI
		public Group getGroup() { return cGroup; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionParserRuleCall_0() { return cAssignment_expressionParserRuleCall_0; }
		
		//argument_expression_listI
		public RuleCall getArgument_expression_listIParserRuleCall_1() { return cArgument_expression_listIParserRuleCall_1; }
	}
	public class Unary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.unary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfix_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINC_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cUnary_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cDEC_OPTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cUnary_expressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cUnary_operatorParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cCast_expressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cSIZEOFTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cUnary_expressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cSIZEOFTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cType_nameParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//unary_expression:
		//	postfix_expression
		//	| INC_OP unary_expression
		//	| DEC_OP unary_expression
		//	| unary_operator cast_expression
		//	| SIZEOF unary_expression
		//	| SIZEOF '(' type_name ')';
		@Override public ParserRule getRule() { return rule; }
		
		//postfix_expression | INC_OP unary_expression | DEC_OP unary_expression | unary_operator cast_expression | SIZEOF
		//unary_expression | SIZEOF '(' type_name ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//postfix_expression
		public RuleCall getPostfix_expressionParserRuleCall_0() { return cPostfix_expressionParserRuleCall_0; }
		
		//INC_OP unary_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//INC_OP
		public RuleCall getINC_OPTerminalRuleCall_1_0() { return cINC_OPTerminalRuleCall_1_0; }
		
		//unary_expression
		public RuleCall getUnary_expressionParserRuleCall_1_1() { return cUnary_expressionParserRuleCall_1_1; }
		
		//DEC_OP unary_expression
		public Group getGroup_2() { return cGroup_2; }
		
		//DEC_OP
		public RuleCall getDEC_OPTerminalRuleCall_2_0() { return cDEC_OPTerminalRuleCall_2_0; }
		
		//unary_expression
		public RuleCall getUnary_expressionParserRuleCall_2_1() { return cUnary_expressionParserRuleCall_2_1; }
		
		//unary_operator cast_expression
		public Group getGroup_3() { return cGroup_3; }
		
		//unary_operator
		public RuleCall getUnary_operatorParserRuleCall_3_0() { return cUnary_operatorParserRuleCall_3_0; }
		
		//cast_expression
		public RuleCall getCast_expressionParserRuleCall_3_1() { return cCast_expressionParserRuleCall_3_1; }
		
		//SIZEOF unary_expression
		public Group getGroup_4() { return cGroup_4; }
		
		//SIZEOF
		public RuleCall getSIZEOFTerminalRuleCall_4_0() { return cSIZEOFTerminalRuleCall_4_0; }
		
		//unary_expression
		public RuleCall getUnary_expressionParserRuleCall_4_1() { return cUnary_expressionParserRuleCall_4_1; }
		
		//SIZEOF '(' type_name ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//SIZEOF
		public RuleCall getSIZEOFTerminalRuleCall_5_0() { return cSIZEOFTerminalRuleCall_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//type_name
		public RuleCall getType_nameParserRuleCall_5_2() { return cType_nameParserRuleCall_5_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class Unary_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.unary_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTildeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//unary_operator:
		//	'&'
		//	| '*'
		//	| '+'
		//	| '-'
		//	| '~'
		//	| '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'&' | '*' | '+' | '-' | '~' | '!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//'~'
		public Keyword getTildeKeyword_4() { return cTildeKeyword_4; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_5() { return cExclamationMarkKeyword_5; }
	}
	public class Cast_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.cast_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnary_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cType_nameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cCast_expressionParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//cast_expression:
		//	unary_expression
		//	| '(' type_name ')' cast_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//unary_expression | '(' type_name ')' cast_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unary_expression
		public RuleCall getUnary_expressionParserRuleCall_0() { return cUnary_expressionParserRuleCall_0; }
		
		//'(' type_name ')' cast_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type_name
		public RuleCall getType_nameParserRuleCall_1_1() { return cType_nameParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//cast_expression
		public RuleCall getCast_expressionParserRuleCall_1_3() { return cCast_expressionParserRuleCall_1_3; }
	}
	public class Multiplicative_expressionIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.multiplicative_expressionI");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cCast_expressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cMultiplicative_expressionIParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCast_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicative_expressionIParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cCast_expressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cMultiplicative_expressionIParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//multiplicative_expressionI:
		//	'*' cast_expression multiplicative_expressionI
		//	| '/' cast_expression multiplicative_expressionI
		//	| ('%' cast_expression multiplicative_expressionI)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' cast_expression multiplicative_expressionI | '/' cast_expression multiplicative_expressionI | ('%' cast_expression
		//multiplicative_expressionI)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*' cast_expression multiplicative_expressionI
		public Group getGroup_0() { return cGroup_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }
		
		//cast_expression
		public RuleCall getCast_expressionParserRuleCall_0_1() { return cCast_expressionParserRuleCall_0_1; }
		
		//multiplicative_expressionI
		public RuleCall getMultiplicative_expressionIParserRuleCall_0_2() { return cMultiplicative_expressionIParserRuleCall_0_2; }
		
		//'/' cast_expression multiplicative_expressionI
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//cast_expression
		public RuleCall getCast_expressionParserRuleCall_1_1() { return cCast_expressionParserRuleCall_1_1; }
		
		//multiplicative_expressionI
		public RuleCall getMultiplicative_expressionIParserRuleCall_1_2() { return cMultiplicative_expressionIParserRuleCall_1_2; }
		
		//('%' cast_expression multiplicative_expressionI)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'%'
		public Keyword getPercentSignKeyword_2_0() { return cPercentSignKeyword_2_0; }
		
		//cast_expression
		public RuleCall getCast_expressionParserRuleCall_2_1() { return cCast_expressionParserRuleCall_2_1; }
		
		//multiplicative_expressionI
		public RuleCall getMultiplicative_expressionIParserRuleCall_2_2() { return cMultiplicative_expressionIParserRuleCall_2_2; }
	}
	public class Multiplicative_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.multiplicative_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCast_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMultiplicative_expressionIParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//multiplicative_expression:
		//	cast_expression multiplicative_expressionI;
		@Override public ParserRule getRule() { return rule; }
		
		//cast_expression multiplicative_expressionI
		public Group getGroup() { return cGroup; }
		
		//cast_expression
		public RuleCall getCast_expressionParserRuleCall_0() { return cCast_expressionParserRuleCall_0; }
		
		//multiplicative_expressionI
		public RuleCall getMultiplicative_expressionIParserRuleCall_1() { return cMultiplicative_expressionIParserRuleCall_1; }
	}
	public class Additive_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.additive_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicative_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cMultiplicative_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//additive_expression:
		//	multiplicative_expression (('+' | '-') multiplicative_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//multiplicative_expression (('+' | '-') multiplicative_expression)*
		public Group getGroup() { return cGroup; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionParserRuleCall_0() { return cMultiplicative_expressionParserRuleCall_0; }
		
		//(('+' | '-') multiplicative_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' | '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionParserRuleCall_1_1() { return cMultiplicative_expressionParserRuleCall_1_1; }
	}
	public class Shift_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.shift_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditive_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cLEFT_OPTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cRIGHT_OPTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cAdditive_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//shift_expression:
		//	additive_expression ((LEFT_OP | RIGHT_OP) additive_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//additive_expression ((LEFT_OP | RIGHT_OP) additive_expression)*
		public Group getGroup() { return cGroup; }
		
		//additive_expression
		public RuleCall getAdditive_expressionParserRuleCall_0() { return cAdditive_expressionParserRuleCall_0; }
		
		//((LEFT_OP | RIGHT_OP) additive_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(LEFT_OP | RIGHT_OP)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//LEFT_OP
		public RuleCall getLEFT_OPTerminalRuleCall_1_0_0() { return cLEFT_OPTerminalRuleCall_1_0_0; }
		
		//RIGHT_OP
		public RuleCall getRIGHT_OPTerminalRuleCall_1_0_1() { return cRIGHT_OPTerminalRuleCall_1_0_1; }
		
		//additive_expression
		public RuleCall getAdditive_expressionParserRuleCall_1_1() { return cAdditive_expressionParserRuleCall_1_1; }
	}
	public class Relational_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.relational_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShift_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cLE_OPTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cGE_OPTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cShift_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//relational_expression:
		//	shift_expression (('<' | '>' | LE_OP | GE_OP) shift_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//shift_expression (('<' | '>' | LE_OP | GE_OP) shift_expression)*
		public Group getGroup() { return cGroup; }
		
		//shift_expression
		public RuleCall getShift_expressionParserRuleCall_0() { return cShift_expressionParserRuleCall_0; }
		
		//(('<' | '>' | LE_OP | GE_OP) shift_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('<' | '>' | LE_OP | GE_OP)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0() { return cLessThanSignKeyword_1_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_1() { return cGreaterThanSignKeyword_1_0_1; }
		
		//LE_OP
		public RuleCall getLE_OPTerminalRuleCall_1_0_2() { return cLE_OPTerminalRuleCall_1_0_2; }
		
		//GE_OP
		public RuleCall getGE_OPTerminalRuleCall_1_0_3() { return cGE_OPTerminalRuleCall_1_0_3; }
		
		//shift_expression
		public RuleCall getShift_expressionParserRuleCall_1_1() { return cShift_expressionParserRuleCall_1_1; }
	}
	public class Equality_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.equality_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelational_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cEQ_OPTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cNE_OPTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cRelational_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//equality_expression:
		//	relational_expression ((EQ_OP | NE_OP) relational_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//relational_expression ((EQ_OP | NE_OP) relational_expression)*
		public Group getGroup() { return cGroup; }
		
		//relational_expression
		public RuleCall getRelational_expressionParserRuleCall_0() { return cRelational_expressionParserRuleCall_0; }
		
		//((EQ_OP | NE_OP) relational_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(EQ_OP | NE_OP)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//EQ_OP
		public RuleCall getEQ_OPTerminalRuleCall_1_0_0() { return cEQ_OPTerminalRuleCall_1_0_0; }
		
		//NE_OP
		public RuleCall getNE_OPTerminalRuleCall_1_0_1() { return cNE_OPTerminalRuleCall_1_0_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionParserRuleCall_1_1() { return cRelational_expressionParserRuleCall_1_1; }
	}
	public class And_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEquality_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEquality_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//and_expression:
		//	equality_expression ('&' equality_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//equality_expression ('&' equality_expression)*
		public Group getGroup() { return cGroup; }
		
		//equality_expression
		public RuleCall getEquality_expressionParserRuleCall_0() { return cEquality_expressionParserRuleCall_0; }
		
		//('&' equality_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }
		
		//equality_expression
		public RuleCall getEquality_expressionParserRuleCall_1_1() { return cEquality_expressionParserRuleCall_1_1; }
	}
	public class Exclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.exclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnd_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAnd_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//exclusive_or_expression:
		//	and_expression ('^' and_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//and_expression ('^' and_expression)*
		public Group getGroup() { return cGroup; }
		
		//and_expression
		public RuleCall getAnd_expressionParserRuleCall_0() { return cAnd_expressionParserRuleCall_0; }
		
		//('^' and_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }
		
		//and_expression
		public RuleCall getAnd_expressionParserRuleCall_1_1() { return cAnd_expressionParserRuleCall_1_1; }
	}
	public class Inclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.inclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExclusive_or_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExclusive_or_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//inclusive_or_expression:
		//	exclusive_or_expression ('|' exclusive_or_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exclusive_or_expression ('|' exclusive_or_expression)*
		public Group getGroup() { return cGroup; }
		
		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionParserRuleCall_0() { return cExclusive_or_expressionParserRuleCall_0; }
		
		//('|' exclusive_or_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionParserRuleCall_1_1() { return cExclusive_or_expressionParserRuleCall_1_1; }
	}
	public class Logical_and_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.logical_and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInclusive_or_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cAND_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cInclusive_or_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//logical_and_expression:
		//	inclusive_or_expression (AND_OP inclusive_or_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//inclusive_or_expression (AND_OP inclusive_or_expression)*
		public Group getGroup() { return cGroup; }
		
		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionParserRuleCall_0() { return cInclusive_or_expressionParserRuleCall_0; }
		
		//(AND_OP inclusive_or_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//AND_OP
		public RuleCall getAND_OPTerminalRuleCall_1_0() { return cAND_OPTerminalRuleCall_1_0; }
		
		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionParserRuleCall_1_1() { return cInclusive_or_expressionParserRuleCall_1_1; }
	}
	public class Logical_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.logical_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_and_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOR_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cLogical_and_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//logical_or_expression:
		//	logical_and_expression (OR_OP logical_and_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//logical_and_expression (OR_OP logical_and_expression)*
		public Group getGroup() { return cGroup; }
		
		//logical_and_expression
		public RuleCall getLogical_and_expressionParserRuleCall_0() { return cLogical_and_expressionParserRuleCall_0; }
		
		//(OR_OP logical_and_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//OR_OP
		public RuleCall getOR_OPTerminalRuleCall_1_0() { return cOR_OPTerminalRuleCall_1_0; }
		
		//logical_and_expression
		public RuleCall getLogical_and_expressionParserRuleCall_1_1() { return cLogical_and_expressionParserRuleCall_1_1; }
	}
	public class Conditional_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.conditional_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_or_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cConditional_expressionParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//conditional_expression:
		//	logical_or_expression ('?' expression ':' conditional_expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//logical_or_expression ('?' expression ':' conditional_expression)?
		public Group getGroup() { return cGroup; }
		
		//logical_or_expression
		public RuleCall getLogical_or_expressionParserRuleCall_0() { return cLogical_or_expressionParserRuleCall_0; }
		
		//('?' expression ':' conditional_expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//conditional_expression
		public RuleCall getConditional_expressionParserRuleCall_1_3() { return cConditional_expressionParserRuleCall_1_3; }
	}
	public class Assignment_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.assignment_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditional_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUnary_expressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cAssignment_operatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cAssignment_expressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//assignment_expression:
		//	conditional_expression
		//	| unary_expression assignment_operator assignment_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional_expression | unary_expression assignment_operator assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//conditional_expression
		public RuleCall getConditional_expressionParserRuleCall_0() { return cConditional_expressionParserRuleCall_0; }
		
		//unary_expression assignment_operator assignment_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//unary_expression
		public RuleCall getUnary_expressionParserRuleCall_1_0() { return cUnary_expressionParserRuleCall_1_0; }
		
		//assignment_operator
		public RuleCall getAssignment_operatorParserRuleCall_1_1() { return cAssignment_operatorParserRuleCall_1_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionParserRuleCall_1_2() { return cAssignment_expressionParserRuleCall_1_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignment_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAssignment_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expression:
		//	assignment_expression (',' assignment_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//assignment_expression (',' assignment_expression)*
		public Group getGroup() { return cGroup; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionParserRuleCall_0() { return cAssignment_expressionParserRuleCall_0; }
		
		//(',' assignment_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionParserRuleCall_1_1() { return cAssignment_expressionParserRuleCall_1_1; }
	}
	public class Assignment_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.assignment_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cMUL_ASSIGNTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDIV_ASSIGNTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMOD_ASSIGNTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cADD_ASSIGNTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSUB_ASSIGNTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLEFT_ASSIGNTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRIGHT_ASSIGNTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAND_ASSIGNTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXOR_ASSIGNTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cOR_ASSIGNTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//assignment_operator:
		//	'='
		//	| MUL_ASSIGN
		//	| DIV_ASSIGN
		//	| MOD_ASSIGN
		//	| ADD_ASSIGN
		//	| SUB_ASSIGN
		//	| LEFT_ASSIGN
		//	| RIGHT_ASSIGN
		//	| AND_ASSIGN
		//	| XOR_ASSIGN
		//	| OR_ASSIGN;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | MUL_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | ADD_ASSIGN | SUB_ASSIGN | LEFT_ASSIGN | RIGHT_ASSIGN | AND_ASSIGN |
		//XOR_ASSIGN | OR_ASSIGN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//MUL_ASSIGN
		public RuleCall getMUL_ASSIGNTerminalRuleCall_1() { return cMUL_ASSIGNTerminalRuleCall_1; }
		
		//DIV_ASSIGN
		public RuleCall getDIV_ASSIGNTerminalRuleCall_2() { return cDIV_ASSIGNTerminalRuleCall_2; }
		
		//MOD_ASSIGN
		public RuleCall getMOD_ASSIGNTerminalRuleCall_3() { return cMOD_ASSIGNTerminalRuleCall_3; }
		
		//ADD_ASSIGN
		public RuleCall getADD_ASSIGNTerminalRuleCall_4() { return cADD_ASSIGNTerminalRuleCall_4; }
		
		//SUB_ASSIGN
		public RuleCall getSUB_ASSIGNTerminalRuleCall_5() { return cSUB_ASSIGNTerminalRuleCall_5; }
		
		//LEFT_ASSIGN
		public RuleCall getLEFT_ASSIGNTerminalRuleCall_6() { return cLEFT_ASSIGNTerminalRuleCall_6; }
		
		//RIGHT_ASSIGN
		public RuleCall getRIGHT_ASSIGNTerminalRuleCall_7() { return cRIGHT_ASSIGNTerminalRuleCall_7; }
		
		//AND_ASSIGN
		public RuleCall getAND_ASSIGNTerminalRuleCall_8() { return cAND_ASSIGNTerminalRuleCall_8; }
		
		//XOR_ASSIGN
		public RuleCall getXOR_ASSIGNTerminalRuleCall_9() { return cXOR_ASSIGNTerminalRuleCall_9; }
		
		//OR_ASSIGN
		public RuleCall getOR_ASSIGNTerminalRuleCall_10() { return cOR_ASSIGNTerminalRuleCall_10; }
	}
	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.constant_expression");
		private final RuleCall cConditional_expressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//constant_expression:
		//	conditional_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional_expression
		public RuleCall getConditional_expressionParserRuleCall() { return cConditional_expressionParserRuleCall; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDeclaration_specifiersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cInit_declarator_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//declaration:
		//	declaration_specifiers init_declarator_list? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers init_declarator_list? ';'
		public Group getGroup() { return cGroup; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersParserRuleCall_0() { return cDeclaration_specifiersParserRuleCall_0; }
		
		//init_declarator_list?
		public RuleCall getInit_declarator_listParserRuleCall_1() { return cInit_declarator_listParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class Declaration_specifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.declaration_specifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cStorage_class_specifierParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cType_specifierParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cType_qualifierParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cDeclaration_specifiersParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//declaration_specifiers:
		//	storage_class_specifier declaration_specifiers?
		//	| type_specifier declaration_specifiers?
		//	| type_qualifier declaration_specifiers?;
		@Override public ParserRule getRule() { return rule; }
		
		//storage_class_specifier declaration_specifiers? | type_specifier declaration_specifiers? | type_qualifier
		//declaration_specifiers?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//storage_class_specifier declaration_specifiers?
		public Group getGroup_0() { return cGroup_0; }
		
		//storage_class_specifier
		public RuleCall getStorage_class_specifierParserRuleCall_0_0() { return cStorage_class_specifierParserRuleCall_0_0; }
		
		//declaration_specifiers?
		public RuleCall getDeclaration_specifiersParserRuleCall_0_1() { return cDeclaration_specifiersParserRuleCall_0_1; }
		
		//type_specifier declaration_specifiers?
		public Group getGroup_1() { return cGroup_1; }
		
		//type_specifier
		public RuleCall getType_specifierParserRuleCall_1_0() { return cType_specifierParserRuleCall_1_0; }
		
		//declaration_specifiers?
		public RuleCall getDeclaration_specifiersParserRuleCall_1_1() { return cDeclaration_specifiersParserRuleCall_1_1; }
		
		//type_qualifier declaration_specifiers?
		public Group getGroup_2() { return cGroup_2; }
		
		//type_qualifier
		public RuleCall getType_qualifierParserRuleCall_2_0() { return cType_qualifierParserRuleCall_2_0; }
		
		//declaration_specifiers?
		public RuleCall getDeclaration_specifiersParserRuleCall_2_1() { return cDeclaration_specifiersParserRuleCall_2_1; }
	}
	public class Init_declarator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.init_declarator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInit_declaratorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInit_declaratorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//init_declarator_list:
		//	init_declarator (',' init_declarator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//init_declarator (',' init_declarator)*
		public Group getGroup() { return cGroup; }
		
		//init_declarator
		public RuleCall getInit_declaratorParserRuleCall_0() { return cInit_declaratorParserRuleCall_0; }
		
		//(',' init_declarator)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//init_declarator
		public RuleCall getInit_declaratorParserRuleCall_1_1() { return cInit_declaratorParserRuleCall_1_1; }
	}
	public class Init_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.init_declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDeclaratorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInitializerParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//init_declarator:
		//	declarator ('=' initializer)*;
		@Override public ParserRule getRule() { return rule; }
		
		//declarator ('=' initializer)*
		public Group getGroup() { return cGroup; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_0() { return cDeclaratorParserRuleCall_0; }
		
		//('=' initializer)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//initializer
		public RuleCall getInitializerParserRuleCall_1_1() { return cInitializerParserRuleCall_1_1; }
	}
	public class Storage_class_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.storage_class_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTYPEDEFTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEXTERNTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTATICTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAUTOTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cREGISTERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//storage_class_specifier:
		//	TYPEDEF
		//	| EXTERN
		//	| STATIC
		//	| AUTO
		//	| REGISTER;
		@Override public ParserRule getRule() { return rule; }
		
		//TYPEDEF | EXTERN | STATIC | AUTO | REGISTER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TYPEDEF
		public RuleCall getTYPEDEFTerminalRuleCall_0() { return cTYPEDEFTerminalRuleCall_0; }
		
		//EXTERN
		public RuleCall getEXTERNTerminalRuleCall_1() { return cEXTERNTerminalRuleCall_1; }
		
		//STATIC
		public RuleCall getSTATICTerminalRuleCall_2() { return cSTATICTerminalRuleCall_2; }
		
		//AUTO
		public RuleCall getAUTOTerminalRuleCall_3() { return cAUTOTerminalRuleCall_3; }
		
		//REGISTER
		public RuleCall getREGISTERTerminalRuleCall_4() { return cREGISTERTerminalRuleCall_4; }
	}
	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVOIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cCharzKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cSHORTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLONGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFLOATTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDOUBLETerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSIGNEDTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cUNSIGNEDTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStruct_or_union_specifierParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEnum_specifierParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTYPE_NAMEEParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//type_specifier:
		//	VOID
		//	| 'charz'
		//	| SHORT
		//	| INT
		//	| LONG
		//	| FLOAT
		//	| DOUBLE
		//	| SIGNED
		//	| UNSIGNED
		//	| struct_or_union_specifier
		//	| enum_specifier
		//	| TYPE_NAMEE;
		@Override public ParserRule getRule() { return rule; }
		
		//VOID | 'charz' | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | struct_or_union_specifier | enum_specifier |
		//TYPE_NAMEE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VOID
		public RuleCall getVOIDTerminalRuleCall_0() { return cVOIDTerminalRuleCall_0; }
		
		//'charz'
		public Keyword getCharzKeyword_1() { return cCharzKeyword_1; }
		
		//SHORT
		public RuleCall getSHORTTerminalRuleCall_2() { return cSHORTTerminalRuleCall_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//LONG
		public RuleCall getLONGTerminalRuleCall_4() { return cLONGTerminalRuleCall_4; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_5() { return cFLOATTerminalRuleCall_5; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_6() { return cDOUBLETerminalRuleCall_6; }
		
		//SIGNED
		public RuleCall getSIGNEDTerminalRuleCall_7() { return cSIGNEDTerminalRuleCall_7; }
		
		//UNSIGNED
		public RuleCall getUNSIGNEDTerminalRuleCall_8() { return cUNSIGNEDTerminalRuleCall_8; }
		
		//struct_or_union_specifier
		public RuleCall getStruct_or_union_specifierParserRuleCall_9() { return cStruct_or_union_specifierParserRuleCall_9; }
		
		//enum_specifier
		public RuleCall getEnum_specifierParserRuleCall_10() { return cEnum_specifierParserRuleCall_10; }
		
		//TYPE_NAMEE
		public RuleCall getTYPE_NAMEEParserRuleCall_11() { return cTYPE_NAMEEParserRuleCall_11; }
	}
	public class Struct_or_union_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.struct_or_union_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cStruct_or_unionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cStruct_declaration_listParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cStruct_or_unionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cStruct_declaration_listParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cStruct_or_unionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//struct_or_union_specifier:
		//	struct_or_union IDENTIFIER '{' struct_declaration_list '}'
		//	| struct_or_union '{' struct_declaration_list '}'
		//	| struct_or_union IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_or_union IDENTIFIER '{' struct_declaration_list '}' | struct_or_union '{' struct_declaration_list '}' |
		//struct_or_union IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//struct_or_union IDENTIFIER '{' struct_declaration_list '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionParserRuleCall_0_0() { return cStruct_or_unionParserRuleCall_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0_1() { return cIDENTIFIERParserRuleCall_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//struct_declaration_list
		public RuleCall getStruct_declaration_listParserRuleCall_0_3() { return cStruct_declaration_listParserRuleCall_0_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//struct_or_union '{' struct_declaration_list '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionParserRuleCall_1_0() { return cStruct_or_unionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//struct_declaration_list
		public RuleCall getStruct_declaration_listParserRuleCall_1_2() { return cStruct_declaration_listParserRuleCall_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//struct_or_union IDENTIFIER
		public Group getGroup_2() { return cGroup_2; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionParserRuleCall_2_0() { return cStruct_or_unionParserRuleCall_2_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_2_1() { return cIDENTIFIERParserRuleCall_2_1; }
	}
	public class Struct_or_unionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.struct_or_union");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRUCTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNIONTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//struct_or_union:
		//	STRUCT
		//	| UNION;
		@Override public ParserRule getRule() { return rule; }
		
		//STRUCT | UNION
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRUCT
		public RuleCall getSTRUCTTerminalRuleCall_0() { return cSTRUCTTerminalRuleCall_0; }
		
		//UNION
		public RuleCall getUNIONTerminalRuleCall_1() { return cUNIONTerminalRuleCall_1; }
	}
	public class Struct_declaration_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.struct_declaration_list");
		private final RuleCall cStruct_declarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//struct_declaration_list:
		//	struct_declaration+;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_declaration+
		public RuleCall getStruct_declarationParserRuleCall() { return cStruct_declarationParserRuleCall; }
	}
	public class Struct_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.struct_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSpecifier_qualifier_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStruct_declarator_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//struct_declaration:
		//	specifier_qualifier_list struct_declarator_list ';';
		@Override public ParserRule getRule() { return rule; }
		
		//specifier_qualifier_list struct_declarator_list ';'
		public Group getGroup() { return cGroup; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listParserRuleCall_0() { return cSpecifier_qualifier_listParserRuleCall_0; }
		
		//struct_declarator_list
		public RuleCall getStruct_declarator_listParserRuleCall_1() { return cStruct_declarator_listParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class Specifier_qualifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.specifier_qualifier_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cType_specifierParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cType_specifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cType_qualifierParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cType_qualifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//specifier_qualifier_list:
		//	type_specifier specifier_qualifier_list
		//	| type_specifier
		//	| type_qualifier specifier_qualifier_list
		//	| type_qualifier;
		@Override public ParserRule getRule() { return rule; }
		
		//type_specifier specifier_qualifier_list | type_specifier | type_qualifier specifier_qualifier_list | type_qualifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type_specifier specifier_qualifier_list
		public Group getGroup_0() { return cGroup_0; }
		
		//type_specifier
		public RuleCall getType_specifierParserRuleCall_0_0() { return cType_specifierParserRuleCall_0_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listParserRuleCall_0_1() { return cSpecifier_qualifier_listParserRuleCall_0_1; }
		
		//type_specifier
		public RuleCall getType_specifierParserRuleCall_1() { return cType_specifierParserRuleCall_1; }
		
		//type_qualifier specifier_qualifier_list
		public Group getGroup_2() { return cGroup_2; }
		
		//type_qualifier
		public RuleCall getType_qualifierParserRuleCall_2_0() { return cType_qualifierParserRuleCall_2_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listParserRuleCall_2_1() { return cSpecifier_qualifier_listParserRuleCall_2_1; }
		
		//type_qualifier
		public RuleCall getType_qualifierParserRuleCall_3() { return cType_qualifierParserRuleCall_3; }
	}
	public class Struct_declarator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.struct_declarator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStruct_declaratorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cStruct_declaratorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//struct_declarator_list:
		//	struct_declarator (',' struct_declarator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_declarator (',' struct_declarator)*
		public Group getGroup() { return cGroup; }
		
		//struct_declarator
		public RuleCall getStruct_declaratorParserRuleCall_0() { return cStruct_declaratorParserRuleCall_0; }
		
		//(',' struct_declarator)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//struct_declarator
		public RuleCall getStruct_declaratorParserRuleCall_1_1() { return cStruct_declaratorParserRuleCall_1_1; }
	}
	public class Struct_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.struct_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cDeclaratorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cConstant_expressionParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//struct_declarator:
		//	declarator
		//	| ':' constant_expression
		//	| declarator ':' constant_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//declarator | ':' constant_expression | declarator ':' constant_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_0() { return cDeclaratorParserRuleCall_0; }
		
		//':' constant_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_1_1() { return cConstant_expressionParserRuleCall_1_1; }
		
		//declarator ':' constant_expression
		public Group getGroup_2() { return cGroup_2; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_2_0() { return cDeclaratorParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_2_2() { return cConstant_expressionParserRuleCall_2_2; }
	}
	public class Enum_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.enum_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cENUMTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cEnumerator_listParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cENUMTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cEnumerator_listParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cENUMTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//enum_specifier:
		//	ENUM '{' enumerator_list '}'
		//	| ENUM IDENTIFIER '{' enumerator_list '}'
		//	| ENUM IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENUM '{' enumerator_list '}' | ENUM IDENTIFIER '{' enumerator_list '}' | ENUM IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ENUM '{' enumerator_list '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//ENUM
		public RuleCall getENUMTerminalRuleCall_0_0() { return cENUMTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//enumerator_list
		public RuleCall getEnumerator_listParserRuleCall_0_2() { return cEnumerator_listParserRuleCall_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//ENUM IDENTIFIER '{' enumerator_list '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//ENUM
		public RuleCall getENUMTerminalRuleCall_1_0() { return cENUMTerminalRuleCall_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_1_1() { return cIDENTIFIERParserRuleCall_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//enumerator_list
		public RuleCall getEnumerator_listParserRuleCall_1_3() { return cEnumerator_listParserRuleCall_1_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
		
		//ENUM IDENTIFIER
		public Group getGroup_2() { return cGroup_2; }
		
		//ENUM
		public RuleCall getENUMTerminalRuleCall_2_0() { return cENUMTerminalRuleCall_2_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_2_1() { return cIDENTIFIERParserRuleCall_2_1; }
	}
	public class Enumerator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.enumerator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEnumeratorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEnumeratorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//enumerator_list:
		//	enumerator (',' enumerator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//enumerator (',' enumerator)*
		public Group getGroup() { return cGroup; }
		
		//enumerator
		public RuleCall getEnumeratorParserRuleCall_0() { return cEnumeratorParserRuleCall_0; }
		
		//(',' enumerator)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//enumerator
		public RuleCall getEnumeratorParserRuleCall_1_1() { return cEnumeratorParserRuleCall_1_1; }
	}
	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.enumerator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cConstant_expressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//enumerator:
		//	IDENTIFIER
		//	| IDENTIFIER '=' constant_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | IDENTIFIER '=' constant_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//IDENTIFIER '=' constant_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_1_0() { return cIDENTIFIERParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_1_2() { return cConstant_expressionParserRuleCall_1_2; }
	}
	public class Type_qualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.type_qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCONSTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVOLATILETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//type_qualifier:
		//	CONST
		//	| VOLATILE;
		@Override public ParserRule getRule() { return rule; }
		
		//CONST | VOLATILE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CONST
		public RuleCall getCONSTTerminalRuleCall_0() { return cCONSTTerminalRuleCall_0; }
		
		//VOLATILE
		public RuleCall getVOLATILETerminalRuleCall_1() { return cVOLATILETerminalRuleCall_1; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPointerParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDirect_declaratorParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cDirect_declaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//declarator:
		//	pointer direct_declarator
		//	| direct_declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//pointer direct_declarator | direct_declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pointer direct_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//pointer
		public RuleCall getPointerParserRuleCall_0_0() { return cPointerParserRuleCall_0_0; }
		
		//direct_declarator
		public RuleCall getDirect_declaratorParserRuleCall_0_1() { return cDirect_declaratorParserRuleCall_0_1; }
		
		//direct_declarator
		public RuleCall getDirect_declaratorParserRuleCall_1() { return cDirect_declaratorParserRuleCall_1; }
	}
	public class Direct_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.direct_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDirect_declaratorIParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaratorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cDirect_declaratorIParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//direct_declarator:
		//	IDENTIFIER direct_declaratorI
		//	| '(' declarator ')' direct_declaratorI;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER direct_declaratorI | '(' declarator ')' direct_declaratorI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER direct_declaratorI
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0_0() { return cIDENTIFIERParserRuleCall_0_0; }
		
		//direct_declaratorI
		public RuleCall getDirect_declaratorIParserRuleCall_0_1() { return cDirect_declaratorIParserRuleCall_0_1; }
		
		//'(' declarator ')' direct_declaratorI
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_1_1() { return cDeclaratorParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//direct_declaratorI
		public RuleCall getDirect_declaratorIParserRuleCall_1_3() { return cDirect_declaratorIParserRuleCall_1_3; }
	}
	public class Direct_declaratorIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.direct_declaratorI");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cDirect_declaratorIParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cDirect_declaratorIParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cParameter_type_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cDirect_declaratorIParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIdentifier_listParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cDirect_declaratorIParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cDirect_declaratorIParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//direct_declaratorI:
		//	'[' constant_expression ']' direct_declaratorI
		//	| '[' ']' direct_declaratorI
		//	| '(' parameter_type_list ')' direct_declaratorI
		//	| '(' identifier_list ')' direct_declaratorI
		//	| ('(' ')' direct_declaratorI)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' constant_expression ']' direct_declaratorI | '[' ']' direct_declaratorI | '(' parameter_type_list ')'
		//direct_declaratorI | '(' identifier_list ')' direct_declaratorI | ('(' ')' direct_declaratorI)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' constant_expression ']' direct_declaratorI
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_0_1() { return cConstant_expressionParserRuleCall_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//direct_declaratorI
		public RuleCall getDirect_declaratorIParserRuleCall_0_3() { return cDirect_declaratorIParserRuleCall_0_3; }
		
		//'[' ']' direct_declaratorI
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
		
		//direct_declaratorI
		public RuleCall getDirect_declaratorIParserRuleCall_1_2() { return cDirect_declaratorIParserRuleCall_1_2; }
		
		//'(' parameter_type_list ')' direct_declaratorI
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParserRuleCall_2_1() { return cParameter_type_listParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//direct_declaratorI
		public RuleCall getDirect_declaratorIParserRuleCall_2_3() { return cDirect_declaratorIParserRuleCall_2_3; }
		
		//'(' identifier_list ')' direct_declaratorI
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//identifier_list
		public RuleCall getIdentifier_listParserRuleCall_3_1() { return cIdentifier_listParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//direct_declaratorI
		public RuleCall getDirect_declaratorIParserRuleCall_3_3() { return cDirect_declaratorIParserRuleCall_3_3; }
		
		//('(' ')' direct_declaratorI)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_1() { return cRightParenthesisKeyword_4_1; }
		
		//direct_declaratorI
		public RuleCall getDirect_declaratorIParserRuleCall_4_2() { return cDirect_declaratorIParserRuleCall_4_2; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.pointer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cType_qualifier_listParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cPointerParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAsteriskKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cType_qualifier_listParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cPointerParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//pointer:
		//	'*'
		//	| '*' type_qualifier_list
		//	| '*' pointer
		//	| '*' type_qualifier_list pointer;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '*' type_qualifier_list | '*' pointer | '*' type_qualifier_list pointer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'*' type_qualifier_list
		public Group getGroup_1() { return cGroup_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0() { return cAsteriskKeyword_1_0; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listParserRuleCall_1_1() { return cType_qualifier_listParserRuleCall_1_1; }
		
		//'*' pointer
		public Group getGroup_2() { return cGroup_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//pointer
		public RuleCall getPointerParserRuleCall_2_1() { return cPointerParserRuleCall_2_1; }
		
		//'*' type_qualifier_list pointer
		public Group getGroup_3() { return cGroup_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_0() { return cAsteriskKeyword_3_0; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listParserRuleCall_3_1() { return cType_qualifier_listParserRuleCall_3_1; }
		
		//pointer
		public RuleCall getPointerParserRuleCall_3_2() { return cPointerParserRuleCall_3_2; }
	}
	public class Type_qualifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.type_qualifier_list");
		private final RuleCall cType_qualifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//type_qualifier_list:
		//	type_qualifier+;
		@Override public ParserRule getRule() { return rule; }
		
		//type_qualifier+
		public RuleCall getType_qualifierParserRuleCall() { return cType_qualifierParserRuleCall; }
	}
	public class Parameter_type_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.parameter_type_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameter_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cELLIPSISTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//parameter_type_list:
		//	parameter_list (',' ELLIPSIS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter_list (',' ELLIPSIS)*
		public Group getGroup() { return cGroup; }
		
		//parameter_list
		public RuleCall getParameter_listParserRuleCall_0() { return cParameter_listParserRuleCall_0; }
		
		//(',' ELLIPSIS)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ELLIPSIS
		public RuleCall getELLIPSISTerminalRuleCall_1_1() { return cELLIPSISTerminalRuleCall_1_1; }
	}
	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameter_declarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cParameter_declarationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//parameter_list:
		//	parameter_declaration (',' parameter_declaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter_declaration (',' parameter_declaration)*
		public Group getGroup() { return cGroup; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationParserRuleCall_0() { return cParameter_declarationParserRuleCall_0; }
		
		//(',' parameter_declaration)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationParserRuleCall_1_1() { return cParameter_declarationParserRuleCall_1_1; }
	}
	public class Parameter_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.parameter_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaration_specifiersParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaratorParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDeclaration_specifiersParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cAbstract_declaratorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaration_specifiersParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//parameter_declaration:
		//	declaration_specifiers declarator
		//	| declaration_specifiers abstract_declarator
		//	| declaration_specifiers;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers declarator | declaration_specifiers abstract_declarator | declaration_specifiers
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration_specifiers declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersParserRuleCall_0_0() { return cDeclaration_specifiersParserRuleCall_0_0; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_0_1() { return cDeclaratorParserRuleCall_0_1; }
		
		//declaration_specifiers abstract_declarator
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersParserRuleCall_1_0() { return cDeclaration_specifiersParserRuleCall_1_0; }
		
		//abstract_declarator
		public RuleCall getAbstract_declaratorParserRuleCall_1_1() { return cAbstract_declaratorParserRuleCall_1_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersParserRuleCall_2() { return cDeclaration_specifiersParserRuleCall_2; }
	}
	public class Identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//identifier_list:
		//	IDENTIFIER (',' IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER (',' IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//(',' IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_1_1() { return cIDENTIFIERParserRuleCall_1_1; }
	}
	public class Type_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.type_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSpecifier_qualifier_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAbstract_declaratorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//type_name:
		//	specifier_qualifier_list abstract_declarator?;
		@Override public ParserRule getRule() { return rule; }
		
		//specifier_qualifier_list abstract_declarator?
		public Group getGroup() { return cGroup; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listParserRuleCall_0() { return cSpecifier_qualifier_listParserRuleCall_0; }
		
		//abstract_declarator?
		public RuleCall getAbstract_declaratorParserRuleCall_1() { return cAbstract_declaratorParserRuleCall_1; }
	}
	public class Abstract_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.abstract_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirect_abstract_declaratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPointerParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cDirect_abstract_declaratorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//abstract_declarator:
		//	direct_abstract_declarator
		//	| pointer direct_abstract_declarator?;
		@Override public ParserRule getRule() { return rule; }
		
		//direct_abstract_declarator | pointer direct_abstract_declarator?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//direct_abstract_declarator
		public RuleCall getDirect_abstract_declaratorParserRuleCall_0() { return cDirect_abstract_declaratorParserRuleCall_0; }
		
		//pointer direct_abstract_declarator?
		public Group getGroup_1() { return cGroup_1; }
		
		//pointer
		public RuleCall getPointerParserRuleCall_1_0() { return cPointerParserRuleCall_1_0; }
		
		//direct_abstract_declarator?
		public RuleCall getDirect_abstract_declaratorParserRuleCall_1_1() { return cDirect_abstract_declaratorParserRuleCall_1_1; }
	}
	public class Direct_abstract_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.direct_abstract_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cAbstract_declaratorParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cParameter_type_listParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		
		//direct_abstract_declarator:
		//	'(' abstract_declarator ')' direct_abstract_declaratorI
		//	| '[' ']' direct_abstract_declaratorI
		//	| '[' constant_expression ']' direct_abstract_declaratorI
		//	| '(' ')' direct_abstract_declaratorI
		//	| '(' parameter_type_list ')' direct_abstract_declaratorI;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' abstract_declarator ')' direct_abstract_declaratorI | '[' ']' direct_abstract_declaratorI | '[' constant_expression
		//']' direct_abstract_declaratorI | '(' ')' direct_abstract_declaratorI | '(' parameter_type_list ')'
		//direct_abstract_declaratorI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' abstract_declarator ')' direct_abstract_declaratorI
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//abstract_declarator
		public RuleCall getAbstract_declaratorParserRuleCall_0_1() { return cAbstract_declaratorParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_0_3() { return cDirect_abstract_declaratorIParserRuleCall_0_3; }
		
		//'[' ']' direct_abstract_declaratorI
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_1_2() { return cDirect_abstract_declaratorIParserRuleCall_1_2; }
		
		//'[' constant_expression ']' direct_abstract_declaratorI
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_2_1() { return cConstant_expressionParserRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_2_3() { return cDirect_abstract_declaratorIParserRuleCall_2_3; }
		
		//'(' ')' direct_abstract_declaratorI
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1() { return cRightParenthesisKeyword_3_1; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_3_2() { return cDirect_abstract_declaratorIParserRuleCall_3_2; }
		
		//'(' parameter_type_list ')' direct_abstract_declaratorI
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParserRuleCall_4_1() { return cParameter_type_listParserRuleCall_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_4_3() { return cDirect_abstract_declaratorIParserRuleCall_4_3; }
	}
	public class Direct_abstract_declaratorIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.direct_abstract_declaratorI");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cParameter_type_listParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cDirect_abstract_declaratorIParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//direct_abstract_declaratorI:
		//	'[' ']' direct_abstract_declaratorI
		//	| '[' constant_expression ']' direct_abstract_declaratorI
		//	| '(' ')' direct_abstract_declaratorI
		//	| '(' parameter_type_list ')' direct_abstract_declaratorI;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ']' direct_abstract_declaratorI | '[' constant_expression ']' direct_abstract_declaratorI | '(' ')'
		//direct_abstract_declaratorI | '(' parameter_type_list ')' direct_abstract_declaratorI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' ']' direct_abstract_declaratorI
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_0_2() { return cDirect_abstract_declaratorIParserRuleCall_0_2; }
		
		//'[' constant_expression ']' direct_abstract_declaratorI
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_1_1() { return cConstant_expressionParserRuleCall_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_1_3() { return cDirect_abstract_declaratorIParserRuleCall_1_3; }
		
		//'(' ')' direct_abstract_declaratorI
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1() { return cRightParenthesisKeyword_2_1; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_2_2() { return cDirect_abstract_declaratorIParserRuleCall_2_2; }
		
		//'(' parameter_type_list ')' direct_abstract_declaratorI
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParserRuleCall_3_1() { return cParameter_type_listParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//direct_abstract_declaratorI
		public RuleCall getDirect_abstract_declaratorIParserRuleCall_3_3() { return cDirect_abstract_declaratorIParserRuleCall_3_3; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignment_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInitializer_listParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cInitializer_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//initializer:
		//	assignment_expression
		//	| '{' initializer_list '}'
		//	| '{' initializer_list ',' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//assignment_expression | '{' initializer_list '}' | '{' initializer_list ',' '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionParserRuleCall_0() { return cAssignment_expressionParserRuleCall_0; }
		
		//'{' initializer_list '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//initializer_list
		public RuleCall getInitializer_listParserRuleCall_1_1() { return cInitializer_listParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
		
		//'{' initializer_list ',' '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//initializer_list
		public RuleCall getInitializer_listParserRuleCall_2_1() { return cInitializer_listParserRuleCall_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}
	public class Initializer_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.initializer_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInitializerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInitializerParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//initializer_list:
		//	initializer (',' initializer)*;
		@Override public ParserRule getRule() { return rule; }
		
		//initializer (',' initializer)*
		public Group getGroup() { return cGroup; }
		
		//initializer
		public RuleCall getInitializerParserRuleCall_0() { return cInitializerParserRuleCall_0; }
		
		//(',' initializer)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//initializer
		public RuleCall getInitializerParserRuleCall_1_1() { return cInitializerParserRuleCall_1_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabeled_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompound_statementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpression_statementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelection_statementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIteration_statementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJump_statementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//statement:
		//	labeled_statement
		//	| compound_statement
		//	| expression_statement
		//	| selection_statement
		//	| iteration_statement
		//	| jump_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement |
		//jump_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//labeled_statement
		public RuleCall getLabeled_statementParserRuleCall_0() { return cLabeled_statementParserRuleCall_0; }
		
		//compound_statement
		public RuleCall getCompound_statementParserRuleCall_1() { return cCompound_statementParserRuleCall_1; }
		
		//expression_statement
		public RuleCall getExpression_statementParserRuleCall_2() { return cExpression_statementParserRuleCall_2; }
		
		//selection_statement
		public RuleCall getSelection_statementParserRuleCall_3() { return cSelection_statementParserRuleCall_3; }
		
		//iteration_statement
		public RuleCall getIteration_statementParserRuleCall_4() { return cIteration_statementParserRuleCall_4; }
		
		//jump_statement
		public RuleCall getJump_statementParserRuleCall_5() { return cJump_statementParserRuleCall_5; }
	}
	public class Labeled_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.labeled_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCASETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cDEFAULTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//labeled_statement:
		//	IDENTIFIER ':' statement
		//	| CASE constant_expression ':' statement
		//	| DEFAULT ':' statement;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER ':' statement | CASE constant_expression ':' statement | DEFAULT ':' statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER ':' statement
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0_0() { return cIDENTIFIERParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//statement
		public RuleCall getStatementParserRuleCall_0_2() { return cStatementParserRuleCall_0_2; }
		
		//CASE constant_expression ':' statement
		public Group getGroup_1() { return cGroup_1; }
		
		//CASE
		public RuleCall getCASETerminalRuleCall_1_0() { return cCASETerminalRuleCall_1_0; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_1_1() { return cConstant_expressionParserRuleCall_1_1; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//statement
		public RuleCall getStatementParserRuleCall_1_3() { return cStatementParserRuleCall_1_3; }
		
		//DEFAULT ':' statement
		public Group getGroup_2() { return cGroup_2; }
		
		//DEFAULT
		public RuleCall getDEFAULTTerminalRuleCall_2_0() { return cDEFAULTTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//statement
		public RuleCall getStatementParserRuleCall_2_2() { return cStatementParserRuleCall_2_2; }
	}
	public class Compound_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.compound_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cStatement_listParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDeclaration_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cDeclaration_listParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cStatement_listParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//compound_statement:
		//	'{' '}'
		//	| '{' statement_list '}'
		//	| '{' declaration_list '}'
		//	| '{' declaration_list statement_list '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' '}' | '{' statement_list '}' | '{' declaration_list '}' | '{' declaration_list statement_list '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_1() { return cRightCurlyBracketKeyword_0_1; }
		
		//'{' statement_list '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//statement_list
		public RuleCall getStatement_listParserRuleCall_1_1() { return cStatement_listParserRuleCall_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
		
		//'{' declaration_list '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//declaration_list
		public RuleCall getDeclaration_listParserRuleCall_2_1() { return cDeclaration_listParserRuleCall_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
		
		//'{' declaration_list statement_list '}'
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//declaration_list
		public RuleCall getDeclaration_listParserRuleCall_3_1() { return cDeclaration_listParserRuleCall_3_1; }
		
		//statement_list
		public RuleCall getStatement_listParserRuleCall_3_2() { return cStatement_listParserRuleCall_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class Declaration_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.declaration_list");
		private final RuleCall cDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//declaration_list:
		//	declaration+;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration+
		public RuleCall getDeclarationParserRuleCall() { return cDeclarationParserRuleCall; }
	}
	public class Statement_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.statement_list");
		private final RuleCall cStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//statement_list:
		//	statement+;
		@Override public ParserRule getRule() { return rule; }
		
		//statement+
		public RuleCall getStatementParserRuleCall() { return cStatementParserRuleCall; }
	}
	public class Expression_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.expression_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//expression_statement:
		//	';'
		//	| expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//expression ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class Selection_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.selection_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIFTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIFTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final RuleCall cELSETerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final RuleCall cStatementParserRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSWITCHTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		
		//selection_statement:
		//	IF '(' expression ')' statement
		//	| IF '(' expression ')' statement ELSE statement
		//	| SWITCH '(' expression ')' statement;
		@Override public ParserRule getRule() { return rule; }
		
		//IF '(' expression ')' statement | IF '(' expression ')' statement ELSE statement | SWITCH '(' expression ')' statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IF '(' expression ')' statement
		public Group getGroup_0() { return cGroup_0; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_0_0() { return cIFTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_2() { return cExpressionParserRuleCall_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//statement
		public RuleCall getStatementParserRuleCall_0_4() { return cStatementParserRuleCall_0_4; }
		
		//IF '(' expression ')' statement ELSE statement
		public Group getGroup_1() { return cGroup_1; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_1_0() { return cIFTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_2() { return cExpressionParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//statement
		public RuleCall getStatementParserRuleCall_1_4() { return cStatementParserRuleCall_1_4; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_1_5() { return cELSETerminalRuleCall_1_5; }
		
		//statement
		public RuleCall getStatementParserRuleCall_1_6() { return cStatementParserRuleCall_1_6; }
		
		//SWITCH '(' expression ')' statement
		public Group getGroup_2() { return cGroup_2; }
		
		//SWITCH
		public RuleCall getSWITCHTerminalRuleCall_2_0() { return cSWITCHTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2_2() { return cExpressionParserRuleCall_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//statement
		public RuleCall getStatementParserRuleCall_2_4() { return cStatementParserRuleCall_2_4; }
	}
	public class Iteration_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.iteration_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cWHILETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cStatementParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDOTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cWHILETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cFORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cExpression_statementParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cExpression_statementParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cStatementParserRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cFORTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cExpression_statementParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cExpression_statementParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final RuleCall cStatementParserRuleCall_3_6 = (RuleCall)cGroup_3.eContents().get(6);
		
		//iteration_statement:
		//	WHILE '(' expression ')' statement
		//	| DO statement WHILE '(' expression ')' ';'
		//	| FOR '(' expression_statement expression_statement ')' statement
		//	| FOR '(' expression_statement expression_statement expression ')' statement;
		@Override public ParserRule getRule() { return rule; }
		
		//WHILE '(' expression ')' statement | DO statement WHILE '(' expression ')' ';' | FOR '(' expression_statement
		//expression_statement ')' statement | FOR '(' expression_statement expression_statement expression ')' statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WHILE '(' expression ')' statement
		public Group getGroup_0() { return cGroup_0; }
		
		//WHILE
		public RuleCall getWHILETerminalRuleCall_0_0() { return cWHILETerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_2() { return cExpressionParserRuleCall_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//statement
		public RuleCall getStatementParserRuleCall_0_4() { return cStatementParserRuleCall_0_4; }
		
		//DO statement WHILE '(' expression ')' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//DO
		public RuleCall getDOTerminalRuleCall_1_0() { return cDOTerminalRuleCall_1_0; }
		
		//statement
		public RuleCall getStatementParserRuleCall_1_1() { return cStatementParserRuleCall_1_1; }
		
		//WHILE
		public RuleCall getWHILETerminalRuleCall_1_2() { return cWHILETerminalRuleCall_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_4() { return cExpressionParserRuleCall_1_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//FOR '(' expression_statement expression_statement ')' statement
		public Group getGroup_2() { return cGroup_2; }
		
		//FOR
		public RuleCall getFORTerminalRuleCall_2_0() { return cFORTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression_statement
		public RuleCall getExpression_statementParserRuleCall_2_2() { return cExpression_statementParserRuleCall_2_2; }
		
		//expression_statement
		public RuleCall getExpression_statementParserRuleCall_2_3() { return cExpression_statementParserRuleCall_2_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//statement
		public RuleCall getStatementParserRuleCall_2_5() { return cStatementParserRuleCall_2_5; }
		
		//FOR '(' expression_statement expression_statement expression ')' statement
		public Group getGroup_3() { return cGroup_3; }
		
		//FOR
		public RuleCall getFORTerminalRuleCall_3_0() { return cFORTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//expression_statement
		public RuleCall getExpression_statementParserRuleCall_3_2() { return cExpression_statementParserRuleCall_3_2; }
		
		//expression_statement
		public RuleCall getExpression_statementParserRuleCall_3_3() { return cExpression_statementParserRuleCall_3_3; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_3_4() { return cExpressionParserRuleCall_3_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
		
		//statement
		public RuleCall getStatementParserRuleCall_3_6() { return cStatementParserRuleCall_3_6; }
	}
	public class Jump_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.jump_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cGOTOTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCONTINUETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cBREAKTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cRETURNOTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cRETURNOTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//jump_statement:
		//	GOTO IDENTIFIER ';'
		//	| CONTINUE ';'
		//	| BREAK ';'
		//	| RETURNO ';'
		//	| RETURNO expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//GOTO IDENTIFIER ';' | CONTINUE ';' | BREAK ';' | RETURNO ';' | RETURNO expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GOTO IDENTIFIER ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//GOTO
		public RuleCall getGOTOTerminalRuleCall_0_0() { return cGOTOTerminalRuleCall_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0_1() { return cIDENTIFIERParserRuleCall_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//CONTINUE ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//CONTINUE
		public RuleCall getCONTINUETerminalRuleCall_1_0() { return cCONTINUETerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//BREAK ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//BREAK
		public RuleCall getBREAKTerminalRuleCall_2_0() { return cBREAKTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//RETURNO ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//RETURNO
		public RuleCall getRETURNOTerminalRuleCall_3_0() { return cRETURNOTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//RETURNO expression ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//RETURNO
		public RuleCall getRETURNOTerminalRuleCall_4_0() { return cRETURNOTerminalRuleCall_4_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
	}
	public class Translation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.translation_unit");
		private final RuleCall cExternal_declarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//translation_unit:
		//	external_declaration+;
		@Override public ParserRule getRule() { return rule; }
		
		//external_declaration+
		public RuleCall getExternal_declarationParserRuleCall() { return cExternal_declarationParserRuleCall; }
	}
	public class External_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.external_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunction_definitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//external_declaration:
		//	function_definition
		//	| declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//function_definition | declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function_definition
		public RuleCall getFunction_definitionParserRuleCall_0() { return cFunction_definitionParserRuleCall_0; }
		
		//declaration
		public RuleCall getDeclarationParserRuleCall_1() { return cDeclarationParserRuleCall_1; }
	}
	public class Function_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.function_definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaration_specifiersParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaratorParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaration_listParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cCompound_statementParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDeclaration_specifiersParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaratorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cCompound_statementParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cDeclaratorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cDeclaration_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCompound_statementParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cDeclaratorParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cCompound_statementParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//function_definition:
		//	declaration_specifiers declarator declaration_list compound_statement
		//	| declaration_specifiers declarator compound_statement
		//	| declarator declaration_list compound_statement
		//	| declarator compound_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers declarator declaration_list compound_statement | declaration_specifiers declarator
		//compound_statement | declarator declaration_list compound_statement | declarator compound_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration_specifiers declarator declaration_list compound_statement
		public Group getGroup_0() { return cGroup_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersParserRuleCall_0_0() { return cDeclaration_specifiersParserRuleCall_0_0; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_0_1() { return cDeclaratorParserRuleCall_0_1; }
		
		//declaration_list
		public RuleCall getDeclaration_listParserRuleCall_0_2() { return cDeclaration_listParserRuleCall_0_2; }
		
		//compound_statement
		public RuleCall getCompound_statementParserRuleCall_0_3() { return cCompound_statementParserRuleCall_0_3; }
		
		//declaration_specifiers declarator compound_statement
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersParserRuleCall_1_0() { return cDeclaration_specifiersParserRuleCall_1_0; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_1_1() { return cDeclaratorParserRuleCall_1_1; }
		
		//compound_statement
		public RuleCall getCompound_statementParserRuleCall_1_2() { return cCompound_statementParserRuleCall_1_2; }
		
		//declarator declaration_list compound_statement
		public Group getGroup_2() { return cGroup_2; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_2_0() { return cDeclaratorParserRuleCall_2_0; }
		
		//declaration_list
		public RuleCall getDeclaration_listParserRuleCall_2_1() { return cDeclaration_listParserRuleCall_2_1; }
		
		//compound_statement
		public RuleCall getCompound_statementParserRuleCall_2_2() { return cCompound_statementParserRuleCall_2_2; }
		
		//declarator compound_statement
		public Group getGroup_3() { return cGroup_3; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_3_0() { return cDeclaratorParserRuleCall_3_0; }
		
		//compound_statement
		public RuleCall getCompound_statementParserRuleCall_3_1() { return cCompound_statementParserRuleCall_3_1; }
	}
	public class IDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.IDENTIFIER");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IDENTIFIER:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class TYPE_NAMEEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.TYPE_NAMEE");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TYPE_NAMEE:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class STRING_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.STRING_LITERAL");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//STRING_LITERAL:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class FSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.FS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//FS:
		//	'f' | 'F' | 'l' | 'L';
		@Override public ParserRule getRule() { return rule; }
		
		//'f' | 'F' | 'l' | 'L'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'f'
		public Keyword getFKeyword_0() { return cFKeyword_0; }
		
		//'F'
		public Keyword getFKeyword_1() { return cFKeyword_1; }
		
		//'l'
		public Keyword getLKeyword_2() { return cLKeyword_2; }
		
		//'L'
		public Keyword getLKeyword_3() { return cLKeyword_3; }
	}
	public class ISElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.IS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//IS:
		//	('u' | 'U' | 'l' | 'L')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('u' | 'U' | 'l' | 'L')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'u'
		public Keyword getUKeyword_0() { return cUKeyword_0; }
		
		//'U'
		public Keyword getUKeyword_1() { return cUKeyword_1; }
		
		//'l'
		public Keyword getLKeyword_2() { return cLKeyword_2; }
		
		//'L'
		public Keyword getLKeyword_3() { return cLKeyword_3; }
	}
	public class CONSTANTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.CONSTANT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cISParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cETerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cFSParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cETerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cFSParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		////0[xX]{H}+{IS}?	
		////L?'(\\.|[^\\'])+'
		//CONSTANT:
		//	D+ IS? | D* '.' D+ E? FS? | D+ '.' E? FS?;
		@Override public ParserRule getRule() { return rule; }
		
		//D+ IS? | D* '.' D+ E? FS? | D+ '.' E? FS?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//D+ IS?
		public Group getGroup_0() { return cGroup_0; }
		
		//D+
		public RuleCall getDTerminalRuleCall_0_0() { return cDTerminalRuleCall_0_0; }
		
		//IS?
		public RuleCall getISParserRuleCall_0_1() { return cISParserRuleCall_0_1; }
		
		//D* '.' D+ E? FS?
		public Group getGroup_1() { return cGroup_1; }
		
		//D*
		public RuleCall getDTerminalRuleCall_1_0() { return cDTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//D+
		public RuleCall getDTerminalRuleCall_1_2() { return cDTerminalRuleCall_1_2; }
		
		//E?
		public RuleCall getETerminalRuleCall_1_3() { return cETerminalRuleCall_1_3; }
		
		//FS?
		public RuleCall getFSParserRuleCall_1_4() { return cFSParserRuleCall_1_4; }
		
		//D+ '.' E? FS?
		public Group getGroup_2() { return cGroup_2; }
		
		//D+
		public RuleCall getDTerminalRuleCall_2_0() { return cDTerminalRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//E?
		public RuleCall getETerminalRuleCall_2_2() { return cETerminalRuleCall_2_2; }
		
		//FS?
		public RuleCall getFSParserRuleCall_2_3() { return cFSParserRuleCall_2_3; }
	}
	
	
	private final DomainModelElements pDomainModel;
	private final Primary_expressionElements pPrimary_expression;
	private final Postfix_expressionLElements pPostfix_expressionL;
	private final Postfix_expressionElements pPostfix_expression;
	private final Argument_expression_listIElements pArgument_expression_listI;
	private final Argument_expression_listElements pArgument_expression_list;
	private final Unary_expressionElements pUnary_expression;
	private final Unary_operatorElements pUnary_operator;
	private final Cast_expressionElements pCast_expression;
	private final Multiplicative_expressionIElements pMultiplicative_expressionI;
	private final Multiplicative_expressionElements pMultiplicative_expression;
	private final Additive_expressionElements pAdditive_expression;
	private final Shift_expressionElements pShift_expression;
	private final Relational_expressionElements pRelational_expression;
	private final Equality_expressionElements pEquality_expression;
	private final And_expressionElements pAnd_expression;
	private final Exclusive_or_expressionElements pExclusive_or_expression;
	private final Inclusive_or_expressionElements pInclusive_or_expression;
	private final Logical_and_expressionElements pLogical_and_expression;
	private final Logical_or_expressionElements pLogical_or_expression;
	private final Conditional_expressionElements pConditional_expression;
	private final Assignment_expressionElements pAssignment_expression;
	private final ExpressionElements pExpression;
	private final Assignment_operatorElements pAssignment_operator;
	private final Constant_expressionElements pConstant_expression;
	private final DeclarationElements pDeclaration;
	private final Declaration_specifiersElements pDeclaration_specifiers;
	private final Init_declarator_listElements pInit_declarator_list;
	private final Init_declaratorElements pInit_declarator;
	private final Storage_class_specifierElements pStorage_class_specifier;
	private final Type_specifierElements pType_specifier;
	private final Struct_or_union_specifierElements pStruct_or_union_specifier;
	private final Struct_or_unionElements pStruct_or_union;
	private final Struct_declaration_listElements pStruct_declaration_list;
	private final Struct_declarationElements pStruct_declaration;
	private final Specifier_qualifier_listElements pSpecifier_qualifier_list;
	private final Struct_declarator_listElements pStruct_declarator_list;
	private final Struct_declaratorElements pStruct_declarator;
	private final Enum_specifierElements pEnum_specifier;
	private final Enumerator_listElements pEnumerator_list;
	private final EnumeratorElements pEnumerator;
	private final Type_qualifierElements pType_qualifier;
	private final DeclaratorElements pDeclarator;
	private final Direct_declaratorElements pDirect_declarator;
	private final Direct_declaratorIElements pDirect_declaratorI;
	private final PointerElements pPointer;
	private final Type_qualifier_listElements pType_qualifier_list;
	private final Parameter_type_listElements pParameter_type_list;
	private final Parameter_listElements pParameter_list;
	private final Parameter_declarationElements pParameter_declaration;
	private final Identifier_listElements pIdentifier_list;
	private final Type_nameElements pType_name;
	private final Abstract_declaratorElements pAbstract_declarator;
	private final Direct_abstract_declaratorElements pDirect_abstract_declarator;
	private final Direct_abstract_declaratorIElements pDirect_abstract_declaratorI;
	private final InitializerElements pInitializer;
	private final Initializer_listElements pInitializer_list;
	private final StatementElements pStatement;
	private final Labeled_statementElements pLabeled_statement;
	private final Compound_statementElements pCompound_statement;
	private final Declaration_listElements pDeclaration_list;
	private final Statement_listElements pStatement_list;
	private final Expression_statementElements pExpression_statement;
	private final Selection_statementElements pSelection_statement;
	private final Iteration_statementElements pIteration_statement;
	private final Jump_statementElements pJump_statement;
	private final Translation_unitElements pTranslation_unit;
	private final External_declarationElements pExternal_declaration;
	private final Function_definitionElements pFunction_definition;
	private final TerminalRule tAUTO;
	private final TerminalRule tBREAK;
	private final TerminalRule tCASE;
	private final TerminalRule tCHAR;
	private final TerminalRule tCONST;
	private final TerminalRule tCONTINUE;
	private final TerminalRule tDEFAULT;
	private final TerminalRule tDO;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tELSE;
	private final TerminalRule tENUM;
	private final TerminalRule tEXTERN;
	private final TerminalRule tFLOAT;
	private final TerminalRule tFOR;
	private final TerminalRule tGOTO;
	private final TerminalRule tIF;
	private final TerminalRule tINTE;
	private final TerminalRule tLONG;
	private final TerminalRule tREGISTER;
	private final TerminalRule tRETURNO;
	private final TerminalRule tSHORT;
	private final TerminalRule tSIGNED;
	private final TerminalRule tSIZEOF;
	private final TerminalRule tSTATIC;
	private final TerminalRule tSTRUCT;
	private final TerminalRule tSWITCH;
	private final TerminalRule tTYPEDEF;
	private final TerminalRule tUNION;
	private final TerminalRule tUNSIGNED;
	private final TerminalRule tVOID;
	private final TerminalRule tVOLATILE;
	private final TerminalRule tWHILE;
	private final TerminalRule tELLIPSIS;
	private final TerminalRule tRIGHT_ASSIGN;
	private final TerminalRule tLEFT_ASSIGN;
	private final TerminalRule tADD_ASSIGN;
	private final TerminalRule tSUB_ASSIGN;
	private final TerminalRule tMUL_ASSIGN;
	private final TerminalRule tDIV_ASSIGN;
	private final TerminalRule tMOD_ASSIGN;
	private final TerminalRule tAND_ASSIGN;
	private final TerminalRule tXOR_ASSIGN;
	private final TerminalRule tOR_ASSIGN;
	private final TerminalRule tRIGHT_OP;
	private final TerminalRule tLEFT_OP;
	private final TerminalRule tINC_OP;
	private final TerminalRule tDEC_OP;
	private final TerminalRule tPTR_OP;
	private final TerminalRule tAND_OP;
	private final TerminalRule tOR_OP;
	private final TerminalRule tLE_OP;
	private final TerminalRule tGE_OP;
	private final TerminalRule tEQ_OP;
	private final TerminalRule tNE_OP;
	private final IDENTIFIERElements pIDENTIFIER;
	private final TYPE_NAMEEElements pTYPE_NAMEE;
	private final STRING_LITERALElements pSTRING_LITERAL;
	private final TerminalRule tD;
	private final TerminalRule tL;
	private final TerminalRule tE;
	private final FSElements pFS;
	private final ISElements pIS;
	private final CONSTANTElements pCONSTANT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AnsicGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pPrimary_expression = new Primary_expressionElements();
		this.pPostfix_expressionL = new Postfix_expressionLElements();
		this.pPostfix_expression = new Postfix_expressionElements();
		this.pArgument_expression_listI = new Argument_expression_listIElements();
		this.pArgument_expression_list = new Argument_expression_listElements();
		this.pUnary_expression = new Unary_expressionElements();
		this.pUnary_operator = new Unary_operatorElements();
		this.pCast_expression = new Cast_expressionElements();
		this.pMultiplicative_expressionI = new Multiplicative_expressionIElements();
		this.pMultiplicative_expression = new Multiplicative_expressionElements();
		this.pAdditive_expression = new Additive_expressionElements();
		this.pShift_expression = new Shift_expressionElements();
		this.pRelational_expression = new Relational_expressionElements();
		this.pEquality_expression = new Equality_expressionElements();
		this.pAnd_expression = new And_expressionElements();
		this.pExclusive_or_expression = new Exclusive_or_expressionElements();
		this.pInclusive_or_expression = new Inclusive_or_expressionElements();
		this.pLogical_and_expression = new Logical_and_expressionElements();
		this.pLogical_or_expression = new Logical_or_expressionElements();
		this.pConditional_expression = new Conditional_expressionElements();
		this.pAssignment_expression = new Assignment_expressionElements();
		this.pExpression = new ExpressionElements();
		this.pAssignment_operator = new Assignment_operatorElements();
		this.pConstant_expression = new Constant_expressionElements();
		this.pDeclaration = new DeclarationElements();
		this.pDeclaration_specifiers = new Declaration_specifiersElements();
		this.pInit_declarator_list = new Init_declarator_listElements();
		this.pInit_declarator = new Init_declaratorElements();
		this.pStorage_class_specifier = new Storage_class_specifierElements();
		this.pType_specifier = new Type_specifierElements();
		this.pStruct_or_union_specifier = new Struct_or_union_specifierElements();
		this.pStruct_or_union = new Struct_or_unionElements();
		this.pStruct_declaration_list = new Struct_declaration_listElements();
		this.pStruct_declaration = new Struct_declarationElements();
		this.pSpecifier_qualifier_list = new Specifier_qualifier_listElements();
		this.pStruct_declarator_list = new Struct_declarator_listElements();
		this.pStruct_declarator = new Struct_declaratorElements();
		this.pEnum_specifier = new Enum_specifierElements();
		this.pEnumerator_list = new Enumerator_listElements();
		this.pEnumerator = new EnumeratorElements();
		this.pType_qualifier = new Type_qualifierElements();
		this.pDeclarator = new DeclaratorElements();
		this.pDirect_declarator = new Direct_declaratorElements();
		this.pDirect_declaratorI = new Direct_declaratorIElements();
		this.pPointer = new PointerElements();
		this.pType_qualifier_list = new Type_qualifier_listElements();
		this.pParameter_type_list = new Parameter_type_listElements();
		this.pParameter_list = new Parameter_listElements();
		this.pParameter_declaration = new Parameter_declarationElements();
		this.pIdentifier_list = new Identifier_listElements();
		this.pType_name = new Type_nameElements();
		this.pAbstract_declarator = new Abstract_declaratorElements();
		this.pDirect_abstract_declarator = new Direct_abstract_declaratorElements();
		this.pDirect_abstract_declaratorI = new Direct_abstract_declaratorIElements();
		this.pInitializer = new InitializerElements();
		this.pInitializer_list = new Initializer_listElements();
		this.pStatement = new StatementElements();
		this.pLabeled_statement = new Labeled_statementElements();
		this.pCompound_statement = new Compound_statementElements();
		this.pDeclaration_list = new Declaration_listElements();
		this.pStatement_list = new Statement_listElements();
		this.pExpression_statement = new Expression_statementElements();
		this.pSelection_statement = new Selection_statementElements();
		this.pIteration_statement = new Iteration_statementElements();
		this.pJump_statement = new Jump_statementElements();
		this.pTranslation_unit = new Translation_unitElements();
		this.pExternal_declaration = new External_declarationElements();
		this.pFunction_definition = new Function_definitionElements();
		this.tAUTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.AUTO");
		this.tBREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.BREAK");
		this.tCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.CASE");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.CHAR");
		this.tCONST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.CONST");
		this.tCONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.CONTINUE");
		this.tDEFAULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.DEFAULT");
		this.tDO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.DO");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.DOUBLE");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.ELSE");
		this.tENUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.ENUM");
		this.tEXTERN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.EXTERN");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.FLOAT");
		this.tFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.FOR");
		this.tGOTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.GOTO");
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.IF");
		this.tINTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.INTE");
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.LONG");
		this.tREGISTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.REGISTER");
		this.tRETURNO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.RETURNO");
		this.tSHORT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.SHORT");
		this.tSIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.SIGNED");
		this.tSIZEOF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.SIZEOF");
		this.tSTATIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.STATIC");
		this.tSTRUCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.STRUCT");
		this.tSWITCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.SWITCH");
		this.tTYPEDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.TYPEDEF");
		this.tUNION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.UNION");
		this.tUNSIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.UNSIGNED");
		this.tVOID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.VOID");
		this.tVOLATILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.VOLATILE");
		this.tWHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.WHILE");
		this.tELLIPSIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.ELLIPSIS");
		this.tRIGHT_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.RIGHT_ASSIGN");
		this.tLEFT_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.LEFT_ASSIGN");
		this.tADD_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.ADD_ASSIGN");
		this.tSUB_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.SUB_ASSIGN");
		this.tMUL_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.MUL_ASSIGN");
		this.tDIV_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.DIV_ASSIGN");
		this.tMOD_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.MOD_ASSIGN");
		this.tAND_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.AND_ASSIGN");
		this.tXOR_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.XOR_ASSIGN");
		this.tOR_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.OR_ASSIGN");
		this.tRIGHT_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.RIGHT_OP");
		this.tLEFT_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.LEFT_OP");
		this.tINC_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.INC_OP");
		this.tDEC_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.DEC_OP");
		this.tPTR_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.PTR_OP");
		this.tAND_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.AND_OP");
		this.tOR_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.OR_OP");
		this.tLE_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.LE_OP");
		this.tGE_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.GE_OP");
		this.tEQ_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.EQ_OP");
		this.tNE_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.NE_OP");
		this.pIDENTIFIER = new IDENTIFIERElements();
		this.pTYPE_NAMEE = new TYPE_NAMEEElements();
		this.pSTRING_LITERAL = new STRING_LITERALElements();
		this.tD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.D");
		this.tL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.L");
		this.tE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.Ansic.E");
		this.pFS = new FSElements();
		this.pIS = new ISElements();
		this.pCONSTANT = new CONSTANTElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Ansic".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainModel:
	//	geetings+=translation_unit;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	//primary_expression:
	//	IDENTIFIER
	//	| CONSTANT
	//	| STRING_LITERAL
	//	| '(' expression ')';
	public Primary_expressionElements getPrimary_expressionAccess() {
		return pPrimary_expression;
	}
	
	public ParserRule getPrimary_expressionRule() {
		return getPrimary_expressionAccess().getRule();
	}
	
	//postfix_expressionL:
	//	'[' expression ']' postfix_expressionL | '(' ')' postfix_expressionL
	//	| '(' argument_expression_list ')' postfix_expressionL | '.' IDENTIFIER postfix_expressionL
	//	| PTR_OP IDENTIFIER postfix_expressionL
	//	| INC_OP postfix_expressionL
	//	| (DEC_OP postfix_expressionL)?;
	public Postfix_expressionLElements getPostfix_expressionLAccess() {
		return pPostfix_expressionL;
	}
	
	public ParserRule getPostfix_expressionLRule() {
		return getPostfix_expressionLAccess().getRule();
	}
	
	//postfix_expression:
	//	primary_expression postfix_expressionL;
	public Postfix_expressionElements getPostfix_expressionAccess() {
		return pPostfix_expression;
	}
	
	public ParserRule getPostfix_expressionRule() {
		return getPostfix_expressionAccess().getRule();
	}
	
	//argument_expression_listI:
	//	(',' assignment_expression argument_expression_listI)?;
	public Argument_expression_listIElements getArgument_expression_listIAccess() {
		return pArgument_expression_listI;
	}
	
	public ParserRule getArgument_expression_listIRule() {
		return getArgument_expression_listIAccess().getRule();
	}
	
	//argument_expression_list:
	//	assignment_expression argument_expression_listI;
	public Argument_expression_listElements getArgument_expression_listAccess() {
		return pArgument_expression_list;
	}
	
	public ParserRule getArgument_expression_listRule() {
		return getArgument_expression_listAccess().getRule();
	}
	
	//unary_expression:
	//	postfix_expression
	//	| INC_OP unary_expression
	//	| DEC_OP unary_expression
	//	| unary_operator cast_expression
	//	| SIZEOF unary_expression
	//	| SIZEOF '(' type_name ')';
	public Unary_expressionElements getUnary_expressionAccess() {
		return pUnary_expression;
	}
	
	public ParserRule getUnary_expressionRule() {
		return getUnary_expressionAccess().getRule();
	}
	
	//unary_operator:
	//	'&'
	//	| '*'
	//	| '+'
	//	| '-'
	//	| '~'
	//	| '!';
	public Unary_operatorElements getUnary_operatorAccess() {
		return pUnary_operator;
	}
	
	public ParserRule getUnary_operatorRule() {
		return getUnary_operatorAccess().getRule();
	}
	
	//cast_expression:
	//	unary_expression
	//	| '(' type_name ')' cast_expression;
	public Cast_expressionElements getCast_expressionAccess() {
		return pCast_expression;
	}
	
	public ParserRule getCast_expressionRule() {
		return getCast_expressionAccess().getRule();
	}
	
	//multiplicative_expressionI:
	//	'*' cast_expression multiplicative_expressionI
	//	| '/' cast_expression multiplicative_expressionI
	//	| ('%' cast_expression multiplicative_expressionI)?;
	public Multiplicative_expressionIElements getMultiplicative_expressionIAccess() {
		return pMultiplicative_expressionI;
	}
	
	public ParserRule getMultiplicative_expressionIRule() {
		return getMultiplicative_expressionIAccess().getRule();
	}
	
	//multiplicative_expression:
	//	cast_expression multiplicative_expressionI;
	public Multiplicative_expressionElements getMultiplicative_expressionAccess() {
		return pMultiplicative_expression;
	}
	
	public ParserRule getMultiplicative_expressionRule() {
		return getMultiplicative_expressionAccess().getRule();
	}
	
	//additive_expression:
	//	multiplicative_expression (('+' | '-') multiplicative_expression)*;
	public Additive_expressionElements getAdditive_expressionAccess() {
		return pAdditive_expression;
	}
	
	public ParserRule getAdditive_expressionRule() {
		return getAdditive_expressionAccess().getRule();
	}
	
	//shift_expression:
	//	additive_expression ((LEFT_OP | RIGHT_OP) additive_expression)*;
	public Shift_expressionElements getShift_expressionAccess() {
		return pShift_expression;
	}
	
	public ParserRule getShift_expressionRule() {
		return getShift_expressionAccess().getRule();
	}
	
	//relational_expression:
	//	shift_expression (('<' | '>' | LE_OP | GE_OP) shift_expression)*;
	public Relational_expressionElements getRelational_expressionAccess() {
		return pRelational_expression;
	}
	
	public ParserRule getRelational_expressionRule() {
		return getRelational_expressionAccess().getRule();
	}
	
	//equality_expression:
	//	relational_expression ((EQ_OP | NE_OP) relational_expression)*;
	public Equality_expressionElements getEquality_expressionAccess() {
		return pEquality_expression;
	}
	
	public ParserRule getEquality_expressionRule() {
		return getEquality_expressionAccess().getRule();
	}
	
	//and_expression:
	//	equality_expression ('&' equality_expression)*;
	public And_expressionElements getAnd_expressionAccess() {
		return pAnd_expression;
	}
	
	public ParserRule getAnd_expressionRule() {
		return getAnd_expressionAccess().getRule();
	}
	
	//exclusive_or_expression:
	//	and_expression ('^' and_expression)*;
	public Exclusive_or_expressionElements getExclusive_or_expressionAccess() {
		return pExclusive_or_expression;
	}
	
	public ParserRule getExclusive_or_expressionRule() {
		return getExclusive_or_expressionAccess().getRule();
	}
	
	//inclusive_or_expression:
	//	exclusive_or_expression ('|' exclusive_or_expression)*;
	public Inclusive_or_expressionElements getInclusive_or_expressionAccess() {
		return pInclusive_or_expression;
	}
	
	public ParserRule getInclusive_or_expressionRule() {
		return getInclusive_or_expressionAccess().getRule();
	}
	
	//logical_and_expression:
	//	inclusive_or_expression (AND_OP inclusive_or_expression)*;
	public Logical_and_expressionElements getLogical_and_expressionAccess() {
		return pLogical_and_expression;
	}
	
	public ParserRule getLogical_and_expressionRule() {
		return getLogical_and_expressionAccess().getRule();
	}
	
	//logical_or_expression:
	//	logical_and_expression (OR_OP logical_and_expression)*;
	public Logical_or_expressionElements getLogical_or_expressionAccess() {
		return pLogical_or_expression;
	}
	
	public ParserRule getLogical_or_expressionRule() {
		return getLogical_or_expressionAccess().getRule();
	}
	
	//conditional_expression:
	//	logical_or_expression ('?' expression ':' conditional_expression)?;
	public Conditional_expressionElements getConditional_expressionAccess() {
		return pConditional_expression;
	}
	
	public ParserRule getConditional_expressionRule() {
		return getConditional_expressionAccess().getRule();
	}
	
	//assignment_expression:
	//	conditional_expression
	//	| unary_expression assignment_operator assignment_expression;
	public Assignment_expressionElements getAssignment_expressionAccess() {
		return pAssignment_expression;
	}
	
	public ParserRule getAssignment_expressionRule() {
		return getAssignment_expressionAccess().getRule();
	}
	
	//expression:
	//	assignment_expression (',' assignment_expression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//assignment_operator:
	//	'='
	//	| MUL_ASSIGN
	//	| DIV_ASSIGN
	//	| MOD_ASSIGN
	//	| ADD_ASSIGN
	//	| SUB_ASSIGN
	//	| LEFT_ASSIGN
	//	| RIGHT_ASSIGN
	//	| AND_ASSIGN
	//	| XOR_ASSIGN
	//	| OR_ASSIGN;
	public Assignment_operatorElements getAssignment_operatorAccess() {
		return pAssignment_operator;
	}
	
	public ParserRule getAssignment_operatorRule() {
		return getAssignment_operatorAccess().getRule();
	}
	
	//constant_expression:
	//	conditional_expression;
	public Constant_expressionElements getConstant_expressionAccess() {
		return pConstant_expression;
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}
	
	//declaration:
	//	declaration_specifiers init_declarator_list? ';';
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//declaration_specifiers:
	//	storage_class_specifier declaration_specifiers?
	//	| type_specifier declaration_specifiers?
	//	| type_qualifier declaration_specifiers?;
	public Declaration_specifiersElements getDeclaration_specifiersAccess() {
		return pDeclaration_specifiers;
	}
	
	public ParserRule getDeclaration_specifiersRule() {
		return getDeclaration_specifiersAccess().getRule();
	}
	
	//init_declarator_list:
	//	init_declarator (',' init_declarator)*;
	public Init_declarator_listElements getInit_declarator_listAccess() {
		return pInit_declarator_list;
	}
	
	public ParserRule getInit_declarator_listRule() {
		return getInit_declarator_listAccess().getRule();
	}
	
	//init_declarator:
	//	declarator ('=' initializer)*;
	public Init_declaratorElements getInit_declaratorAccess() {
		return pInit_declarator;
	}
	
	public ParserRule getInit_declaratorRule() {
		return getInit_declaratorAccess().getRule();
	}
	
	//storage_class_specifier:
	//	TYPEDEF
	//	| EXTERN
	//	| STATIC
	//	| AUTO
	//	| REGISTER;
	public Storage_class_specifierElements getStorage_class_specifierAccess() {
		return pStorage_class_specifier;
	}
	
	public ParserRule getStorage_class_specifierRule() {
		return getStorage_class_specifierAccess().getRule();
	}
	
	//type_specifier:
	//	VOID
	//	| 'charz'
	//	| SHORT
	//	| INT
	//	| LONG
	//	| FLOAT
	//	| DOUBLE
	//	| SIGNED
	//	| UNSIGNED
	//	| struct_or_union_specifier
	//	| enum_specifier
	//	| TYPE_NAMEE;
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}
	
	//struct_or_union_specifier:
	//	struct_or_union IDENTIFIER '{' struct_declaration_list '}'
	//	| struct_or_union '{' struct_declaration_list '}'
	//	| struct_or_union IDENTIFIER;
	public Struct_or_union_specifierElements getStruct_or_union_specifierAccess() {
		return pStruct_or_union_specifier;
	}
	
	public ParserRule getStruct_or_union_specifierRule() {
		return getStruct_or_union_specifierAccess().getRule();
	}
	
	//struct_or_union:
	//	STRUCT
	//	| UNION;
	public Struct_or_unionElements getStruct_or_unionAccess() {
		return pStruct_or_union;
	}
	
	public ParserRule getStruct_or_unionRule() {
		return getStruct_or_unionAccess().getRule();
	}
	
	//struct_declaration_list:
	//	struct_declaration+;
	public Struct_declaration_listElements getStruct_declaration_listAccess() {
		return pStruct_declaration_list;
	}
	
	public ParserRule getStruct_declaration_listRule() {
		return getStruct_declaration_listAccess().getRule();
	}
	
	//struct_declaration:
	//	specifier_qualifier_list struct_declarator_list ';';
	public Struct_declarationElements getStruct_declarationAccess() {
		return pStruct_declaration;
	}
	
	public ParserRule getStruct_declarationRule() {
		return getStruct_declarationAccess().getRule();
	}
	
	//specifier_qualifier_list:
	//	type_specifier specifier_qualifier_list
	//	| type_specifier
	//	| type_qualifier specifier_qualifier_list
	//	| type_qualifier;
	public Specifier_qualifier_listElements getSpecifier_qualifier_listAccess() {
		return pSpecifier_qualifier_list;
	}
	
	public ParserRule getSpecifier_qualifier_listRule() {
		return getSpecifier_qualifier_listAccess().getRule();
	}
	
	//struct_declarator_list:
	//	struct_declarator (',' struct_declarator)*;
	public Struct_declarator_listElements getStruct_declarator_listAccess() {
		return pStruct_declarator_list;
	}
	
	public ParserRule getStruct_declarator_listRule() {
		return getStruct_declarator_listAccess().getRule();
	}
	
	//struct_declarator:
	//	declarator
	//	| ':' constant_expression
	//	| declarator ':' constant_expression;
	public Struct_declaratorElements getStruct_declaratorAccess() {
		return pStruct_declarator;
	}
	
	public ParserRule getStruct_declaratorRule() {
		return getStruct_declaratorAccess().getRule();
	}
	
	//enum_specifier:
	//	ENUM '{' enumerator_list '}'
	//	| ENUM IDENTIFIER '{' enumerator_list '}'
	//	| ENUM IDENTIFIER;
	public Enum_specifierElements getEnum_specifierAccess() {
		return pEnum_specifier;
	}
	
	public ParserRule getEnum_specifierRule() {
		return getEnum_specifierAccess().getRule();
	}
	
	//enumerator_list:
	//	enumerator (',' enumerator)*;
	public Enumerator_listElements getEnumerator_listAccess() {
		return pEnumerator_list;
	}
	
	public ParserRule getEnumerator_listRule() {
		return getEnumerator_listAccess().getRule();
	}
	
	//enumerator:
	//	IDENTIFIER
	//	| IDENTIFIER '=' constant_expression;
	public EnumeratorElements getEnumeratorAccess() {
		return pEnumerator;
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}
	
	//type_qualifier:
	//	CONST
	//	| VOLATILE;
	public Type_qualifierElements getType_qualifierAccess() {
		return pType_qualifier;
	}
	
	public ParserRule getType_qualifierRule() {
		return getType_qualifierAccess().getRule();
	}
	
	//declarator:
	//	pointer direct_declarator
	//	| direct_declarator;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//direct_declarator:
	//	IDENTIFIER direct_declaratorI
	//	| '(' declarator ')' direct_declaratorI;
	public Direct_declaratorElements getDirect_declaratorAccess() {
		return pDirect_declarator;
	}
	
	public ParserRule getDirect_declaratorRule() {
		return getDirect_declaratorAccess().getRule();
	}
	
	//direct_declaratorI:
	//	'[' constant_expression ']' direct_declaratorI
	//	| '[' ']' direct_declaratorI
	//	| '(' parameter_type_list ')' direct_declaratorI
	//	| '(' identifier_list ')' direct_declaratorI
	//	| ('(' ')' direct_declaratorI)?;
	public Direct_declaratorIElements getDirect_declaratorIAccess() {
		return pDirect_declaratorI;
	}
	
	public ParserRule getDirect_declaratorIRule() {
		return getDirect_declaratorIAccess().getRule();
	}
	
	//pointer:
	//	'*'
	//	| '*' type_qualifier_list
	//	| '*' pointer
	//	| '*' type_qualifier_list pointer;
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//type_qualifier_list:
	//	type_qualifier+;
	public Type_qualifier_listElements getType_qualifier_listAccess() {
		return pType_qualifier_list;
	}
	
	public ParserRule getType_qualifier_listRule() {
		return getType_qualifier_listAccess().getRule();
	}
	
	//parameter_type_list:
	//	parameter_list (',' ELLIPSIS)*;
	public Parameter_type_listElements getParameter_type_listAccess() {
		return pParameter_type_list;
	}
	
	public ParserRule getParameter_type_listRule() {
		return getParameter_type_listAccess().getRule();
	}
	
	//parameter_list:
	//	parameter_declaration (',' parameter_declaration)*;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}
	
	//parameter_declaration:
	//	declaration_specifiers declarator
	//	| declaration_specifiers abstract_declarator
	//	| declaration_specifiers;
	public Parameter_declarationElements getParameter_declarationAccess() {
		return pParameter_declaration;
	}
	
	public ParserRule getParameter_declarationRule() {
		return getParameter_declarationAccess().getRule();
	}
	
	//identifier_list:
	//	IDENTIFIER (',' IDENTIFIER)*;
	public Identifier_listElements getIdentifier_listAccess() {
		return pIdentifier_list;
	}
	
	public ParserRule getIdentifier_listRule() {
		return getIdentifier_listAccess().getRule();
	}
	
	//type_name:
	//	specifier_qualifier_list abstract_declarator?;
	public Type_nameElements getType_nameAccess() {
		return pType_name;
	}
	
	public ParserRule getType_nameRule() {
		return getType_nameAccess().getRule();
	}
	
	//abstract_declarator:
	//	direct_abstract_declarator
	//	| pointer direct_abstract_declarator?;
	public Abstract_declaratorElements getAbstract_declaratorAccess() {
		return pAbstract_declarator;
	}
	
	public ParserRule getAbstract_declaratorRule() {
		return getAbstract_declaratorAccess().getRule();
	}
	
	//direct_abstract_declarator:
	//	'(' abstract_declarator ')' direct_abstract_declaratorI
	//	| '[' ']' direct_abstract_declaratorI
	//	| '[' constant_expression ']' direct_abstract_declaratorI
	//	| '(' ')' direct_abstract_declaratorI
	//	| '(' parameter_type_list ')' direct_abstract_declaratorI;
	public Direct_abstract_declaratorElements getDirect_abstract_declaratorAccess() {
		return pDirect_abstract_declarator;
	}
	
	public ParserRule getDirect_abstract_declaratorRule() {
		return getDirect_abstract_declaratorAccess().getRule();
	}
	
	//direct_abstract_declaratorI:
	//	'[' ']' direct_abstract_declaratorI
	//	| '[' constant_expression ']' direct_abstract_declaratorI
	//	| '(' ')' direct_abstract_declaratorI
	//	| '(' parameter_type_list ')' direct_abstract_declaratorI;
	public Direct_abstract_declaratorIElements getDirect_abstract_declaratorIAccess() {
		return pDirect_abstract_declaratorI;
	}
	
	public ParserRule getDirect_abstract_declaratorIRule() {
		return getDirect_abstract_declaratorIAccess().getRule();
	}
	
	//initializer:
	//	assignment_expression
	//	| '{' initializer_list '}'
	//	| '{' initializer_list ',' '}';
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//initializer_list:
	//	initializer (',' initializer)*;
	public Initializer_listElements getInitializer_listAccess() {
		return pInitializer_list;
	}
	
	public ParserRule getInitializer_listRule() {
		return getInitializer_listAccess().getRule();
	}
	
	//statement:
	//	labeled_statement
	//	| compound_statement
	//	| expression_statement
	//	| selection_statement
	//	| iteration_statement
	//	| jump_statement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//labeled_statement:
	//	IDENTIFIER ':' statement
	//	| CASE constant_expression ':' statement
	//	| DEFAULT ':' statement;
	public Labeled_statementElements getLabeled_statementAccess() {
		return pLabeled_statement;
	}
	
	public ParserRule getLabeled_statementRule() {
		return getLabeled_statementAccess().getRule();
	}
	
	//compound_statement:
	//	'{' '}'
	//	| '{' statement_list '}'
	//	| '{' declaration_list '}'
	//	| '{' declaration_list statement_list '}';
	public Compound_statementElements getCompound_statementAccess() {
		return pCompound_statement;
	}
	
	public ParserRule getCompound_statementRule() {
		return getCompound_statementAccess().getRule();
	}
	
	//declaration_list:
	//	declaration+;
	public Declaration_listElements getDeclaration_listAccess() {
		return pDeclaration_list;
	}
	
	public ParserRule getDeclaration_listRule() {
		return getDeclaration_listAccess().getRule();
	}
	
	//statement_list:
	//	statement+;
	public Statement_listElements getStatement_listAccess() {
		return pStatement_list;
	}
	
	public ParserRule getStatement_listRule() {
		return getStatement_listAccess().getRule();
	}
	
	//expression_statement:
	//	';'
	//	| expression ';';
	public Expression_statementElements getExpression_statementAccess() {
		return pExpression_statement;
	}
	
	public ParserRule getExpression_statementRule() {
		return getExpression_statementAccess().getRule();
	}
	
	//selection_statement:
	//	IF '(' expression ')' statement
	//	| IF '(' expression ')' statement ELSE statement
	//	| SWITCH '(' expression ')' statement;
	public Selection_statementElements getSelection_statementAccess() {
		return pSelection_statement;
	}
	
	public ParserRule getSelection_statementRule() {
		return getSelection_statementAccess().getRule();
	}
	
	//iteration_statement:
	//	WHILE '(' expression ')' statement
	//	| DO statement WHILE '(' expression ')' ';'
	//	| FOR '(' expression_statement expression_statement ')' statement
	//	| FOR '(' expression_statement expression_statement expression ')' statement;
	public Iteration_statementElements getIteration_statementAccess() {
		return pIteration_statement;
	}
	
	public ParserRule getIteration_statementRule() {
		return getIteration_statementAccess().getRule();
	}
	
	//jump_statement:
	//	GOTO IDENTIFIER ';'
	//	| CONTINUE ';'
	//	| BREAK ';'
	//	| RETURNO ';'
	//	| RETURNO expression ';';
	public Jump_statementElements getJump_statementAccess() {
		return pJump_statement;
	}
	
	public ParserRule getJump_statementRule() {
		return getJump_statementAccess().getRule();
	}
	
	//translation_unit:
	//	external_declaration+;
	public Translation_unitElements getTranslation_unitAccess() {
		return pTranslation_unit;
	}
	
	public ParserRule getTranslation_unitRule() {
		return getTranslation_unitAccess().getRule();
	}
	
	//external_declaration:
	//	function_definition
	//	| declaration;
	public External_declarationElements getExternal_declarationAccess() {
		return pExternal_declaration;
	}
	
	public ParserRule getExternal_declarationRule() {
		return getExternal_declarationAccess().getRule();
	}
	
	//function_definition:
	//	declaration_specifiers declarator declaration_list compound_statement
	//	| declaration_specifiers declarator compound_statement
	//	| declarator declaration_list compound_statement
	//	| declarator compound_statement;
	public Function_definitionElements getFunction_definitionAccess() {
		return pFunction_definition;
	}
	
	public ParserRule getFunction_definitionRule() {
		return getFunction_definitionAccess().getRule();
	}
	
	//terminal AUTO:
	//	"auto";
	public TerminalRule getAUTORule() {
		return tAUTO;
	}
	
	//terminal BREAK:
	//	"break";
	public TerminalRule getBREAKRule() {
		return tBREAK;
	}
	
	//terminal CASE:
	//	"case";
	public TerminalRule getCASERule() {
		return tCASE;
	}
	
	//terminal CHAR:
	//	"char";
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal CONST:
	//	"const";
	public TerminalRule getCONSTRule() {
		return tCONST;
	}
	
	//terminal CONTINUE:
	//	"continue";
	public TerminalRule getCONTINUERule() {
		return tCONTINUE;
	}
	
	//terminal DEFAULT:
	//	"default";
	public TerminalRule getDEFAULTRule() {
		return tDEFAULT;
	}
	
	//terminal DO:
	//	"do";
	public TerminalRule getDORule() {
		return tDO;
	}
	
	//terminal DOUBLE:
	//	"double";
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ELSE:
	//	"else";
	public TerminalRule getELSERule() {
		return tELSE;
	}
	
	//terminal ENUM:
	//	"enum";
	public TerminalRule getENUMRule() {
		return tENUM;
	}
	
	//terminal EXTERN:
	//	"extern";
	public TerminalRule getEXTERNRule() {
		return tEXTERN;
	}
	
	//terminal FLOAT:
	//	"float";
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal FOR:
	//	"for";
	public TerminalRule getFORRule() {
		return tFOR;
	}
	
	//terminal GOTO:
	//	"goto";
	public TerminalRule getGOTORule() {
		return tGOTO;
	}
	
	//terminal IF:
	//	"if";
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal INTE:
	//	"int";
	public TerminalRule getINTERule() {
		return tINTE;
	}
	
	//terminal LONG:
	//	"long";
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal REGISTER:
	//	"register";
	public TerminalRule getREGISTERRule() {
		return tREGISTER;
	}
	
	//terminal RETURNO:
	//	"return";
	public TerminalRule getRETURNORule() {
		return tRETURNO;
	}
	
	//terminal SHORT:
	//	"short";
	public TerminalRule getSHORTRule() {
		return tSHORT;
	}
	
	//terminal SIGNED:
	//	"signed";
	public TerminalRule getSIGNEDRule() {
		return tSIGNED;
	}
	
	//terminal SIZEOF:
	//	"sizeof";
	public TerminalRule getSIZEOFRule() {
		return tSIZEOF;
	}
	
	//terminal STATIC:
	//	"static";
	public TerminalRule getSTATICRule() {
		return tSTATIC;
	}
	
	//terminal STRUCT:
	//	"struct";
	public TerminalRule getSTRUCTRule() {
		return tSTRUCT;
	}
	
	//terminal SWITCH:
	//	"switch";
	public TerminalRule getSWITCHRule() {
		return tSWITCH;
	}
	
	//terminal TYPEDEF:
	//	"typedef";
	public TerminalRule getTYPEDEFRule() {
		return tTYPEDEF;
	}
	
	//terminal UNION:
	//	"union";
	public TerminalRule getUNIONRule() {
		return tUNION;
	}
	
	//terminal UNSIGNED:
	//	"unsigned";
	public TerminalRule getUNSIGNEDRule() {
		return tUNSIGNED;
	}
	
	//terminal VOID:
	//	"void";
	public TerminalRule getVOIDRule() {
		return tVOID;
	}
	
	//terminal VOLATILE:
	//	"volatile";
	public TerminalRule getVOLATILERule() {
		return tVOLATILE;
	}
	
	//terminal WHILE:
	//	"while";
	public TerminalRule getWHILERule() {
		return tWHILE;
	}
	
	//terminal ELLIPSIS:
	//	"...";
	public TerminalRule getELLIPSISRule() {
		return tELLIPSIS;
	}
	
	//terminal RIGHT_ASSIGN:
	//	">>=";
	public TerminalRule getRIGHT_ASSIGNRule() {
		return tRIGHT_ASSIGN;
	}
	
	//terminal LEFT_ASSIGN:
	//	"<<=";
	public TerminalRule getLEFT_ASSIGNRule() {
		return tLEFT_ASSIGN;
	}
	
	//terminal ADD_ASSIGN:
	//	"+=";
	public TerminalRule getADD_ASSIGNRule() {
		return tADD_ASSIGN;
	}
	
	//terminal SUB_ASSIGN:
	//	"-=";
	public TerminalRule getSUB_ASSIGNRule() {
		return tSUB_ASSIGN;
	}
	
	//terminal MUL_ASSIGN:
	//	"*=";
	public TerminalRule getMUL_ASSIGNRule() {
		return tMUL_ASSIGN;
	}
	
	//terminal DIV_ASSIGN:
	//	"/=";
	public TerminalRule getDIV_ASSIGNRule() {
		return tDIV_ASSIGN;
	}
	
	//terminal MOD_ASSIGN:
	//	"%=";
	public TerminalRule getMOD_ASSIGNRule() {
		return tMOD_ASSIGN;
	}
	
	//terminal AND_ASSIGN:
	//	"&=";
	public TerminalRule getAND_ASSIGNRule() {
		return tAND_ASSIGN;
	}
	
	//terminal XOR_ASSIGN:
	//	"^=";
	public TerminalRule getXOR_ASSIGNRule() {
		return tXOR_ASSIGN;
	}
	
	//terminal OR_ASSIGN:
	//	"|=";
	public TerminalRule getOR_ASSIGNRule() {
		return tOR_ASSIGN;
	}
	
	//terminal RIGHT_OP:
	//	">>";
	public TerminalRule getRIGHT_OPRule() {
		return tRIGHT_OP;
	}
	
	//terminal LEFT_OP:
	//	"<<";
	public TerminalRule getLEFT_OPRule() {
		return tLEFT_OP;
	}
	
	//terminal INC_OP:
	//	"++";
	public TerminalRule getINC_OPRule() {
		return tINC_OP;
	}
	
	//terminal DEC_OP:
	//	"--";
	public TerminalRule getDEC_OPRule() {
		return tDEC_OP;
	}
	
	//terminal PTR_OP:
	//	"->";
	public TerminalRule getPTR_OPRule() {
		return tPTR_OP;
	}
	
	//terminal AND_OP:
	//	"&&";
	public TerminalRule getAND_OPRule() {
		return tAND_OP;
	}
	
	//terminal OR_OP:
	//	"||";
	public TerminalRule getOR_OPRule() {
		return tOR_OP;
	}
	
	//terminal LE_OP:
	//	"<=";
	public TerminalRule getLE_OPRule() {
		return tLE_OP;
	}
	
	//terminal GE_OP:
	//	">=";
	public TerminalRule getGE_OPRule() {
		return tGE_OP;
	}
	
	//terminal EQ_OP:
	//	"==";
	public TerminalRule getEQ_OPRule() {
		return tEQ_OP;
	}
	
	//terminal NE_OP:
	//	"!=";
	public TerminalRule getNE_OPRule() {
		return tNE_OP;
	}
	
	//IDENTIFIER:
	//	ID;
	public IDENTIFIERElements getIDENTIFIERAccess() {
		return pIDENTIFIER;
	}
	
	public ParserRule getIDENTIFIERRule() {
		return getIDENTIFIERAccess().getRule();
	}
	
	//TYPE_NAMEE:
	//	ID;
	public TYPE_NAMEEElements getTYPE_NAMEEAccess() {
		return pTYPE_NAMEE;
	}
	
	public ParserRule getTYPE_NAMEERule() {
		return getTYPE_NAMEEAccess().getRule();
	}
	
	//STRING_LITERAL:
	//	STRING;
	public STRING_LITERALElements getSTRING_LITERALAccess() {
		return pSTRING_LITERAL;
	}
	
	public ParserRule getSTRING_LITERALRule() {
		return getSTRING_LITERALAccess().getRule();
	}
	
	//terminal D:
	//	'0'..'9';
	public TerminalRule getDRule() {
		return tD;
	}
	
	//terminal L:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getLRule() {
		return tL;
	}
	
	//terminal E:
	//	('E' | 'e') ('+' | '-')? D+;
	public TerminalRule getERule() {
		return tE;
	}
	
	//FS:
	//	'f' | 'F' | 'l' | 'L';
	public FSElements getFSAccess() {
		return pFS;
	}
	
	public ParserRule getFSRule() {
		return getFSAccess().getRule();
	}
	
	//IS:
	//	('u' | 'U' | 'l' | 'L')+;
	public ISElements getISAccess() {
		return pIS;
	}
	
	public ParserRule getISRule() {
		return getISAccess().getRule();
	}
	
	////0[xX]{H}+{IS}?	
	////L?'(\\.|[^\\'])+'
	//CONSTANT:
	//	D+ IS? | D* '.' D+ E? FS? | D+ '.' E? FS?;
	public CONSTANTElements getCONSTANTAccess() {
		return pCONSTANT;
	}
	
	public ParserRule getCONSTANTRule() {
		return getCONSTANTAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
